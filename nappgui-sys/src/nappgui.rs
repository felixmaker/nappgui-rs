/* automatically generated by rust-bindgen 0.71.1 */

pub const _VCRT_COMPILER_PREPROCESSOR: u32 = 1;
pub const _SAL_VERSION: u32 = 20;
pub const __SAL_H_VERSION: u32 = 180000000;
pub const _USE_DECLSPECS_FOR_SAL: u32 = 0;
pub const _USE_ATTRIBUTES_FOR_SAL: u32 = 0;
pub const _CRT_PACKING: u32 = 8;
pub const _HAS_EXCEPTIONS: u32 = 1;
pub const _STL_LANG: u32 = 0;
pub const _HAS_CXX17: u32 = 0;
pub const _HAS_CXX20: u32 = 0;
pub const _HAS_CXX23: u32 = 0;
pub const _HAS_CXX26: u32 = 0;
pub const _HAS_NODISCARD: u32 = 0;
pub const WCHAR_MIN: u32 = 0;
pub const WCHAR_MAX: u32 = 65535;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 65535;
pub const _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE: u32 = 1;
pub const _CRT_BUILD_DESKTOP_APP: u32 = 1;
pub const _ARGMAX: u32 = 100;
pub const _CRT_INT_MAX: u32 = 2147483647;
pub const _CRT_FUNCTIONS_REQUIRED: u32 = 1;
pub const _CRT_HAS_CXX17: u32 = 0;
pub const _CRT_HAS_C11: u32 = 1;
pub const _CRT_INTERNAL_NONSTDC_NAMES: u32 = 1;
pub const __STDC_SECURE_LIB__: u32 = 200411;
pub const __GOT_SECURE_LIB__: u32 = 200411;
pub const __STDC_WANT_SECURE_LIB__: u32 = 1;
pub const _SECURECRT_FILL_BUFFER_PATTERN: u32 = 254;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES: u32 = 1;
pub const _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY: u32 = 0;
pub const _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY: u32 = 0;
pub const REAL32_MAX: f64 = 100000000000000000000.0;
pub const REAL64_MAX: f64 = 100000000000000000000000000000000000000.0;
pub const REAL32_MIN: f64 = 0.00000000000000000001;
pub const REAL64_MIN: f64 = 0.00000000000000000000000000000000000001;
pub const PRIu64: &[u8; 4] = b"llu\0";
pub const PRId64: &[u8; 4] = b"lld\0";
pub const DIR_SEPARATOR: u8 = 92u8;
pub const kKEY_MAX: u32 = 112;
pub const HEAPARR: &[u8; 6] = b"::arr\0";
pub const ARRST: &[u8; 8] = b"ArrSt::\0";
pub const ARRPT: &[u8; 8] = b"ArrPt::\0";
pub const SETST: &[u8; 8] = b"SetSt::\0";
pub const SETPT: &[u8; 8] = b"SetPt::\0";
pub const GUI_CONTEXT_NUM_COMPONENTS: u32 = 17;
pub const kTEXTFILTER_SIZE: u32 = 4096;
pub type va_list = *mut ::libc::c_char;
pub type __vcrt_bool = bool;
pub type wchar_t = ::libc::c_ushort;
unsafe extern "C" {
    pub static mut __security_cookie: usize;
}
pub type int_least8_t = ::libc::c_schar;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_longlong;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulonglong;
pub type int_fast8_t = ::libc::c_schar;
pub type int_fast16_t = ::libc::c_int;
pub type int_fast32_t = ::libc::c_int;
pub type int_fast64_t = ::libc::c_longlong;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_uint;
pub type uint_fast32_t = ::libc::c_uint;
pub type uint_fast64_t = ::libc::c_ulonglong;
pub type intmax_t = ::libc::c_longlong;
pub type uintmax_t = ::libc::c_ulonglong;
pub type __crt_bool = bool;
pub type errno_t = ::libc::c_int;
pub type wint_t = ::libc::c_ushort;
pub type wctype_t = ::libc::c_ushort;
pub type __time32_t = ::libc::c_long;
pub type __time64_t = ::libc::c_longlong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data_public {
    pub _locale_pctype: *const ::libc::c_ushort,
    pub _locale_mb_cur_max: ::libc::c_int,
    pub _locale_lc_codepage: ::libc::c_uint,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_pointers {
    pub locinfo: *mut __crt_locale_data,
    pub mbcinfo: *mut __crt_multibyte_data,
}
pub type _locale_t = *mut __crt_locale_pointers;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _Mbstatet {
    pub _Wchar: ::libc::c_ulong,
    pub _Byte: ::libc::c_ushort,
    pub _State: ::libc::c_ushort,
}
pub type mbstate_t = _Mbstatet;
pub type time_t = __time64_t;
pub type rsize_t = usize;
pub type char_t = ::libc::c_char;
pub type byte_t = ::libc::c_uchar;
pub type bool_t = ::libc::c_char;
pub type real32_t = f32;
pub type real64_t = f64;
pub const _enum_t_ekENUM_GENERIC_VALUE: _enum_t = 0;
pub type _enum_t = ::libc::c_int;
pub use self::_enum_t as enum_t;
pub const _unicode_t_ekUTF8: _unicode_t = 0;
pub const _unicode_t_ekUTF16: _unicode_t = 1;
pub const _unicode_t_ekUTF32: _unicode_t = 2;
pub type _unicode_t = ::libc::c_int;
pub use self::_unicode_t as unicode_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _renv_t {
    _unused: [u8; 0],
}
pub type REnv = _renv_t;
pub type FPtr_destroy =
    ::core::option::Option<unsafe extern "C" fn(item: *mut *mut ::libc::c_void)>;
pub type FPtr_copy = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type FPtr_scopy = ::core::option::Option<
    unsafe extern "C" fn(dest: *mut ::libc::c_void, src: *const ::libc::c_void),
>;
pub type FPtr_compare = ::core::option::Option<
    unsafe extern "C" fn(
        item1: *const ::libc::c_void,
        item2: *const ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type FPtr_compare_ex = ::core::option::Option<
    unsafe extern "C" fn(
        item1: *const ::libc::c_void,
        item2: *const ::libc::c_void,
        data: *const ::libc::c_void,
    ) -> ::libc::c_int,
>;
pub type FPtr_assert = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        group: u32,
        caption: *const char_t,
        detail: *const char_t,
        file: *const char_t,
        line: u32,
    ),
>;
pub const _platform_t_ekWINDOWS: _platform_t = 1;
pub const _platform_t_ekMACOS: _platform_t = 2;
pub const _platform_t_ekLINUX: _platform_t = 3;
pub const _platform_t_ekIOS: _platform_t = 4;
pub type _platform_t = ::libc::c_int;
pub use self::_platform_t as platform_t;
pub const _device_t_ekDESKTOP: _device_t = 1;
pub const _device_t_ekPHONE: _device_t = 2;
pub const _device_t_ekTABLET: _device_t = 3;
pub type _device_t = ::libc::c_int;
pub use self::_device_t as device_t;
pub const _win_t_ekWIN_9x: _win_t = 1;
pub const _win_t_ekWIN_NT4: _win_t = 2;
pub const _win_t_ekWIN_2K: _win_t = 3;
pub const _win_t_ekWIN_XP: _win_t = 4;
pub const _win_t_ekWIN_XP1: _win_t = 5;
pub const _win_t_ekWIN_XP2: _win_t = 6;
pub const _win_t_ekWIN_XP3: _win_t = 7;
pub const _win_t_ekWIN_VI: _win_t = 8;
pub const _win_t_ekWIN_VI1: _win_t = 9;
pub const _win_t_ekWIN_VI2: _win_t = 10;
pub const _win_t_ekWIN_7: _win_t = 11;
pub const _win_t_ekWIN_71: _win_t = 12;
pub const _win_t_ekWIN_8: _win_t = 13;
pub const _win_t_ekWIN_81: _win_t = 14;
pub const _win_t_ekWIN_10: _win_t = 15;
pub const _win_t_ekWIN_NO: _win_t = 16;
pub type _win_t = ::libc::c_int;
pub use self::_win_t as win_t;
pub const _endian_t_ekLITEND: _endian_t = 1;
pub const _endian_t_ekBIGEND: _endian_t = 2;
pub type _endian_t = ::libc::c_int;
pub use self::_endian_t as endian_t;
pub const _week_day_t_ekSUNDAY: _week_day_t = 0;
pub const _week_day_t_ekMONDAY: _week_day_t = 1;
pub const _week_day_t_ekTUESDAY: _week_day_t = 2;
pub const _week_day_t_ekWEDNESDAY: _week_day_t = 3;
pub const _week_day_t_ekTHURSDAY: _week_day_t = 4;
pub const _week_day_t_ekFRIDAY: _week_day_t = 5;
pub const _week_day_t_ekSATURDAY: _week_day_t = 6;
pub type _week_day_t = ::libc::c_int;
pub use self::_week_day_t as week_day_t;
pub const _month_t_ekJANUARY: _month_t = 1;
pub const _month_t_ekFEBRUARY: _month_t = 2;
pub const _month_t_ekMARCH: _month_t = 3;
pub const _month_t_ekAPRIL: _month_t = 4;
pub const _month_t_ekMAY: _month_t = 5;
pub const _month_t_ekJUNE: _month_t = 6;
pub const _month_t_ekJULY: _month_t = 7;
pub const _month_t_ekAUGUST: _month_t = 8;
pub const _month_t_ekSEPTEMBER: _month_t = 9;
pub const _month_t_ekOCTOBER: _month_t = 10;
pub const _month_t_ekNOVEMBER: _month_t = 11;
pub const _month_t_ekDECEMBER: _month_t = 12;
pub type _month_t = ::libc::c_int;
pub use self::_month_t as month_t;
pub const _file_type_t_ekARCHIVE: _file_type_t = 1;
pub const _file_type_t_ekDIRECTORY: _file_type_t = 2;
pub const _file_type_t_ekOTHERFILE: _file_type_t = 3;
pub type _file_type_t = ::libc::c_int;
pub use self::_file_type_t as file_type_t;
pub const _file_mode_t_ekREAD: _file_mode_t = 1;
pub const _file_mode_t_ekWRITE: _file_mode_t = 2;
pub const _file_mode_t_ekAPPEND: _file_mode_t = 3;
pub type _file_mode_t = ::libc::c_int;
pub use self::_file_mode_t as file_mode_t;
pub const _file_seek_t_ekSEEKSET: _file_seek_t = 1;
pub const _file_seek_t_ekSEEKCUR: _file_seek_t = 2;
pub const _file_seek_t_ekSEEKEND: _file_seek_t = 3;
pub type _file_seek_t = ::libc::c_int;
pub use self::_file_seek_t as file_seek_t;
pub const _ferror_t_ekFEXISTS: _ferror_t = 1;
pub const _ferror_t_ekFNOPATH: _ferror_t = 2;
pub const _ferror_t_ekFNOFILE: _ferror_t = 3;
pub const _ferror_t_ekFBIGNAME: _ferror_t = 4;
pub const _ferror_t_ekFNOFILES: _ferror_t = 5;
pub const _ferror_t_ekFNOEMPTY: _ferror_t = 6;
pub const _ferror_t_ekFNOACCESS: _ferror_t = 7;
pub const _ferror_t_ekFLOCK: _ferror_t = 8;
pub const _ferror_t_ekFBIG: _ferror_t = 9;
pub const _ferror_t_ekFSEEKNEG: _ferror_t = 10;
pub const _ferror_t_ekFUNDEF: _ferror_t = 11;
pub const _ferror_t_ekFOK: _ferror_t = 12;
pub type _ferror_t = ::libc::c_int;
pub use self::_ferror_t as ferror_t;
pub const _perror_t_ekPPIPE: _perror_t = 1;
pub const _perror_t_ekPEXEC: _perror_t = 2;
pub const _perror_t_ekPOK: _perror_t = 3;
pub type _perror_t = ::libc::c_int;
pub use self::_perror_t as perror_t;
pub const _serror_t_ekSNONET: _serror_t = 1;
pub const _serror_t_ekSNOHOST: _serror_t = 2;
pub const _serror_t_ekSTIMEOUT: _serror_t = 3;
pub const _serror_t_ekSSTREAM: _serror_t = 4;
pub const _serror_t_ekSUNDEF: _serror_t = 5;
pub const _serror_t_ekSOK: _serror_t = 6;
pub type _serror_t = ::libc::c_int;
pub use self::_serror_t as serror_t;
pub type Date = _date_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dir_t {
    _unused: [u8; 0],
}
pub type Dir = _dir_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _file_t {
    _unused: [u8; 0],
}
pub type File = _file_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _mutex_t {
    _unused: [u8; 0],
}
pub type Mutex = _mutex_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _process_t {
    _unused: [u8; 0],
}
pub type Proc = _process_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dlib_t {
    _unused: [u8; 0],
}
pub type DLib = _dlib_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _thread_t {
    _unused: [u8; 0],
}
pub type Thread = _thread_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _socket_t {
    _unused: [u8; 0],
}
pub type Socket = _socket_t;
pub type FPtr_thread_main =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void) -> u32>;
pub type FPtr_libproc = ::core::option::Option<unsafe extern "C" fn()>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _date_t {
    pub year: i16,
    pub month: u8,
    pub wday: u8,
    pub mday: u8,
    pub hour: u8,
    pub minute: u8,
    pub second: u8,
}
pub const _core_event_t_ekEASSERT: _core_event_t = 256;
pub const _core_event_t_ekEFILE: _core_event_t = 257;
pub const _core_event_t_ekEENTRY: _core_event_t = 258;
pub const _core_event_t_ekEEXIT: _core_event_t = 259;
pub type _core_event_t = ::libc::c_int;
pub use self::_core_event_t as core_event_t;
pub const _sstate_t_ekSTOK: _sstate_t = 0;
pub const _sstate_t_ekSTEND: _sstate_t = 1;
pub const _sstate_t_ekSTCORRUPT: _sstate_t = 2;
pub const _sstate_t_ekSTBROKEN: _sstate_t = 3;
pub type _sstate_t = ::libc::c_int;
pub use self::_sstate_t as sstate_t;
pub const _key_t_ekKEY_UNDEF: _key_t = 0;
pub const _key_t_ekKEY_A: _key_t = 1;
pub const _key_t_ekKEY_S: _key_t = 2;
pub const _key_t_ekKEY_D: _key_t = 3;
pub const _key_t_ekKEY_F: _key_t = 4;
pub const _key_t_ekKEY_H: _key_t = 5;
pub const _key_t_ekKEY_G: _key_t = 6;
pub const _key_t_ekKEY_Z: _key_t = 7;
pub const _key_t_ekKEY_X: _key_t = 8;
pub const _key_t_ekKEY_C: _key_t = 9;
pub const _key_t_ekKEY_V: _key_t = 10;
pub const _key_t_ekKEY_BSLASH: _key_t = 11;
pub const _key_t_ekKEY_B: _key_t = 12;
pub const _key_t_ekKEY_Q: _key_t = 13;
pub const _key_t_ekKEY_W: _key_t = 14;
pub const _key_t_ekKEY_E: _key_t = 15;
pub const _key_t_ekKEY_R: _key_t = 16;
pub const _key_t_ekKEY_Y: _key_t = 17;
pub const _key_t_ekKEY_T: _key_t = 18;
pub const _key_t_ekKEY_1: _key_t = 19;
pub const _key_t_ekKEY_2: _key_t = 20;
pub const _key_t_ekKEY_3: _key_t = 21;
pub const _key_t_ekKEY_4: _key_t = 22;
pub const _key_t_ekKEY_6: _key_t = 23;
pub const _key_t_ekKEY_5: _key_t = 24;
pub const _key_t_ekKEY_9: _key_t = 25;
pub const _key_t_ekKEY_7: _key_t = 26;
pub const _key_t_ekKEY_8: _key_t = 27;
pub const _key_t_ekKEY_0: _key_t = 28;
pub const _key_t_ekKEY_RCURLY: _key_t = 29;
pub const _key_t_ekKEY_O: _key_t = 30;
pub const _key_t_ekKEY_U: _key_t = 31;
pub const _key_t_ekKEY_LCURLY: _key_t = 32;
pub const _key_t_ekKEY_I: _key_t = 33;
pub const _key_t_ekKEY_P: _key_t = 34;
pub const _key_t_ekKEY_RETURN: _key_t = 35;
pub const _key_t_ekKEY_L: _key_t = 36;
pub const _key_t_ekKEY_J: _key_t = 37;
pub const _key_t_ekKEY_SEMICOLON: _key_t = 38;
pub const _key_t_ekKEY_K: _key_t = 39;
pub const _key_t_ekKEY_QUEST: _key_t = 40;
pub const _key_t_ekKEY_COMMA: _key_t = 41;
pub const _key_t_ekKEY_MINUS: _key_t = 42;
pub const _key_t_ekKEY_N: _key_t = 43;
pub const _key_t_ekKEY_M: _key_t = 44;
pub const _key_t_ekKEY_PERIOD: _key_t = 45;
pub const _key_t_ekKEY_TAB: _key_t = 46;
pub const _key_t_ekKEY_SPACE: _key_t = 47;
pub const _key_t_ekKEY_GTLT: _key_t = 48;
pub const _key_t_ekKEY_BACK: _key_t = 49;
pub const _key_t_ekKEY_ESCAPE: _key_t = 50;
pub const _key_t_ekKEY_F17: _key_t = 51;
pub const _key_t_ekKEY_NUMDECIMAL: _key_t = 52;
pub const _key_t_ekKEY_NUMMULT: _key_t = 53;
pub const _key_t_ekKEY_NUMADD: _key_t = 54;
pub const _key_t_ekKEY_NUMLOCK: _key_t = 55;
pub const _key_t_ekKEY_NUMDIV: _key_t = 56;
pub const _key_t_ekKEY_NUMRET: _key_t = 57;
pub const _key_t_ekKEY_NUMMINUS: _key_t = 58;
pub const _key_t_ekKEY_F18: _key_t = 59;
pub const _key_t_ekKEY_F19: _key_t = 60;
pub const _key_t_ekKEY_NUMEQUAL: _key_t = 61;
pub const _key_t_ekKEY_NUM0: _key_t = 62;
pub const _key_t_ekKEY_NUM1: _key_t = 63;
pub const _key_t_ekKEY_NUM2: _key_t = 64;
pub const _key_t_ekKEY_NUM3: _key_t = 65;
pub const _key_t_ekKEY_NUM4: _key_t = 66;
pub const _key_t_ekKEY_NUM5: _key_t = 67;
pub const _key_t_ekKEY_NUM6: _key_t = 68;
pub const _key_t_ekKEY_NUM7: _key_t = 69;
pub const _key_t_ekKEY_NUM8: _key_t = 70;
pub const _key_t_ekKEY_NUM9: _key_t = 71;
pub const _key_t_ekKEY_F5: _key_t = 72;
pub const _key_t_ekKEY_F6: _key_t = 73;
pub const _key_t_ekKEY_F7: _key_t = 74;
pub const _key_t_ekKEY_F3: _key_t = 75;
pub const _key_t_ekKEY_F8: _key_t = 76;
pub const _key_t_ekKEY_F9: _key_t = 77;
pub const _key_t_ekKEY_F11: _key_t = 78;
pub const _key_t_ekKEY_F13: _key_t = 79;
pub const _key_t_ekKEY_F16: _key_t = 80;
pub const _key_t_ekKEY_F14: _key_t = 81;
pub const _key_t_ekKEY_F10: _key_t = 82;
pub const _key_t_ekKEY_F12: _key_t = 83;
pub const _key_t_ekKEY_F15: _key_t = 84;
pub const _key_t_ekKEY_PAGEUP: _key_t = 85;
pub const _key_t_ekKEY_HOME: _key_t = 86;
pub const _key_t_ekKEY_SUPR: _key_t = 87;
pub const _key_t_ekKEY_F4: _key_t = 88;
pub const _key_t_ekKEY_PAGEDOWN: _key_t = 89;
pub const _key_t_ekKEY_F2: _key_t = 90;
pub const _key_t_ekKEY_END: _key_t = 91;
pub const _key_t_ekKEY_F1: _key_t = 92;
pub const _key_t_ekKEY_LEFT: _key_t = 93;
pub const _key_t_ekKEY_RIGHT: _key_t = 94;
pub const _key_t_ekKEY_DOWN: _key_t = 95;
pub const _key_t_ekKEY_UP: _key_t = 96;
pub const _key_t_ekKEY_LSHIFT: _key_t = 97;
pub const _key_t_ekKEY_RSHIFT: _key_t = 98;
pub const _key_t_ekKEY_LCTRL: _key_t = 99;
pub const _key_t_ekKEY_RCTRL: _key_t = 100;
pub const _key_t_ekKEY_LALT: _key_t = 101;
pub const _key_t_ekKEY_RALT: _key_t = 102;
pub const _key_t_ekKEY_INSERT: _key_t = 103;
pub const _key_t_ekKEY_EXCLAM: _key_t = 104;
pub const _key_t_ekKEY_MENU: _key_t = 105;
pub const _key_t_ekKEY_LWIN: _key_t = 106;
pub const _key_t_ekKEY_RWIN: _key_t = 107;
pub const _key_t_ekKEY_CAPS: _key_t = 108;
pub const _key_t_ekKEY_TILDE: _key_t = 109;
pub const _key_t_ekKEY_GRAVE: _key_t = 110;
pub const _key_t_ekKEY_PLUS: _key_t = 111;
pub type _key_t = ::libc::c_int;
pub use self::_key_t as vkey_t;
pub const _mkey_t_ekMKEY_NONE: _mkey_t = 0;
pub const _mkey_t_ekMKEY_SHIFT: _mkey_t = 1;
pub const _mkey_t_ekMKEY_CONTROL: _mkey_t = 2;
pub const _mkey_t_ekMKEY_ALT: _mkey_t = 4;
pub const _mkey_t_ekMKEY_COMMAND: _mkey_t = 8;
pub type _mkey_t = ::libc::c_int;
pub use self::_mkey_t as mkey_t;
pub const _token_t_ekTSLCOM: _token_t = 1;
pub const _token_t_ekTMLCOM: _token_t = 2;
pub const _token_t_ekTSPACE: _token_t = 3;
pub const _token_t_ekTEOL: _token_t = 4;
pub const _token_t_ekTLESS: _token_t = 5;
pub const _token_t_ekTGREAT: _token_t = 6;
pub const _token_t_ekTCOMMA: _token_t = 7;
pub const _token_t_ekTPERIOD: _token_t = 8;
pub const _token_t_ekTSCOLON: _token_t = 9;
pub const _token_t_ekTCOLON: _token_t = 10;
pub const _token_t_ekTOPENPAR: _token_t = 11;
pub const _token_t_ekTCLOSPAR: _token_t = 12;
pub const _token_t_ekTOPENBRAC: _token_t = 13;
pub const _token_t_ekTCLOSBRAC: _token_t = 14;
pub const _token_t_ekTOPENCURL: _token_t = 15;
pub const _token_t_ekTCLOSCURL: _token_t = 16;
pub const _token_t_ekTPLUS: _token_t = 17;
pub const _token_t_ekTMINUS: _token_t = 18;
pub const _token_t_ekTASTERK: _token_t = 19;
pub const _token_t_ekTEQUALS: _token_t = 20;
pub const _token_t_ekTDOLLAR: _token_t = 21;
pub const _token_t_ekTPERCENT: _token_t = 22;
pub const _token_t_ekTPOUND: _token_t = 23;
pub const _token_t_ekTAMPER: _token_t = 24;
pub const _token_t_ekTAPOST: _token_t = 25;
pub const _token_t_ekTQUOTE: _token_t = 26;
pub const _token_t_ekTCIRCUM: _token_t = 27;
pub const _token_t_ekTTILDE: _token_t = 28;
pub const _token_t_ekTEXCLA: _token_t = 29;
pub const _token_t_ekTQUEST: _token_t = 30;
pub const _token_t_ekTVLINE: _token_t = 31;
pub const _token_t_ekTSLASH: _token_t = 32;
pub const _token_t_ekTBSLASH: _token_t = 33;
pub const _token_t_ekTAT: _token_t = 34;
pub const _token_t_ekTINTEGER: _token_t = 35;
pub const _token_t_ekTOCTAL: _token_t = 36;
pub const _token_t_ekTHEX: _token_t = 37;
pub const _token_t_ekTREAL: _token_t = 38;
pub const _token_t_ekTSTRING: _token_t = 39;
pub const _token_t_ekTIDENT: _token_t = 40;
pub const _token_t_ekTUNDEF: _token_t = 41;
pub const _token_t_ekTCORRUP: _token_t = 42;
pub const _token_t_ekTEOF: _token_t = 43;
pub const _token_t_ekTRESERVED: _token_t = 44;
pub type _token_t = ::libc::c_int;
pub use self::_token_t as ltoken_t;
pub const _dbindst_t_ekDBIND_OK: _dbindst_t = 0;
pub const _dbindst_t_ekDBIND_MEMBER_EXISTS: _dbindst_t = 1;
pub const _dbindst_t_ekDBIND_TYPE_EXISTS: _dbindst_t = 2;
pub const _dbindst_t_ekDBIND_TYPE_UNKNOWN: _dbindst_t = 3;
pub const _dbindst_t_ekDBIND_TYPE_USED: _dbindst_t = 4;
pub const _dbindst_t_ekDBIND_ALIAS_SIZE: _dbindst_t = 5;
pub type _dbindst_t = ::libc::c_int;
pub use self::_dbindst_t as dbindst_t;
pub type Buffer = _buffer_t;
pub type String = _string_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _stream_t {
    _unused: [u8; 0],
}
pub type Stream = _stream_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _array_t {
    _unused: [u8; 0],
}
pub type Array = _array_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _rbtree_t {
    _unused: [u8; 0],
}
pub type RBTree = _rbtree_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _regex {
    _unused: [u8; 0],
}
pub type RegEx = _regex;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _event_t {
    _unused: [u8; 0],
}
pub type Event = _event_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _keybuf_t {
    _unused: [u8; 0],
}
pub type KeyBuf = _keybuf_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _listener_t {
    _unused: [u8; 0],
}
pub type Listener = _listener_t;
pub type DirEntry = _direntry_t;
pub type EvFileDir = _evfiledir_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _respack {
    _unused: [u8; 0],
}
pub type ResPack = _respack;
pub type ResId = *const char_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _clock_t {
    _unused: [u8; 0],
}
pub type Clock = _clock_t;
pub type Object = _object_t;
pub type FPtr_remove = ::core::option::Option<unsafe extern "C" fn(obj: *mut ::libc::c_void)>;
pub type FPtr_event_handler =
    ::core::option::Option<unsafe extern "C" fn(obj: *mut ::libc::c_void, event: *mut Event)>;
pub type FPtr_read =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut Stream) -> *mut ::libc::c_void>;
pub type FPtr_read_init =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut Stream, obj: *mut ::libc::c_void)>;
pub type FPtr_write =
    ::core::option::Option<unsafe extern "C" fn(stream: *mut Stream, obj: *const ::libc::c_void)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _buffer_t {
    pub size: u32,
    pub data: [::libc::c_char; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _object_t {
    pub count: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _string_t {
    pub size: u32,
    pub data: [::libc::c_char; 512usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _direntry_t {
    pub name: *mut String,
    pub type_: file_type_t,
    pub size: u64,
    pub date: Date,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evfiledir_t {
    pub filename: *const char_t,
    pub pathname: *const char_t,
    pub depth: u32,
}
unsafe extern "C" {
    pub fn array_create(esize: u16, type_: *const char_t) -> *mut Array;
}
unsafe extern "C" {
    pub fn array_copy(
        array: *const Array,
        func_copy: FPtr_scopy,
        type_: *const char_t,
    ) -> *mut Array;
}
unsafe extern "C" {
    pub fn array_copy_ptr(
        array: *const Array,
        func_copy: FPtr_copy,
        type_: *const char_t,
    ) -> *mut Array;
}
unsafe extern "C" {
    pub fn array_read(
        stream: *mut Stream,
        esize: u16,
        func_read_init: FPtr_read_init,
        type_: *const char_t,
    ) -> *mut Array;
}
unsafe extern "C" {
    pub fn array_read_ptr(
        stream: *mut Stream,
        func_read: FPtr_read,
        type_: *const char_t,
    ) -> *mut Array;
}
unsafe extern "C" {
    pub fn array_destroy(array: *mut *mut Array, func_remove: FPtr_remove, type_: *const char_t);
}
unsafe extern "C" {
    pub fn array_destopt(array: *mut *mut Array, func_remove: FPtr_remove, type_: *const char_t);
}
unsafe extern "C" {
    pub fn array_destroy_ptr(
        array: *mut *mut Array,
        func_destroy: FPtr_destroy,
        type_: *const char_t,
    );
}
unsafe extern "C" {
    pub fn array_destopt_ptr(
        array: *mut *mut Array,
        func_destroy: FPtr_destroy,
        type_: *const char_t,
    );
}
unsafe extern "C" {
    pub fn array_clear(array: *mut Array, func_remove: FPtr_remove);
}
unsafe extern "C" {
    pub fn array_clear_ptr(array: *mut Array, func_destroy: FPtr_destroy);
}
unsafe extern "C" {
    pub fn array_write(stream: *mut Stream, array: *const Array, func_write: FPtr_write);
}
unsafe extern "C" {
    pub fn array_write_ptr(stream: *mut Stream, array: *const Array, func_write: FPtr_write);
}
unsafe extern "C" {
    pub fn array_size(array: *const Array) -> u32;
}
unsafe extern "C" {
    pub fn array_esize(array: *const Array) -> u32;
}
unsafe extern "C" {
    pub fn array_get(array: *const Array, pos: u32) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_get_last(array: *const Array) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_all(array: *const Array) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_insert(array: *mut Array, pos: u32, n: u32) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_insert0(array: *mut Array, pos: u32, n: u32) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_join(dest: *mut Array, src: *const Array, func_copy: FPtr_scopy);
}
unsafe extern "C" {
    pub fn array_join_ptr(dest: *mut Array, src: *const Array, func_copy: FPtr_copy);
}
unsafe extern "C" {
    pub fn array_delete(array: *mut Array, pos: u32, n: u32, func_remove: FPtr_remove);
}
unsafe extern "C" {
    pub fn array_delete_ptr(array: *mut Array, pos: u32, n: u32, func_destroy: FPtr_destroy);
}
unsafe extern "C" {
    pub fn array_pop(array: *mut Array, func_remove: FPtr_remove);
}
unsafe extern "C" {
    pub fn array_pop_ptr(array: *mut Array, func_destroy: FPtr_destroy);
}
unsafe extern "C" {
    pub fn array_sort(array: *mut Array, func_compare: FPtr_compare);
}
unsafe extern "C" {
    pub fn array_sort_ex(
        array: *mut Array,
        func_compare: FPtr_compare_ex,
        data: *mut ::libc::c_void,
    );
}
unsafe extern "C" {
    pub fn array_sort_ptr(array: *mut Array, func_compare: FPtr_compare);
}
unsafe extern "C" {
    pub fn array_sort_ptr_ex(
        array: *mut Array,
        func_compare: FPtr_compare_ex,
        data: *mut ::libc::c_void,
    );
}
unsafe extern "C" {
    pub fn array_find_ptr(array: *const Array, elem: *const ::libc::c_void) -> u32;
}
unsafe extern "C" {
    pub fn array_search(
        array: *const Array,
        func_compare: FPtr_compare,
        key: *const ::libc::c_void,
        pos: *mut u32,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_search_ptr(
        array: *const Array,
        func_compare: FPtr_compare,
        key: *const ::libc::c_void,
        pos: *mut u32,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_bsearch(
        array: *const Array,
        func_compare: FPtr_compare,
        key: *const ::libc::c_void,
        pos: *mut u32,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn array_bsearch_ptr(
        array: *const Array,
        func_compare: FPtr_compare,
        key: *const ::libc::c_void,
        pos: *mut u32,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_create(
        func_compare: FPtr_compare,
        esize: u16,
        ksize: u16,
        type_: *const char_t,
        ktype: *const char_t,
    ) -> *mut RBTree;
}
unsafe extern "C" {
    pub fn rbtree_destroy(
        tree: *mut *mut RBTree,
        func_remove: FPtr_remove,
        func_destroy_key: FPtr_destroy,
        type_: *const char_t,
    );
}
unsafe extern "C" {
    pub fn rbtree_destroy_ptr(
        tree: *mut *mut RBTree,
        func_destroy: FPtr_destroy,
        func_destroy_key: FPtr_destroy,
        type_: *const char_t,
    );
}
unsafe extern "C" {
    pub fn rbtree_size(tree: *const RBTree) -> u32;
}
unsafe extern "C" {
    pub fn rbtree_get(
        tree: *const RBTree,
        key: *const ::libc::c_void,
        isptr: bool_t,
        ktype: *const char_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_insert(
        tree: *mut RBTree,
        key: *const ::libc::c_void,
        func_key_copy: FPtr_copy,
        ktype: *const char_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_insert_ptr(
        tree: *mut RBTree,
        key: *const ::libc::c_void,
        ptr: *mut ::libc::c_void,
        ktype: *const char_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn rbtree_delete(
        tree: *mut RBTree,
        key: *const ::libc::c_void,
        func_remove: FPtr_remove,
        func_destroy_key: FPtr_destroy,
        ktype: *const char_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn rbtree_delete_ptr(
        tree: *mut RBTree,
        key: *const ::libc::c_void,
        func_destroy: FPtr_destroy,
        func_destroy_key: FPtr_destroy,
        ktype: *const char_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn rbtree_first(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_last(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_next(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_prev(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_first_ptr(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_last_ptr(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_next_ptr(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_prev_ptr(tree: *mut RBTree) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn rbtree_get_key(tree: *const RBTree) -> *const char_t;
}
unsafe extern "C" {
    pub fn rbtree_check(tree: *const RBTree) -> bool_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct bool_tData {
    pub elem: [bool_t; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStbool_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut bool_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStbool_t {
    pub rb: u32,
    pub left: *mut NodeStbool_t,
    pub right: *mut NodeStbool_t,
    pub data: bool_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStbool_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStbool_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendbool_t_t {
    _unused: [u8; 0],
}
pub type arrstendbool_t = _arrstendbool_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendbool_t_t {
    _unused: [u8; 0],
}
pub type setstendbool_t = _setstendbool_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int8_tData {
    pub elem: [i8; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStint8_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut int8_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStint8_t {
    pub rb: u32,
    pub left: *mut NodeStint8_t,
    pub right: *mut NodeStint8_t,
    pub data: i8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStint8_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStint8_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendint8_t_t {
    _unused: [u8; 0],
}
pub type arrstendint8_t = _arrstendint8_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendint8_t_t {
    _unused: [u8; 0],
}
pub type setstendint8_t = _setstendint8_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int16_tData {
    pub elem: [i16; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStint16_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut int16_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStint16_t {
    pub rb: u32,
    pub left: *mut NodeStint16_t,
    pub right: *mut NodeStint16_t,
    pub data: i16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStint16_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStint16_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendint16_t_t {
    _unused: [u8; 0],
}
pub type arrstendint16_t = _arrstendint16_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendint16_t_t {
    _unused: [u8; 0],
}
pub type setstendint16_t = _setstendint16_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int32_tData {
    pub elem: [i32; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStint32_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut int32_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStint32_t {
    pub rb: u32,
    pub left: *mut NodeStint32_t,
    pub right: *mut NodeStint32_t,
    pub data: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStint32_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStint32_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendint32_t_t {
    _unused: [u8; 0],
}
pub type arrstendint32_t = _arrstendint32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendint32_t_t {
    _unused: [u8; 0],
}
pub type setstendint32_t = _setstendint32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct int64_tData {
    pub elem: [i64; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStint64_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut int64_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStint64_t {
    pub rb: u32,
    pub left: *mut NodeStint64_t,
    pub right: *mut NodeStint64_t,
    pub data: i64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStint64_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStint64_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendint64_t_t {
    _unused: [u8; 0],
}
pub type arrstendint64_t = _arrstendint64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendint64_t_t {
    _unused: [u8; 0],
}
pub type setstendint64_t = _setstendint64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint8_tData {
    pub elem: [u8; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStuint8_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut uint8_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStuint8_t {
    pub rb: u32,
    pub left: *mut NodeStuint8_t,
    pub right: *mut NodeStuint8_t,
    pub data: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStuint8_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStuint8_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstenduint8_t_t {
    _unused: [u8; 0],
}
pub type arrstenduint8_t = _arrstenduint8_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstenduint8_t_t {
    _unused: [u8; 0],
}
pub type setstenduint8_t = _setstenduint8_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint16_tData {
    pub elem: [u16; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStuint16_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut uint16_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStuint16_t {
    pub rb: u32,
    pub left: *mut NodeStuint16_t,
    pub right: *mut NodeStuint16_t,
    pub data: u16,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStuint16_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStuint16_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstenduint16_t_t {
    _unused: [u8; 0],
}
pub type arrstenduint16_t = _arrstenduint16_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstenduint16_t_t {
    _unused: [u8; 0],
}
pub type setstenduint16_t = _setstenduint16_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint32_tData {
    pub elem: [u32; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStuint32_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut uint32_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStuint32_t {
    pub rb: u32,
    pub left: *mut NodeStuint32_t,
    pub right: *mut NodeStuint32_t,
    pub data: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStuint32_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStuint32_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstenduint32_t_t {
    _unused: [u8; 0],
}
pub type arrstenduint32_t = _arrstenduint32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstenduint32_t_t {
    _unused: [u8; 0],
}
pub type setstenduint32_t = _setstenduint32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct uint64_tData {
    pub elem: [u64; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStuint64_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut uint64_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStuint64_t {
    pub rb: u32,
    pub left: *mut NodeStuint64_t,
    pub right: *mut NodeStuint64_t,
    pub data: u64,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStuint64_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStuint64_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstenduint64_t_t {
    _unused: [u8; 0],
}
pub type arrstenduint64_t = _arrstenduint64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstenduint64_t_t {
    _unused: [u8; 0],
}
pub type setstenduint64_t = _setstenduint64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real32_tData {
    pub elem: [real32_t; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStreal32_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut real32_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStreal32_t {
    pub rb: u32,
    pub left: *mut NodeStreal32_t,
    pub right: *mut NodeStreal32_t,
    pub data: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStreal32_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStreal32_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendreal32_t_t {
    _unused: [u8; 0],
}
pub type arrstendreal32_t = _arrstendreal32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendreal32_t_t {
    _unused: [u8; 0],
}
pub type setstendreal32_t = _setstendreal32_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct real64_tData {
    pub elem: [real64_t; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStreal64_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut real64_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStreal64_t {
    pub rb: u32,
    pub left: *mut NodeStreal64_t,
    pub right: *mut NodeStreal64_t,
    pub data: real64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStreal64_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStreal64_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendreal64_t_t {
    _unused: [u8; 0],
}
pub type arrstendreal64_t = _arrstendreal64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendreal64_t_t {
    _unused: [u8; 0],
}
pub type setstendreal64_t = _setstendreal64_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct StringPtData {
    pub elem: [*mut String; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtString {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut StringPtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtString {
    pub rb: u32,
    pub left: *mut NodePtString,
    pub right: *mut NodePtString,
    pub data: *mut String,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtString {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtString,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendString_t {
    _unused: [u8; 0],
}
pub type arrptendString = _arrptendString_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendString_t {
    _unused: [u8; 0],
}
pub type setptendString = _setptendString_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DirEntryData {
    pub elem: [DirEntry; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStDirEntry {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut DirEntryData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStDirEntry {
    pub rb: u32,
    pub left: *mut NodeStDirEntry,
    pub right: *mut NodeStDirEntry,
    pub data: DirEntry,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStDirEntry {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStDirEntry,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendDirEntry_t {
    _unused: [u8; 0],
}
pub type arrstendDirEntry = _arrstendDirEntry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendDirEntry_t {
    _unused: [u8; 0],
}
pub type setstendDirEntry = _setstendDirEntry_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResPackPtData {
    pub elem: [*mut ResPack; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtResPack {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut ResPackPtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtResPack {
    pub rb: u32,
    pub left: *mut NodePtResPack,
    pub right: *mut NodePtResPack,
    pub data: *mut ResPack,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtResPack {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtResPack,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendResPack_t {
    _unused: [u8; 0],
}
pub type arrptendResPack = _arrptendResPack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendResPack_t {
    _unused: [u8; 0],
}
pub type setptendResPack = _setptendResPack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RegExPtData {
    pub elem: [*mut RegEx; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtRegEx {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut RegExPtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtRegEx {
    pub rb: u32,
    pub left: *mut NodePtRegEx,
    pub right: *mut NodePtRegEx,
    pub data: *mut RegEx,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtRegEx {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtRegEx,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendRegEx_t {
    _unused: [u8; 0],
}
pub type arrptendRegEx = _arrptendRegEx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendRegEx_t {
    _unused: [u8; 0],
}
pub type setptendRegEx = _setptendRegEx_t;
pub type V2Df = _v2df_t;
pub type V2Dd = _v2dd_t;
pub type S2Df = _s2df_t;
pub type S2Dd = _s2dd_t;
pub type R2Df = _r2df_t;
pub type R2Dd = _r2dd_t;
pub type T2Df = _t2df_t;
pub type T2Dd = _t2dd_t;
pub type Seg2Df = _seg2df_t;
pub type Seg2Dd = _seg2dd_t;
pub type Cir2Df = _cir2df_t;
pub type Cir2Dd = _cir2dd_t;
pub type Box2Df = _box2df_t;
pub type Box2Dd = _box2dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _obb2df_t {
    _unused: [u8; 0],
}
pub type OBB2Df = _obb2df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _obb2dd_t {
    _unused: [u8; 0],
}
pub type OBB2Dd = _obb2dd_t;
pub type Tri2Df = _tri2df_t;
pub type Tri2Dd = _tri2dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pol2df_t {
    _unused: [u8; 0],
}
pub type Pol2Df = _pol2df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pol2dd_t {
    _unused: [u8; 0],
}
pub type Pol2Dd = _pol2dd_t;
pub type Col2Df = _col2df_t;
pub type Col2Dd = _col2dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _v2df_t {
    pub x: real32_t,
    pub y: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _v2dd_t {
    pub x: real64_t,
    pub y: real64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _s2df_t {
    pub width: real32_t,
    pub height: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _s2dd_t {
    pub width: real64_t,
    pub height: real64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _r2df_t {
    pub pos: V2Df,
    pub size: S2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _r2dd_t {
    pub pos: V2Dd,
    pub size: S2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _t2df_t {
    pub i: V2Df,
    pub j: V2Df,
    pub p: V2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _t2dd_t {
    pub i: V2Dd,
    pub j: V2Dd,
    pub p: V2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _seg2df_t {
    pub p0: V2Df,
    pub p1: V2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _seg2dd_t {
    pub p0: V2Dd,
    pub p1: V2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cir2df_t {
    pub c: V2Df,
    pub r: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cir2dd_t {
    pub c: V2Dd,
    pub r: real64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _box2df_t {
    pub min: V2Df,
    pub max: V2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _box2dd_t {
    pub min: V2Dd,
    pub max: V2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tri2df_t {
    pub p0: V2Df,
    pub p1: V2Df,
    pub p2: V2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tri2dd_t {
    pub p0: V2Dd,
    pub p1: V2Dd,
    pub p2: V2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _col2df_t {
    pub p: V2Df,
    pub n: V2Df,
    pub d: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _col2dd_t {
    pub p: V2Dd,
    pub n: V2Dd,
    pub d: real64_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct V2DfData {
    pub elem: [V2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStV2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut V2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStV2Df {
    pub rb: u32,
    pub left: *mut NodeStV2Df,
    pub right: *mut NodeStV2Df,
    pub data: V2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStV2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStV2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendV2Df_t {
    _unused: [u8; 0],
}
pub type arrstendV2Df = _arrstendV2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendV2Df_t {
    _unused: [u8; 0],
}
pub type setstendV2Df = _setstendV2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct V2DdData {
    pub elem: [V2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStV2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut V2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStV2Dd {
    pub rb: u32,
    pub left: *mut NodeStV2Dd,
    pub right: *mut NodeStV2Dd,
    pub data: V2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStV2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStV2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendV2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendV2Dd = _arrstendV2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendV2Dd_t {
    _unused: [u8; 0],
}
pub type setstendV2Dd = _setstendV2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S2DfData {
    pub elem: [S2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStS2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut S2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStS2Df {
    pub rb: u32,
    pub left: *mut NodeStS2Df,
    pub right: *mut NodeStS2Df,
    pub data: S2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStS2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStS2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendS2Df_t {
    _unused: [u8; 0],
}
pub type arrstendS2Df = _arrstendS2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendS2Df_t {
    _unused: [u8; 0],
}
pub type setstendS2Df = _setstendS2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S2DdData {
    pub elem: [S2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStS2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut S2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStS2Dd {
    pub rb: u32,
    pub left: *mut NodeStS2Dd,
    pub right: *mut NodeStS2Dd,
    pub data: S2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStS2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStS2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendS2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendS2Dd = _arrstendS2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendS2Dd_t {
    _unused: [u8; 0],
}
pub type setstendS2Dd = _setstendS2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R2DfData {
    pub elem: [R2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStR2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut R2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStR2Df {
    pub rb: u32,
    pub left: *mut NodeStR2Df,
    pub right: *mut NodeStR2Df,
    pub data: R2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStR2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStR2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendR2Df_t {
    _unused: [u8; 0],
}
pub type arrstendR2Df = _arrstendR2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendR2Df_t {
    _unused: [u8; 0],
}
pub type setstendR2Df = _setstendR2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct R2DdData {
    pub elem: [R2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStR2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut R2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStR2Dd {
    pub rb: u32,
    pub left: *mut NodeStR2Dd,
    pub right: *mut NodeStR2Dd,
    pub data: R2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStR2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStR2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendR2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendR2Dd = _arrstendR2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendR2Dd_t {
    _unused: [u8; 0],
}
pub type setstendR2Dd = _setstendR2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2DfData {
    pub elem: [T2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStT2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut T2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStT2Df {
    pub rb: u32,
    pub left: *mut NodeStT2Df,
    pub right: *mut NodeStT2Df,
    pub data: T2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStT2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStT2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendT2Df_t {
    _unused: [u8; 0],
}
pub type arrstendT2Df = _arrstendT2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendT2Df_t {
    _unused: [u8; 0],
}
pub type setstendT2Df = _setstendT2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct T2DdData {
    pub elem: [T2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStT2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut T2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStT2Dd {
    pub rb: u32,
    pub left: *mut NodeStT2Dd,
    pub right: *mut NodeStT2Dd,
    pub data: T2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStT2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStT2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendT2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendT2Dd = _arrstendT2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendT2Dd_t {
    _unused: [u8; 0],
}
pub type setstendT2Dd = _setstendT2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Seg2DfData {
    pub elem: [Seg2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStSeg2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Seg2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStSeg2Df {
    pub rb: u32,
    pub left: *mut NodeStSeg2Df,
    pub right: *mut NodeStSeg2Df,
    pub data: Seg2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStSeg2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStSeg2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendSeg2Df_t {
    _unused: [u8; 0],
}
pub type arrstendSeg2Df = _arrstendSeg2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendSeg2Df_t {
    _unused: [u8; 0],
}
pub type setstendSeg2Df = _setstendSeg2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Seg2DdData {
    pub elem: [Seg2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStSeg2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Seg2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStSeg2Dd {
    pub rb: u32,
    pub left: *mut NodeStSeg2Dd,
    pub right: *mut NodeStSeg2Dd,
    pub data: Seg2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStSeg2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStSeg2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendSeg2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendSeg2Dd = _arrstendSeg2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendSeg2Dd_t {
    _unused: [u8; 0],
}
pub type setstendSeg2Dd = _setstendSeg2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cir2DfData {
    pub elem: [Cir2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStCir2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Cir2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStCir2Df {
    pub rb: u32,
    pub left: *mut NodeStCir2Df,
    pub right: *mut NodeStCir2Df,
    pub data: Cir2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStCir2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStCir2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendCir2Df_t {
    _unused: [u8; 0],
}
pub type arrstendCir2Df = _arrstendCir2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendCir2Df_t {
    _unused: [u8; 0],
}
pub type setstendCir2Df = _setstendCir2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cir2DdData {
    pub elem: [Cir2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStCir2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Cir2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStCir2Dd {
    pub rb: u32,
    pub left: *mut NodeStCir2Dd,
    pub right: *mut NodeStCir2Dd,
    pub data: Cir2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStCir2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStCir2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendCir2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendCir2Dd = _arrstendCir2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendCir2Dd_t {
    _unused: [u8; 0],
}
pub type setstendCir2Dd = _setstendCir2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Box2DfData {
    pub elem: [Box2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStBox2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Box2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStBox2Df {
    pub rb: u32,
    pub left: *mut NodeStBox2Df,
    pub right: *mut NodeStBox2Df,
    pub data: Box2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStBox2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStBox2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendBox2Df_t {
    _unused: [u8; 0],
}
pub type arrstendBox2Df = _arrstendBox2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendBox2Df_t {
    _unused: [u8; 0],
}
pub type setstendBox2Df = _setstendBox2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Box2DdData {
    pub elem: [Box2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStBox2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Box2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStBox2Dd {
    pub rb: u32,
    pub left: *mut NodeStBox2Dd,
    pub right: *mut NodeStBox2Dd,
    pub data: Box2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStBox2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStBox2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendBox2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendBox2Dd = _arrstendBox2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendBox2Dd_t {
    _unused: [u8; 0],
}
pub type setstendBox2Dd = _setstendBox2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tri2DfData {
    pub elem: [Tri2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStTri2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Tri2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStTri2Df {
    pub rb: u32,
    pub left: *mut NodeStTri2Df,
    pub right: *mut NodeStTri2Df,
    pub data: Tri2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStTri2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStTri2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendTri2Df_t {
    _unused: [u8; 0],
}
pub type arrstendTri2Df = _arrstendTri2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendTri2Df_t {
    _unused: [u8; 0],
}
pub type setstendTri2Df = _setstendTri2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Tri2DdData {
    pub elem: [Tri2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStTri2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Tri2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStTri2Dd {
    pub rb: u32,
    pub left: *mut NodeStTri2Dd,
    pub right: *mut NodeStTri2Dd,
    pub data: Tri2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStTri2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStTri2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendTri2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendTri2Dd = _arrstendTri2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendTri2Dd_t {
    _unused: [u8; 0],
}
pub type setstendTri2Dd = _setstendTri2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pol2DfPtData {
    pub elem: [*mut Pol2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtPol2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Pol2DfPtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtPol2Df {
    pub rb: u32,
    pub left: *mut NodePtPol2Df,
    pub right: *mut NodePtPol2Df,
    pub data: *mut Pol2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtPol2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtPol2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendPol2Df_t {
    _unused: [u8; 0],
}
pub type arrptendPol2Df = _arrptendPol2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendPol2Df_t {
    _unused: [u8; 0],
}
pub type setptendPol2Df = _setptendPol2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Pol2DdPtData {
    pub elem: [*mut Pol2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtPol2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Pol2DdPtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtPol2Dd {
    pub rb: u32,
    pub left: *mut NodePtPol2Dd,
    pub right: *mut NodePtPol2Dd,
    pub data: *mut Pol2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtPol2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtPol2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendPol2Dd_t {
    _unused: [u8; 0],
}
pub type arrptendPol2Dd = _arrptendPol2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendPol2Dd_t {
    _unused: [u8; 0],
}
pub type setptendPol2Dd = _setptendPol2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Col2DfData {
    pub elem: [Col2Df; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStCol2Df {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Col2DfData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStCol2Df {
    pub rb: u32,
    pub left: *mut NodeStCol2Df,
    pub right: *mut NodeStCol2Df,
    pub data: Col2Df,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStCol2Df {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStCol2Df,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendCol2Df_t {
    _unused: [u8; 0],
}
pub type arrstendCol2Df = _arrstendCol2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendCol2Df_t {
    _unused: [u8; 0],
}
pub type setstendCol2Df = _setstendCol2Df_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Col2DdData {
    pub elem: [Col2Dd; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStCol2Dd {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut Col2DdData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStCol2Dd {
    pub rb: u32,
    pub left: *mut NodeStCol2Dd,
    pub right: *mut NodeStCol2Dd,
    pub data: Col2Dd,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStCol2Dd {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStCol2Dd,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendCol2Dd_t {
    _unused: [u8; 0],
}
pub type arrstendCol2Dd = _arrstendCol2Dd_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendCol2Dd_t {
    _unused: [u8; 0],
}
pub type setstendCol2Dd = _setstendCol2Dd_t;
pub const _pixformat_t_ekINDEX1: _pixformat_t = 0;
pub const _pixformat_t_ekINDEX2: _pixformat_t = 1;
pub const _pixformat_t_ekINDEX4: _pixformat_t = 2;
pub const _pixformat_t_ekINDEX8: _pixformat_t = 3;
pub const _pixformat_t_ekGRAY8: _pixformat_t = 4;
pub const _pixformat_t_ekRGB24: _pixformat_t = 5;
pub const _pixformat_t_ekRGBA32: _pixformat_t = 6;
pub const _pixformat_t_ekFIMAGE: _pixformat_t = 7;
pub type _pixformat_t = ::libc::c_int;
pub use self::_pixformat_t as pixformat_t;
pub const _codec_t_ekJPG: _codec_t = 1;
pub const _codec_t_ekPNG: _codec_t = 2;
pub const _codec_t_ekBMP: _codec_t = 3;
pub const _codec_t_ekGIF: _codec_t = 4;
pub type _codec_t = ::libc::c_int;
pub use self::_codec_t as codec_t;
pub const _fstyle_t_ekFNORMAL: _fstyle_t = 0;
pub const _fstyle_t_ekFBOLD: _fstyle_t = 1;
pub const _fstyle_t_ekFITALIC: _fstyle_t = 2;
pub const _fstyle_t_ekFSTRIKEOUT: _fstyle_t = 4;
pub const _fstyle_t_ekFUNDERLINE: _fstyle_t = 8;
pub const _fstyle_t_ekFSUBSCRIPT: _fstyle_t = 16;
pub const _fstyle_t_ekFSUPSCRIPT: _fstyle_t = 32;
pub const _fstyle_t_ekFPIXELS: _fstyle_t = 0;
pub const _fstyle_t_ekFPOINTS: _fstyle_t = 64;
pub const _fstyle_t_ekFCELL: _fstyle_t = 128;
pub type _fstyle_t = ::libc::c_int;
pub use self::_fstyle_t as fstyle_t;
pub const _linecap_t_ekLCFLAT: _linecap_t = 0;
pub const _linecap_t_ekLCSQUARE: _linecap_t = 1;
pub const _linecap_t_ekLCROUND: _linecap_t = 2;
pub type _linecap_t = ::libc::c_int;
pub use self::_linecap_t as linecap_t;
pub const _linejoin_t_ekLJMITER: _linejoin_t = 0;
pub const _linejoin_t_ekLJROUND: _linejoin_t = 1;
pub const _linejoin_t_ekLJBEVEL: _linejoin_t = 2;
pub type _linejoin_t = ::libc::c_int;
pub use self::_linejoin_t as linejoin_t;
pub const _fillwrap_t_ekFCLAMP: _fillwrap_t = 0;
pub const _fillwrap_t_ekFTILE: _fillwrap_t = 1;
pub const _fillwrap_t_ekFFLIP: _fillwrap_t = 2;
pub type _fillwrap_t = ::libc::c_int;
pub use self::_fillwrap_t as fillwrap_t;
pub const _drawop_t_ekSTROKE: _drawop_t = 1;
pub const _drawop_t_ekFILL: _drawop_t = 2;
pub const _drawop_t_ekSKFILL: _drawop_t = 3;
pub const _drawop_t_ekFILLSK: _drawop_t = 4;
pub type _drawop_t = ::libc::c_int;
pub use self::_drawop_t as drawop_t;
pub const _align_t_ekLEFT: _align_t = 1;
pub const _align_t_ekTOP: _align_t = 1;
pub const _align_t_ekCENTER: _align_t = 2;
pub const _align_t_ekRIGHT: _align_t = 3;
pub const _align_t_ekBOTTOM: _align_t = 3;
pub const _align_t_ekJUSTIFY: _align_t = 4;
pub type _align_t = ::libc::c_int;
pub use self::_align_t as align_t;
pub const _ellipsis_t_ekELLIPNONE: _ellipsis_t = 1;
pub const _ellipsis_t_ekELLIPBEGIN: _ellipsis_t = 2;
pub const _ellipsis_t_ekELLIPMIDDLE: _ellipsis_t = 3;
pub const _ellipsis_t_ekELLIPEND: _ellipsis_t = 4;
pub const _ellipsis_t_ekELLIPMLINE: _ellipsis_t = 5;
pub type _ellipsis_t = ::libc::c_int;
pub use self::_ellipsis_t as ellipsis_t;
pub const _indicator_t_ekINDNONE: _indicator_t = 0;
pub const _indicator_t_ekINDUP_ARROW: _indicator_t = 1;
pub const _indicator_t_ekINDDOWN_ARROW: _indicator_t = 2;
pub type _indicator_t = ::libc::c_int;
pub use self::_indicator_t as indicator_t;
pub type color_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _dctx_t {
    _unused: [u8; 0],
}
pub type DCtx = _dctx_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _palette_t {
    _unused: [u8; 0],
}
pub type Palette = _palette_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _pixbuf_t {
    _unused: [u8; 0],
}
pub type Pixbuf = _pixbuf_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _image_t {
    _unused: [u8; 0],
}
pub type Image = _image_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _font_t {
    _unused: [u8; 0],
}
pub type Font = _font_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct color_tData {
    pub elem: [color_t; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStcolor_t {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut color_tData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStcolor_t {
    pub rb: u32,
    pub left: *mut NodeStcolor_t,
    pub right: *mut NodeStcolor_t,
    pub data: color_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStcolor_t {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStcolor_t,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendcolor_t_t {
    _unused: [u8; 0],
}
pub type arrstendcolor_t = _arrstendcolor_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendcolor_t_t {
    _unused: [u8; 0],
}
pub type setstendcolor_t = _setstendcolor_t_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImagePtData {
    pub elem: [*mut Image; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrPtImage {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut ImagePtData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodePtImage {
    pub rb: u32,
    pub left: *mut NodePtImage,
    pub right: *mut NodePtImage,
    pub data: *mut Image,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetPtImage {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodePtImage,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrptendImage_t {
    _unused: [u8; 0],
}
pub type arrptendImage = _arrptendImage_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setptendImage_t {
    _unused: [u8; 0],
}
pub type setptendImage = _setptendImage_t;
pub const _gui_orient_t_ekGUI_HORIZONTAL: _gui_orient_t = 1;
pub const _gui_orient_t_ekGUI_VERTICAL: _gui_orient_t = 2;
pub type _gui_orient_t = ::libc::c_int;
pub use self::_gui_orient_t as gui_orient_t;
pub const _gui_state_t_ekGUI_OFF: _gui_state_t = 0;
pub const _gui_state_t_ekGUI_ON: _gui_state_t = 1;
pub const _gui_state_t_ekGUI_MIXED: _gui_state_t = 2;
pub type _gui_state_t = ::libc::c_int;
pub use self::_gui_state_t as gui_state_t;
pub const _gui_mouse_t_ekGUI_MOUSE_LEFT: _gui_mouse_t = 1;
pub const _gui_mouse_t_ekGUI_MOUSE_RIGHT: _gui_mouse_t = 2;
pub const _gui_mouse_t_ekGUI_MOUSE_MIDDLE: _gui_mouse_t = 3;
pub type _gui_mouse_t = ::libc::c_int;
pub use self::_gui_mouse_t as gui_mouse_t;
pub const _gui_cursor_t_ekGUI_CURSOR_ARROW: _gui_cursor_t = 1;
pub const _gui_cursor_t_ekGUI_CURSOR_HAND: _gui_cursor_t = 2;
pub const _gui_cursor_t_ekGUI_CURSOR_IBEAM: _gui_cursor_t = 3;
pub const _gui_cursor_t_ekGUI_CURSOR_CROSS: _gui_cursor_t = 4;
pub const _gui_cursor_t_ekGUI_CURSOR_SIZEWE: _gui_cursor_t = 5;
pub const _gui_cursor_t_ekGUI_CURSOR_SIZENS: _gui_cursor_t = 6;
pub const _gui_cursor_t_ekGUI_CURSOR_USER: _gui_cursor_t = 7;
pub type _gui_cursor_t = ::libc::c_int;
pub use self::_gui_cursor_t as gui_cursor_t;
pub const _gui_close_t_ekGUI_CLOSE_ESC: _gui_close_t = 1;
pub const _gui_close_t_ekGUI_CLOSE_INTRO: _gui_close_t = 2;
pub const _gui_close_t_ekGUI_CLOSE_BUTTON: _gui_close_t = 3;
pub const _gui_close_t_ekGUI_CLOSE_DEACT: _gui_close_t = 4;
pub type _gui_close_t = ::libc::c_int;
pub use self::_gui_close_t as gui_close_t;
pub const _gui_scale_t_ekGUI_SCALE_NONE: _gui_scale_t = 1;
pub const _gui_scale_t_ekGUI_SCALE_AUTO: _gui_scale_t = 2;
pub const _gui_scale_t_ekGUI_SCALE_ASPECT: _gui_scale_t = 3;
pub const _gui_scale_t_ekGUI_SCALE_ASPECTDW: _gui_scale_t = 4;
pub const _gui_scale_t_ekGUI_SCALE_ADJUST: _gui_scale_t = 5;
pub type _gui_scale_t = ::libc::c_int;
pub use self::_gui_scale_t as gui_scale_t;
pub const _gui_scroll_t_ekGUI_SCROLL_BEGIN: _gui_scroll_t = 1;
pub const _gui_scroll_t_ekGUI_SCROLL_END: _gui_scroll_t = 2;
pub const _gui_scroll_t_ekGUI_SCROLL_STEP_LEFT: _gui_scroll_t = 3;
pub const _gui_scroll_t_ekGUI_SCROLL_STEP_RIGHT: _gui_scroll_t = 4;
pub const _gui_scroll_t_ekGUI_SCROLL_PAGE_LEFT: _gui_scroll_t = 5;
pub const _gui_scroll_t_ekGUI_SCROLL_PAGE_RIGHT: _gui_scroll_t = 6;
pub const _gui_scroll_t_ekGUI_SCROLL_THUMB: _gui_scroll_t = 7;
pub type _gui_scroll_t = ::libc::c_int;
pub use self::_gui_scroll_t as gui_scroll_t;
pub const _gui_focus_t_ekGUI_FOCUS_CHANGED: _gui_focus_t = 1;
pub const _gui_focus_t_ekGUI_FOCUS_KEEP: _gui_focus_t = 2;
pub const _gui_focus_t_ekGUI_FOCUS_NO_NEXT: _gui_focus_t = 3;
pub const _gui_focus_t_ekGUI_FOCUS_NO_RESIGN: _gui_focus_t = 4;
pub const _gui_focus_t_ekGUI_FOCUS_NO_ACCEPT: _gui_focus_t = 5;
pub type _gui_focus_t = ::libc::c_int;
pub use self::_gui_focus_t as gui_focus_t;
pub const _gui_tab_t_ekGUI_TAB_KEY: _gui_tab_t = 1;
pub const _gui_tab_t_ekGUI_TAB_BACKKEY: _gui_tab_t = 2;
pub const _gui_tab_t_ekGUI_TAB_NEXT: _gui_tab_t = 3;
pub const _gui_tab_t_ekGUI_TAB_PREV: _gui_tab_t = 4;
pub const _gui_tab_t_ekGUI_TAB_MOVE: _gui_tab_t = 5;
pub const _gui_tab_t_ekGUI_TAB_CLICK: _gui_tab_t = 6;
pub type _gui_tab_t = ::libc::c_int;
pub use self::_gui_tab_t as gui_tab_t;
pub const _gui_event_t_ekGUI_EVENT_LABEL: _gui_event_t = 1024;
pub const _gui_event_t_ekGUI_EVENT_BUTTON: _gui_event_t = 1025;
pub const _gui_event_t_ekGUI_EVENT_POPUP: _gui_event_t = 1026;
pub const _gui_event_t_ekGUI_EVENT_LISTBOX: _gui_event_t = 1027;
pub const _gui_event_t_ekGUI_EVENT_SLIDER: _gui_event_t = 1028;
pub const _gui_event_t_ekGUI_EVENT_UPDOWN: _gui_event_t = 1029;
pub const _gui_event_t_ekGUI_EVENT_TXTFILTER: _gui_event_t = 1030;
pub const _gui_event_t_ekGUI_EVENT_TXTCHANGE: _gui_event_t = 1031;
pub const _gui_event_t_ekGUI_EVENT_FOCUS_RESIGN: _gui_event_t = 1032;
pub const _gui_event_t_ekGUI_EVENT_FOCUS_ACCEPT: _gui_event_t = 1033;
pub const _gui_event_t_ekGUI_EVENT_FOCUS: _gui_event_t = 1034;
pub const _gui_event_t_ekGUI_EVENT_MENU: _gui_event_t = 1035;
pub const _gui_event_t_ekGUI_EVENT_DRAW: _gui_event_t = 1036;
pub const _gui_event_t_ekGUI_EVENT_OVERLAY: _gui_event_t = 1037;
pub const _gui_event_t_ekGUI_EVENT_RESIZE: _gui_event_t = 1038;
pub const _gui_event_t_ekGUI_EVENT_ENTER: _gui_event_t = 1039;
pub const _gui_event_t_ekGUI_EVENT_EXIT: _gui_event_t = 1040;
pub const _gui_event_t_ekGUI_EVENT_MOVED: _gui_event_t = 1041;
pub const _gui_event_t_ekGUI_EVENT_DOWN: _gui_event_t = 1042;
pub const _gui_event_t_ekGUI_EVENT_UP: _gui_event_t = 1043;
pub const _gui_event_t_ekGUI_EVENT_CLICK: _gui_event_t = 1044;
pub const _gui_event_t_ekGUI_EVENT_DRAG: _gui_event_t = 1045;
pub const _gui_event_t_ekGUI_EVENT_WHEEL: _gui_event_t = 1046;
pub const _gui_event_t_ekGUI_EVENT_KEYDOWN: _gui_event_t = 1047;
pub const _gui_event_t_ekGUI_EVENT_KEYUP: _gui_event_t = 1048;
pub const _gui_event_t_ekGUI_EVENT_SCROLL: _gui_event_t = 1049;
pub const _gui_event_t_ekGUI_EVENT_WND_MOVED: _gui_event_t = 1050;
pub const _gui_event_t_ekGUI_EVENT_WND_SIZING: _gui_event_t = 1051;
pub const _gui_event_t_ekGUI_EVENT_WND_SIZE: _gui_event_t = 1052;
pub const _gui_event_t_ekGUI_EVENT_WND_CLOSE: _gui_event_t = 1053;
pub const _gui_event_t_ekGUI_EVENT_COLOR: _gui_event_t = 1054;
pub const _gui_event_t_ekGUI_EVENT_THEME: _gui_event_t = 1055;
pub const _gui_event_t_ekGUI_EVENT_OBJCHANGE: _gui_event_t = 1056;
pub const _gui_event_t_ekGUI_EVENT_TBL_NROWS: _gui_event_t = 1057;
pub const _gui_event_t_ekGUI_EVENT_TBL_BEGIN: _gui_event_t = 1058;
pub const _gui_event_t_ekGUI_EVENT_TBL_END: _gui_event_t = 1059;
pub const _gui_event_t_ekGUI_EVENT_TBL_CELL: _gui_event_t = 1060;
pub const _gui_event_t_ekGUI_EVENT_TBL_SEL: _gui_event_t = 1061;
pub const _gui_event_t_ekGUI_EVENT_TBL_HEADCLICK: _gui_event_t = 1062;
pub const _gui_event_t_ekGUI_EVENT_TBL_ROWCLICK: _gui_event_t = 1063;
pub const _gui_event_t_ekGUI_EVENT_IDLE: _gui_event_t = 1064;
pub type _gui_event_t = ::libc::c_int;
pub use self::_gui_event_t as gui_event_t;
pub const _gui_type_t_ekGUI_TYPE_LABEL: _gui_type_t = 0;
pub const _gui_type_t_ekGUI_TYPE_BUTTON: _gui_type_t = 1;
pub const _gui_type_t_ekGUI_TYPE_POPUP: _gui_type_t = 2;
pub const _gui_type_t_ekGUI_TYPE_EDITBOX: _gui_type_t = 3;
pub const _gui_type_t_ekGUI_TYPE_COMBOBOX: _gui_type_t = 4;
pub const _gui_type_t_ekGUI_TYPE_SLIDER: _gui_type_t = 5;
pub const _gui_type_t_ekGUI_TYPE_UPDOWN: _gui_type_t = 6;
pub const _gui_type_t_ekGUI_TYPE_PROGRESS: _gui_type_t = 7;
pub const _gui_type_t_ekGUI_TYPE_TEXTVIEW: _gui_type_t = 8;
pub const _gui_type_t_ekGUI_TYPE_WEBVIEW: _gui_type_t = 9;
pub const _gui_type_t_ekGUI_TYPE_TREEVIEW: _gui_type_t = 10;
pub const _gui_type_t_ekGUI_TYPE_BOXVIEW: _gui_type_t = 11;
pub const _gui_type_t_ekGUI_TYPE_SPLITVIEW: _gui_type_t = 12;
pub const _gui_type_t_ekGUI_TYPE_CUSTOMVIEW: _gui_type_t = 13;
pub const _gui_type_t_ekGUI_TYPE_PANEL: _gui_type_t = 14;
pub const _gui_type_t_ekGUI_TYPE_LINE: _gui_type_t = 15;
pub const _gui_type_t_ekGUI_TYPE_HEADER: _gui_type_t = 16;
pub const _gui_type_t_ekGUI_TYPE_WINDOW: _gui_type_t = 17;
pub const _gui_type_t_ekGUI_TYPE_TOOLBAR: _gui_type_t = 18;
pub type _gui_type_t = ::libc::c_int;
pub use self::_gui_type_t as gui_type_t;
pub const _gui_size_t_ekGUI_SIZE_MINI: _gui_size_t = 1;
pub const _gui_size_t_ekGUI_SIZE_SMALL: _gui_size_t = 2;
pub const _gui_size_t_ekGUI_SIZE_REGULAR: _gui_size_t = 3;
pub type _gui_size_t = ::libc::c_int;
pub use self::_gui_size_t as gui_size_t;
pub const _gui_role_t_ekGUI_ROLE_MAIN: _gui_role_t = 0;
pub const _gui_role_t_ekGUI_ROLE_OVERLAY: _gui_role_t = 1;
pub const _gui_role_t_ekGUI_ROLE_MODAL: _gui_role_t = 2;
pub const _gui_role_t_ekGUI_ROLE_MANAGED: _gui_role_t = 3;
pub type _gui_role_t = ::libc::c_int;
pub use self::_gui_role_t as gui_role_t;
pub const _gui_prop_t_ekGUI_PROP_CHILDREN: _gui_prop_t = 0;
pub type _gui_prop_t = ::libc::c_int;
pub use self::_gui_prop_t as gui_prop_t;
pub const _gui_text_t_ekGUI_TEXT_FAMILY: _gui_text_t = 0;
pub const _gui_text_t_ekGUI_TEXT_UNITS: _gui_text_t = 1;
pub const _gui_text_t_ekGUI_TEXT_SIZE: _gui_text_t = 2;
pub const _gui_text_t_ekGUI_TEXT_STYLE: _gui_text_t = 3;
pub const _gui_text_t_ekGUI_TEXT_COLOR: _gui_text_t = 4;
pub const _gui_text_t_ekGUI_TEXT_BGCOLOR: _gui_text_t = 5;
pub const _gui_text_t_ekGUI_TEXT_PGCOLOR: _gui_text_t = 6;
pub const _gui_text_t_ekGUI_TEXT_PARALIGN: _gui_text_t = 7;
pub const _gui_text_t_ekGUI_TEXT_LSPACING: _gui_text_t = 8;
pub const _gui_text_t_ekGUI_TEXT_BFPARSPACE: _gui_text_t = 9;
pub const _gui_text_t_ekGUI_TEXT_AFPARSPACE: _gui_text_t = 10;
pub const _gui_text_t_ekGUI_TEXT_APPLY_ALL: _gui_text_t = 11;
pub const _gui_text_t_ekGUI_TEXT_APPLY_SEL: _gui_text_t = 12;
pub const _gui_text_t_ekGUI_TEXT_SELECT: _gui_text_t = 13;
pub const _gui_text_t_ekGUI_TEXT_SHOW_SELECT: _gui_text_t = 14;
pub const _gui_text_t_ekGUI_TEXT_SCROLL: _gui_text_t = 15;
pub const _gui_text_t_ekGUI_TEXT_WRAP_MODE: _gui_text_t = 16;
pub type _gui_text_t = ::libc::c_int;
pub use self::_gui_text_t as gui_text_t;
pub const _gui_web_t_ekGUI_WEB_NAVIGATE: _gui_web_t = 1;
pub const _gui_web_t_ekGUI_WEB_BACK: _gui_web_t = 2;
pub const _gui_web_t_ekGUI_WEB_FORWARD: _gui_web_t = 3;
pub type _gui_web_t = ::libc::c_int;
pub use self::_gui_web_t as gui_web_t;
pub const _clipboard_t_ekCLIPBOARD_COPY: _clipboard_t = 0;
pub const _clipboard_t_ekCLIPBOARD_CUT: _clipboard_t = 1;
pub const _clipboard_t_ekCLIPBOARD_PASTE: _clipboard_t = 2;
pub type _clipboard_t = ::libc::c_int;
pub use self::_clipboard_t as clipboard_t;
pub const _label_flag_t_ekLABEL_FLAG: _label_flag_t = 0;
pub const _label_flag_t_ekLABEL_SINGLE: _label_flag_t = 0;
pub const _label_flag_t_ekLABEL_MULTI: _label_flag_t = 1;
pub const _label_flag_t_ekLABEL_TYPE: _label_flag_t = 1;
pub type _label_flag_t = ::libc::c_int;
pub use self::_label_flag_t as label_flag_t;
pub const _button_flag_t_ekBUTTON_FLAG: _button_flag_t = 0;
pub const _button_flag_t_ekBUTTON_PUSH: _button_flag_t = 0;
pub const _button_flag_t_ekBUTTON_CHECK2: _button_flag_t = 1;
pub const _button_flag_t_ekBUTTON_CHECK3: _button_flag_t = 2;
pub const _button_flag_t_ekBUTTON_RADIO: _button_flag_t = 3;
pub const _button_flag_t_ekBUTTON_FLAT: _button_flag_t = 4;
pub const _button_flag_t_ekBUTTON_FLATGLE: _button_flag_t = 5;
pub const _button_flag_t_ekBUTTON_TYPE: _button_flag_t = 7;
pub type _button_flag_t = ::libc::c_int;
pub use self::_button_flag_t as button_flag_t;
pub const _popup_flag_t_ekPOPUP_FLAG: _popup_flag_t = 0;
pub type _popup_flag_t = ::libc::c_int;
pub use self::_popup_flag_t as popup_flag_t;
pub const _edit_flag_t_ekEDIT_FLAG: _edit_flag_t = 0;
pub const _edit_flag_t_ekEDIT_SINGLE: _edit_flag_t = 0;
pub const _edit_flag_t_ekEDIT_MULTI: _edit_flag_t = 1;
pub const _edit_flag_t_ekEDIT_TYPE: _edit_flag_t = 1;
pub const _edit_flag_t_ekEDIT_AUTOSEL: _edit_flag_t = 4;
pub type _edit_flag_t = ::libc::c_int;
pub use self::_edit_flag_t as edit_flag_t;
pub const _combo_flag_t_ekCOMBO_FLAG: _combo_flag_t = 0;
pub type _combo_flag_t = ::libc::c_int;
pub use self::_combo_flag_t as combo_flag_t;
pub const _slider_flag_t_ekSLIDER_FLAG: _slider_flag_t = 0;
pub const _slider_flag_t_ekSLIDER_HORZ: _slider_flag_t = 0;
pub const _slider_flag_t_ekSLIDER_VERT: _slider_flag_t = 1;
pub const _slider_flag_t_ekSLIDER_TYPE: _slider_flag_t = 1;
pub type _slider_flag_t = ::libc::c_int;
pub use self::_slider_flag_t as slider_flag_t;
pub const _updown_flag_t_ekUPDOWN_FLAG: _updown_flag_t = 0;
pub type _updown_flag_t = ::libc::c_int;
pub use self::_updown_flag_t as updown_flag_t;
pub const _progress_flag_t_ekPROGRESS_FLAG: _progress_flag_t = 0;
pub const _progress_flag_t_ekPROGRESS_HORZ: _progress_flag_t = 0;
pub const _progress_flag_t_ekPROGRESS_VERT: _progress_flag_t = 1;
pub const _progress_flag_t_ekPROGRESS_TYPE: _progress_flag_t = 1;
pub type _progress_flag_t = ::libc::c_int;
pub use self::_progress_flag_t as progress_flag_t;
pub const _view_flag_t_ekVIEW_OPENGL: _view_flag_t = 1;
pub const _view_flag_t_ekVIEW_HSCROLL: _view_flag_t = 2;
pub const _view_flag_t_ekVIEW_VSCROLL: _view_flag_t = 4;
pub const _view_flag_t_ekVIEW_BORDER: _view_flag_t = 8;
pub const _view_flag_t_ekVIEW_NOERASE: _view_flag_t = 32;
pub const _view_flag_t_ekVIEW_CONTROL: _view_flag_t = 64;
pub type _view_flag_t = ::libc::c_int;
pub use self::_view_flag_t as view_flag_t;
pub const _text_flag_t_ekTEXT_FLAG: _text_flag_t = 0;
pub type _text_flag_t = ::libc::c_int;
pub use self::_text_flag_t as text_flag_t;
pub const _table_flag_t_ekTABLE_FLAG: _table_flag_t = 0;
pub const _table_flag_t_ekTABLE_TEXT: _table_flag_t = 1;
pub const _table_flag_t_ekTABLE_ICON16: _table_flag_t = 2;
pub const _table_flag_t_ekTABLE_EDIT: _table_flag_t = 4;
pub const _table_flag_t_ekTABLE_COMBO: _table_flag_t = 8;
pub const _table_flag_t_ekTABLE_POPUP: _table_flag_t = 16;
pub const _table_flag_t_ekTABLE_RADIO: _table_flag_t = 32;
pub const _table_flag_t_ekTABLE_CHECK: _table_flag_t = 64;
pub const _table_flag_t_ekTABLE_TOOLTIP: _table_flag_t = 128;
pub const _table_flag_t_ekTABLE_BGCOLOR: _table_flag_t = 256;
pub const _table_flag_t_ekTABLE_ROWALT: _table_flag_t = 512;
pub const _table_flag_t_ekTABLE_ROWPRESEL: _table_flag_t = 1024;
pub type _table_flag_t = ::libc::c_int;
pub use self::_table_flag_t as table_flag_t;
pub const _split_flag_t_ekSPLIT_FLAG: _split_flag_t = 0;
pub const _split_flag_t_ekSPLIT_VERT: _split_flag_t = 0;
pub const _split_flag_t_ekSPLIT_HORZ: _split_flag_t = 1;
pub const _split_flag_t_ekSPLIT_TYPE: _split_flag_t = 1;
pub type _split_flag_t = ::libc::c_int;
pub use self::_split_flag_t as split_flag_t;
pub const _split_mode_t_ekSPLIT_NORMAL: _split_mode_t = 1;
pub const _split_mode_t_ekSPLIT_FIXED0: _split_mode_t = 2;
pub const _split_mode_t_ekSPLIT_FIXED1: _split_mode_t = 3;
pub type _split_mode_t = ::libc::c_int;
pub use self::_split_mode_t as split_mode_t;
pub const _window_flag_t_ekWINDOW_FLAG: _window_flag_t = 0;
pub const _window_flag_t_ekWINDOW_EDGE: _window_flag_t = 1;
pub const _window_flag_t_ekWINDOW_TITLE: _window_flag_t = 2;
pub const _window_flag_t_ekWINDOW_MAX: _window_flag_t = 4;
pub const _window_flag_t_ekWINDOW_MIN: _window_flag_t = 8;
pub const _window_flag_t_ekWINDOW_CLOSE: _window_flag_t = 16;
pub const _window_flag_t_ekWINDOW_RESIZE: _window_flag_t = 32;
pub const _window_flag_t_ekWINDOW_RETURN: _window_flag_t = 64;
pub const _window_flag_t_ekWINDOW_ESC: _window_flag_t = 128;
pub const _window_flag_t_ekWINDOW_OFFSCREEN: _window_flag_t = 256;
pub const _window_flag_t_ekWINDOW_MODAL_NOHIDE: _window_flag_t = 512;
pub const _window_flag_t_ekWINDOW_STD: _window_flag_t = 26;
pub const _window_flag_t_ekWINDOW_STDRES: _window_flag_t = 62;
pub type _window_flag_t = ::libc::c_int;
pub use self::_window_flag_t as window_flag_t;
pub const _menu_flag_t_ekMENU_FLAG: _menu_flag_t = 0;
pub const _menu_flag_t_ekMENU_ITEM: _menu_flag_t = 1;
pub const _menu_flag_t_ekMENU_SEPARATOR: _menu_flag_t = 2;
pub type _menu_flag_t = ::libc::c_int;
pub use self::_menu_flag_t as menu_flag_t;
pub const _ctrl_state_t_ekCTRL_STATE_NORMAL: _ctrl_state_t = 0;
pub const _ctrl_state_t_ekCTRL_STATE_HOT: _ctrl_state_t = 1;
pub const _ctrl_state_t_ekCTRL_STATE_PRESSED: _ctrl_state_t = 2;
pub const _ctrl_state_t_ekCTRL_STATE_BKNORMAL: _ctrl_state_t = 3;
pub const _ctrl_state_t_ekCTRL_STATE_BKHOT: _ctrl_state_t = 4;
pub const _ctrl_state_t_ekCTRL_STATE_BKPRESSED: _ctrl_state_t = 5;
pub const _ctrl_state_t_ekCTRL_STATE_DISABLED: _ctrl_state_t = 6;
pub type _ctrl_state_t = ::libc::c_int;
pub use self::_ctrl_state_t as ctrl_state_t;
pub const _ctrl_msel_t_ekCTRL_MSEL_NO: _ctrl_msel_t = 0;
pub const _ctrl_msel_t_ekCTRL_MSEL_SINGLE: _ctrl_msel_t = 1;
pub const _ctrl_msel_t_ekCTRL_MSEL_BURST: _ctrl_msel_t = 2;
pub type _ctrl_msel_t = ::libc::c_int;
pub use self::_ctrl_msel_t as ctrl_msel_t;
pub const _ctrl_op_t_ekCTRL_OP_ADD: _ctrl_op_t = 1;
pub const _ctrl_op_t_ekCTRL_OP_DEL: _ctrl_op_t = 2;
pub const _ctrl_op_t_ekCTRL_OP_INS: _ctrl_op_t = 3;
pub const _ctrl_op_t_ekCTRL_OP_SET: _ctrl_op_t = 4;
pub type _ctrl_op_t = ::libc::c_int;
pub use self::_ctrl_op_t as ctrl_op_t;
pub const _syscolor_t_ekSYSCOLOR_DARKMODE: _syscolor_t = 0;
pub const _syscolor_t_ekSYSCOLOR_LABEL: _syscolor_t = 1;
pub const _syscolor_t_ekSYSCOLOR_VIEW: _syscolor_t = 2;
pub const _syscolor_t_ekSYSCOLOR_LINE: _syscolor_t = 3;
pub const _syscolor_t_ekSYSCOLOR_LINK: _syscolor_t = 4;
pub const _syscolor_t_ekSYSCOLOR_BORDER: _syscolor_t = 5;
pub type _syscolor_t = ::libc::c_int;
pub use self::_syscolor_t as syscolor_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _ccursor_t {
    _unused: [u8; 0],
}
pub type Cursor = _ccursor_t;
pub type GuiCtx = _guictx_t;
pub type EvButton = _evbutton_t;
pub type EvSlider = _evslider_t;
pub type EvText = _evtext_t;
pub type EvTextFilter = _evtextfilter_t;
pub type EvDraw = _evdraw_t;
pub type EvMouse = _evmouse_t;
pub type EvWheel = _evwheel_t;
pub type EvKey = _evkey_t;
pub type EvPos = _evpos_t;
pub type EvSize = _evsize_t;
pub type EvWinClose = _evwinclose_t;
pub type EvMenu = _evmenu_t;
pub type EvScroll = _evscroll_t;
pub type EvTbPos = _evtbpos_t;
pub type EvTbRow = _evtbrow_t;
pub type EvTbRect = _evtbrect_t;
pub type EvTbSel = _evtbsel_t;
pub type EvTbCell = _evtbcell_t;
pub type FPtr_gctx_create =
    ::core::option::Option<unsafe extern "C" fn(flags: u32) -> *mut ::libc::c_void>;
pub type FPtr_gctx_create2 =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void) -> *mut ::libc::c_void>;
pub type FPtr_gctx_destroy =
    ::core::option::Option<unsafe extern "C" fn(item: *mut *mut ::libc::c_void)>;
pub type FPtr_gctx_set_text =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, text: *const char_t)>;
pub type FPtr_gctx_set_ptr = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, ptr: *mut ::libc::c_void),
>;
pub type FPtr_gctx_set_ptr2 = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, ptr: *mut ::libc::c_void) -> u32,
>;
pub type FPtr_gctx_set_ptr3 = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, ptr: *mut ::libc::c_void) -> enum_t,
>;
pub type FPtr_gctx_set_cptr = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, ptr: *const ::libc::c_void),
>;
pub type FPtr_gctx_set_listener = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, listener: *mut Listener),
>;
pub type FPtr_gctx_set_bool =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, value: bool_t)>;
pub type FPtr_gctx_set_uint32 =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, value: u32)>;
pub type FPtr_gctx_set_real32 =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, value: real32_t)>;
pub type FPtr_gctx_set_enum =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, value: enum_t)>;
pub type FPtr_gctx_set_enum2 =
    ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void, arg1: bool_t) -> enum_t>;
pub type FPtr_gctx_set_elem = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        op: ctrl_op_t,
        index: u32,
        text: *const char_t,
        data: *const Image,
    ),
>;
pub type FPtr_gctx_set_property = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, prop: enum_t, value: *const ::libc::c_void),
>;
pub type FPtr_gctx_set_key = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, key: vkey_t, modifiers: u32),
>;
pub type FPtr_gctx_set_hotkey = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, arg1: vkey_t, arg2: u32, arg3: *mut Listener),
>;
pub type FPtr_gctx_set_area = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        obj: *mut ::libc::c_void,
        bgcolor: color_t,
        skcolor: color_t,
        x: real32_t,
        y: real32_t,
        width: real32_t,
        height: real32_t,
    ),
>;
pub type FPtr_gctx_set2_bool = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, value1: bool_t, value2: bool_t),
>;
pub type FPtr_gctx_set2_int32 = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, value1: i32, value2: i32),
>;
pub type FPtr_gctx_set2_real32 = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, value1: real32_t, value2: real32_t),
>;
pub type FPtr_gctx_set2_real64 = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, value1: real64_t, value2: real64_t),
>;
pub type FPtr_gctx_set4_real32 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        value1: real32_t,
        value2: real32_t,
        value3: real32_t,
        value4: real32_t,
    ),
>;
pub type FPtr_gctx_get_text =
    ::core::option::Option<unsafe extern "C" fn(item: *const ::libc::c_void) -> *const char_t>;
pub type FPtr_gctx_get_ptr = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void) -> *mut ::libc::c_void,
>;
pub type FPtr_gctx_get_bool =
    ::core::option::Option<unsafe extern "C" fn(item: *const ::libc::c_void) -> bool_t>;
pub type FPtr_gctx_get_uint32 =
    ::core::option::Option<unsafe extern "C" fn(item: *const ::libc::c_void) -> u32>;
pub type FPtr_gctx_get_real32 =
    ::core::option::Option<unsafe extern "C" fn(item: *const ::libc::c_void) -> real32_t>;
pub type FPtr_gctx_get_enum =
    ::core::option::Option<unsafe extern "C" fn(item: *const ::libc::c_void) -> enum_t>;
pub type FPtr_gctx_get_enum2 = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void, arg1: enum_t) -> enum_t,
>;
pub type FPtr_gctx_get_enum3 = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void, ptr: *mut *mut ::libc::c_void) -> enum_t,
>;
pub type FPtr_gctx_get_real32e = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void, value: enum_t) -> real32_t,
>;
pub type FPtr_gctx_get2_real32 = ::core::option::Option<
    unsafe extern "C" fn(item: *const ::libc::c_void, value1: *mut real32_t, value2: *mut real32_t),
>;
pub type FPtr_gctx_get_indexed =
    ::core::option::Option<unsafe extern "C" fn(arg1: u32, arg2: *mut ::libc::c_void)>;
pub type FPtr_gctx_call = ::core::option::Option<unsafe extern "C" fn(item: *mut ::libc::c_void)>;
pub type FPtr_gctx_bounds1 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        text: *const char_t,
        refwidth: real32_t,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_bounds2 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        text: *const char_t,
        refwidth: real32_t,
        refheight: real32_t,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_bounds3 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        text: *const char_t,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_bounds4 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        refwidth: real32_t,
        lines: u32,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_bounds5 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        refwidth: real32_t,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_bounds6 = ::core::option::Option<
    unsafe extern "C" fn(
        item: *const ::libc::c_void,
        length: real32_t,
        size: gui_size_t,
        width: *mut real32_t,
        height: *mut real32_t,
    ),
>;
pub type FPtr_gctx_tickmarks = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        num_tickmarks: u32,
        tickmarks_at_left_top: bool_t,
    ),
>;
pub type FPtr_gctx_insert = ::core::option::Option<
    unsafe extern "C" fn(item: *mut ::libc::c_void, pos: u32, child: *mut ::libc::c_void),
>;
pub type FPtr_gctx_menu = ::core::option::Option<
    unsafe extern "C" fn(
        item: *mut ::libc::c_void,
        window: *mut ::libc::c_void,
        x: real32_t,
        y: real32_t,
    ),
>;
pub type FPtr_gctx_win_file = ::core::option::Option<
    unsafe extern "C" fn(
        parent: *mut ::libc::c_void,
        ftypes: *mut *const char_t,
        size: u32,
        start_dir: *const char_t,
        open: bool_t,
    ) -> *const char_t,
>;
pub type FPtr_gctx_win_color = ::core::option::Option<
    unsafe extern "C" fn(
        parent: *mut ::libc::c_void,
        title: *const char_t,
        x: real32_t,
        y: real32_t,
        halign: align_t,
        valign: align_t,
        current: color_t,
        colors: *mut color_t,
        n: u32,
        OnChange: *mut Listener,
    ),
>;
pub type FPtr_gctx_cursor = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: enum_t,
        arg2: *const Image,
        arg3: real32_t,
        arg4: real32_t,
    ) -> *mut Cursor,
>;
pub type FPtr_gctx_draw_rect = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: i32,
        arg3: i32,
        arg4: u32,
        arg5: u32,
        arg6: enum_t,
    ),
>;
pub type FPtr_gctx_draw_line = ::core::option::Option<
    unsafe extern "C" fn(arg1: *mut ::libc::c_void, arg2: i32, arg3: i32, arg4: i32, arg5: i32),
>;
pub type FPtr_gctx_draw_text = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: *const char_t,
        arg3: i32,
        arg4: i32,
        arg5: enum_t,
    ),
>;
pub type FPtr_gctx_draw_image = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: *const Image,
        arg3: i32,
        arg4: i32,
        arg5: enum_t,
    ),
>;
pub type FPtr_gctx_clipboard =
    ::core::option::Option<unsafe extern "C" fn(arg1: *mut ::libc::c_void, arg2: clipboard_t)>;
pub type FPtr_gctx_command = ::core::option::Option<
    unsafe extern "C" fn(
        arg1: *mut ::libc::c_void,
        arg2: enum_t,
        arg3: *const ::libc::c_void,
        arg4: *mut ::libc::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _guictx_t {
    pub retain_count: u32,
    pub func_create: [FPtr_gctx_create; 17usize],
    pub func_destroy: [FPtr_gctx_destroy; 17usize],
    pub func_set_tooltip: [FPtr_gctx_set_text; 17usize],
    pub func_attach_to_panel: [FPtr_gctx_set_ptr; 17usize],
    pub func_detach_from_panel: [FPtr_gctx_set_ptr; 17usize],
    pub func_set_visible: [FPtr_gctx_set_bool; 17usize],
    pub func_set_enabled: [FPtr_gctx_set_bool; 17usize],
    pub func_get_size: [FPtr_gctx_get2_real32; 17usize],
    pub func_get_origin: [FPtr_gctx_get2_real32; 17usize],
    pub func_set_frame: [FPtr_gctx_set4_real32; 17usize],
    pub func_label_OnClick: FPtr_gctx_set_listener,
    pub func_label_OnMouseEnter: FPtr_gctx_set_listener,
    pub func_label_OnMouseExit: FPtr_gctx_set_listener,
    pub func_label_set_text: FPtr_gctx_set_text,
    pub func_label_set_font: FPtr_gctx_set_cptr,
    pub func_label_set_flags: FPtr_gctx_set_uint32,
    pub func_label_set_align: FPtr_gctx_set_enum,
    pub func_label_set_ellipsis: FPtr_gctx_set_enum,
    pub func_label_set_text_color: FPtr_gctx_set_uint32,
    pub func_label_set_bg_color: FPtr_gctx_set_uint32,
    pub func_label_bounds: FPtr_gctx_bounds1,
    pub func_button_OnClick: FPtr_gctx_set_listener,
    pub func_button_set_text: FPtr_gctx_set_text,
    pub func_button_set_font: FPtr_gctx_set_cptr,
    pub func_button_set_align: FPtr_gctx_set_enum,
    pub func_button_set_image: FPtr_gctx_set_cptr,
    pub func_button_set_state: FPtr_gctx_set_enum,
    pub func_button_get_state: FPtr_gctx_get_enum,
    pub func_button_set_vpadding: FPtr_gctx_set_real32,
    pub func_button_bounds: FPtr_gctx_bounds2,
    pub func_popup_OnSelect: FPtr_gctx_set_listener,
    pub func_popup_set_elem: FPtr_gctx_set_elem,
    pub func_popup_set_font: FPtr_gctx_set_cptr,
    pub func_popup_list_height: FPtr_gctx_set_uint32,
    pub func_popup_set_selected: FPtr_gctx_set_uint32,
    pub func_popup_get_selected: FPtr_gctx_get_uint32,
    pub func_popup_bounds: FPtr_gctx_bounds3,
    pub func_edit_OnFilter: FPtr_gctx_set_listener,
    pub func_edit_OnChange: FPtr_gctx_set_listener,
    pub func_edit_OnFocus: FPtr_gctx_set_listener,
    pub func_edit_set_text: FPtr_gctx_set_text,
    pub func_edit_set_font: FPtr_gctx_set_cptr,
    pub func_edit_set_align: FPtr_gctx_set_enum,
    pub func_edit_set_passmode: FPtr_gctx_set_bool,
    pub func_edit_set_editable: FPtr_gctx_set_bool,
    pub func_edit_set_autoselect: FPtr_gctx_set_bool,
    pub func_edit_set_select: FPtr_gctx_set2_int32,
    pub func_edit_set_text_color: FPtr_gctx_set_uint32,
    pub func_edit_set_bg_color: FPtr_gctx_set_uint32,
    pub func_edit_set_vpadding: FPtr_gctx_set_real32,
    pub func_edit_bounds: FPtr_gctx_bounds4,
    pub func_edit_clipboard: FPtr_gctx_clipboard,
    pub func_combo_OnFilter: FPtr_gctx_set_listener,
    pub func_combo_OnChange: FPtr_gctx_set_listener,
    pub func_combo_OnFocus: FPtr_gctx_set_listener,
    pub func_combo_OnSelect: FPtr_gctx_set_listener,
    pub func_combo_set_text: FPtr_gctx_set_text,
    pub func_combo_set_font: FPtr_gctx_set_cptr,
    pub func_combo_set_align: FPtr_gctx_set_enum,
    pub func_combo_set_passmode: FPtr_gctx_set_bool,
    pub func_combo_set_text_color: FPtr_gctx_set_uint32,
    pub func_combo_set_bg_color: FPtr_gctx_set_uint32,
    pub func_combo_set_elem: FPtr_gctx_set_elem,
    pub func_combo_set_selected: FPtr_gctx_set_uint32,
    pub func_combo_get_selected: FPtr_gctx_get_uint32,
    pub func_combo_bounds: FPtr_gctx_bounds5,
    pub func_slider_OnMoved: FPtr_gctx_set_listener,
    pub func_slider_set_tickmarks: FPtr_gctx_tickmarks,
    pub func_slider_get_position: FPtr_gctx_get_real32,
    pub func_slider_set_position: FPtr_gctx_set_real32,
    pub func_slider_bounds: FPtr_gctx_bounds6,
    pub func_updown_OnClick: FPtr_gctx_set_listener,
    pub func_progress_set_position: FPtr_gctx_set_real32,
    pub func_progress_get_thickness: FPtr_gctx_get_real32e,
    pub func_text_OnFilter: FPtr_gctx_set_listener,
    pub func_text_OnFocus: FPtr_gctx_set_listener,
    pub func_text_set_text: FPtr_gctx_set_text,
    pub func_text_add_text: FPtr_gctx_set_text,
    pub func_text_ins_text: FPtr_gctx_set_text,
    pub func_text_set_rtf: FPtr_gctx_set_ptr,
    pub func_text_set_prop: FPtr_gctx_set_property,
    pub func_text_set_editable: FPtr_gctx_set_bool,
    pub func_text_get_text: FPtr_gctx_get_text,
    pub func_text_scroller_visible: FPtr_gctx_set2_bool,
    pub func_text_set_need_display: FPtr_gctx_call,
    pub func_text_clipboard: FPtr_gctx_clipboard,
    pub func_web_OnFocus: FPtr_gctx_set_listener,
    pub func_web_command: FPtr_gctx_command,
    pub func_web_scroller_visible: FPtr_gctx_set2_bool,
    pub func_web_set_need_display: FPtr_gctx_call,
    pub func_web_clipboard: FPtr_gctx_clipboard,
    pub func_split_attach_control: FPtr_gctx_set_ptr,
    pub func_split_detach_control: FPtr_gctx_set_ptr,
    pub func_split_OnDrag: FPtr_gctx_set_listener,
    pub func_split_track_area: FPtr_gctx_set4_real32,
    pub func_view_OnDraw: FPtr_gctx_set_listener,
    pub func_view_OnOverlay: FPtr_gctx_set_listener,
    pub func_view_OnEnter: FPtr_gctx_set_listener,
    pub func_view_OnExit: FPtr_gctx_set_listener,
    pub func_view_OnMoved: FPtr_gctx_set_listener,
    pub func_view_OnDown: FPtr_gctx_set_listener,
    pub func_view_OnUp: FPtr_gctx_set_listener,
    pub func_view_OnClick: FPtr_gctx_set_listener,
    pub func_view_OnDrag: FPtr_gctx_set_listener,
    pub func_view_OnWheel: FPtr_gctx_set_listener,
    pub func_view_OnKeyDown: FPtr_gctx_set_listener,
    pub func_view_OnKeyUp: FPtr_gctx_set_listener,
    pub func_view_OnFocus: FPtr_gctx_set_listener,
    pub func_view_OnResignFocus: FPtr_gctx_set_listener,
    pub func_view_OnAcceptFocus: FPtr_gctx_set_listener,
    pub func_view_OnScroll: FPtr_gctx_set_listener,
    pub func_view_OnTouchTap: FPtr_gctx_set_listener,
    pub func_view_OnTouchStartDrag: FPtr_gctx_set_listener,
    pub func_view_OnTouchDragging: FPtr_gctx_set_listener,
    pub func_view_OnTouchEndDrag: FPtr_gctx_set_listener,
    pub func_view_OnTouchStartPinch: FPtr_gctx_set_listener,
    pub func_view_OnTouchPinching: FPtr_gctx_set_listener,
    pub func_view_OnTouchEndPinch: FPtr_gctx_set_listener,
    pub func_view_allow_key: FPtr_gctx_set_key,
    pub func_view_scroll: FPtr_gctx_set2_real32,
    pub func_view_scroll_get: FPtr_gctx_get2_real32,
    pub func_view_scroller_size: FPtr_gctx_get2_real32,
    pub func_view_scroller_visible: FPtr_gctx_set2_bool,
    pub func_view_content_size: FPtr_gctx_set4_real32,
    pub func_view_scale_factor: FPtr_gctx_get_real32,
    pub func_view_set_need_display: FPtr_gctx_call,
    pub func_view_set_drawable: FPtr_gctx_set_bool,
    pub func_view_get_native_view: FPtr_gctx_get_ptr,
    pub func_panel_area: FPtr_gctx_set_area,
    pub func_panel_scroller_size: FPtr_gctx_get2_real32,
    pub func_panel_content_size: FPtr_gctx_set4_real32,
    pub func_panel_set_need_display: FPtr_gctx_call,
    pub func_menu_create: FPtr_gctx_create,
    pub func_menu_destroy: FPtr_gctx_destroy,
    pub func_menu_insert_item: FPtr_gctx_insert,
    pub func_menu_delete_item: FPtr_gctx_set_ptr,
    pub func_menu_launch_popup: FPtr_gctx_menu,
    pub func_menu_hide_popup: FPtr_gctx_call,
    pub func_menu_is_menubar: FPtr_gctx_get_bool,
    pub func_menuitem_create: FPtr_gctx_create,
    pub func_menuitem_destroy: FPtr_gctx_destroy,
    pub func_menuitem_OnClick: FPtr_gctx_set_listener,
    pub func_menuitem_set_enabled: FPtr_gctx_set_bool,
    pub func_menuitem_set_visible: FPtr_gctx_set_bool,
    pub func_menuitem_set_text: FPtr_gctx_set_text,
    pub func_menuitem_set_image: FPtr_gctx_set_cptr,
    pub func_menuitem_set_key_equivalent: FPtr_gctx_set_key,
    pub func_menuitem_set_state: FPtr_gctx_set_enum,
    pub func_attach_menu_to_menu_item: FPtr_gctx_set_ptr,
    pub func_detach_menu_from_menu_item: FPtr_gctx_set_ptr,
    pub func_window_create: FPtr_gctx_create,
    pub func_window_managed: FPtr_gctx_create2,
    pub func_window_destroy: FPtr_gctx_destroy,
    pub func_window_OnMoved: FPtr_gctx_set_listener,
    pub func_window_OnResize: FPtr_gctx_set_listener,
    pub func_window_OnClose: FPtr_gctx_set_listener,
    pub func_window_set_title: FPtr_gctx_set_text,
    pub func_window_set_edited: FPtr_gctx_set_bool,
    pub func_window_set_movable: FPtr_gctx_set_bool,
    pub func_window_set_z_order: FPtr_gctx_set_ptr,
    pub func_window_set_alpha: FPtr_gctx_set_real32,
    pub func_window_enable_mouse_events: FPtr_gctx_set_bool,
    pub func_window_hotkey: FPtr_gctx_set_hotkey,
    pub func_window_set_taborder: FPtr_gctx_set_ptr,
    pub func_window_tabcycle: FPtr_gctx_set_bool,
    pub func_window_tabstop: FPtr_gctx_set_enum2,
    pub func_window_set_focus: FPtr_gctx_set_ptr3,
    pub func_window_get_focus: FPtr_gctx_get_ptr,
    pub func_window_info_focus: FPtr_gctx_get_enum3,
    pub func_attach_main_panel_to_window: FPtr_gctx_set_ptr,
    pub func_detach_main_panel_from_window: FPtr_gctx_set_ptr,
    pub func_attach_window_to_window: FPtr_gctx_set_ptr,
    pub func_detach_window_from_window: FPtr_gctx_set_ptr,
    pub func_window_launch: FPtr_gctx_set_ptr,
    pub func_window_hide: FPtr_gctx_set_ptr,
    pub func_window_launch_modal: FPtr_gctx_set_ptr2,
    pub func_window_stop_modal: FPtr_gctx_set_uint32,
    pub func_window_get_origin_in_screen_coordinates: FPtr_gctx_get2_real32,
    pub func_window_set_origin_in_screen_coordinates: FPtr_gctx_set2_real32,
    pub func_window_get_size: FPtr_gctx_get2_real32,
    pub func_window_set_size: FPtr_gctx_set2_real32,
    pub func_window_set_default_pushbutton: FPtr_gctx_set_ptr,
    pub func_window_set_cursor: FPtr_gctx_set_ptr,
    pub func_window_set_property: FPtr_gctx_set_property,
    pub func_comwin_file: FPtr_gctx_win_file,
    pub func_comwin_color: FPtr_gctx_win_color,
    pub func_globals_device: FPtr_gctx_get_enum,
    pub func_globals_color: FPtr_gctx_get_enum,
    pub func_globals_resolution: FPtr_gctx_get2_real32,
    pub func_globals_mouse_position: FPtr_gctx_get2_real32,
    pub func_globals_cursor: FPtr_gctx_cursor,
    pub func_globals_cursor_destroy: FPtr_gctx_destroy,
    pub func_globals_value: FPtr_gctx_get_indexed,
    pub func_globals_transitions: FPtr_gctx_set2_real64,
    pub func_globals_OnIdle: FPtr_gctx_set_listener,
    pub func_drawctrl_font: FPtr_gctx_get_ptr,
    pub func_drawctrl_row_padding: FPtr_gctx_get_uint32,
    pub func_drawctrl_check_width: FPtr_gctx_get_uint32,
    pub func_drawctrl_check_height: FPtr_gctx_get_uint32,
    pub func_drawctrl_multisel: FPtr_gctx_get_enum2,
    pub func_drawctrl_clear: FPtr_gctx_draw_rect,
    pub func_drawctrl_header: FPtr_gctx_draw_rect,
    pub func_drawctrl_indicator: FPtr_gctx_draw_rect,
    pub func_drawctrl_fill: FPtr_gctx_draw_rect,
    pub func_drawctrl_focus: FPtr_gctx_draw_rect,
    pub func_drawctrl_line: FPtr_gctx_draw_line,
    pub func_drawctrl_text: FPtr_gctx_draw_text,
    pub func_drawctrl_image: FPtr_gctx_draw_image,
    pub func_drawctrl_checkbox: FPtr_gctx_draw_rect,
    pub func_drawctrl_uncheckbox: FPtr_gctx_draw_rect,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evbutton_t {
    pub index: u32,
    pub state: gui_state_t,
    pub text: *const char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evslider_t {
    pub pos: real32_t,
    pub incr: real32_t,
    pub step: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtext_t {
    pub text: *const char_t,
    pub cpos: u32,
    pub len: i32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtextfilter_t {
    pub apply: bool_t,
    pub text: [char_t; 4096usize],
    pub cpos: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evdraw_t {
    pub ctx: *mut DCtx,
    pub x: real32_t,
    pub y: real32_t,
    pub width: real32_t,
    pub height: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evmouse_t {
    pub x: real32_t,
    pub y: real32_t,
    pub lx: real32_t,
    pub ly: real32_t,
    pub button: gui_mouse_t,
    pub count: u32,
    pub modifiers: u32,
    pub tag: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evwheel_t {
    pub x: real32_t,
    pub y: real32_t,
    pub dx: real32_t,
    pub dy: real32_t,
    pub dz: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evkey_t {
    pub key: vkey_t,
    pub modifiers: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evpos_t {
    pub x: real32_t,
    pub y: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evsize_t {
    pub width: real32_t,
    pub height: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evwinclose_t {
    pub origin: gui_close_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evmenu_t {
    pub index: u32,
    pub state: gui_state_t,
    pub text: *const char_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evscroll_t {
    pub orient: gui_orient_t,
    pub scroll: gui_scroll_t,
    pub cpos: real32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtbpos_t {
    pub col: u32,
    pub row: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtbrow_t {
    pub sel: bool_t,
    pub row: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtbrect_t {
    pub stcol: u32,
    pub edcol: u32,
    pub strow: u32,
    pub edrow: u32,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtbsel_t {
    pub sel: *mut ArrStuint32_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _evtbcell_t {
    pub text: *const char_t,
    pub align: align_t,
}
pub const _gui_notif_t_ekGUI_NOTIF_LANGUAGE: _gui_notif_t = 1;
pub const _gui_notif_t_ekGUI_NOTIF_WIN_DESTROY: _gui_notif_t = 2;
pub const _gui_notif_t_ekGUI_NOTIF_MENU_DESTROY: _gui_notif_t = 3;
pub type _gui_notif_t = ::libc::c_int;
pub use self::_gui_notif_t as gui_notif_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _guicontrol_t {
    _unused: [u8; 0],
}
pub type GuiControl = _guicontrol_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _label_t {
    _unused: [u8; 0],
}
pub type Label = _label_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _button_t {
    _unused: [u8; 0],
}
pub type Button = _button_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _popup_t {
    _unused: [u8; 0],
}
pub type PopUp = _popup_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _edit_t {
    _unused: [u8; 0],
}
pub type Edit = _edit_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _combo_t {
    _unused: [u8; 0],
}
pub type Combo = _combo_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _listbox_t {
    _unused: [u8; 0],
}
pub type ListBox = _listbox_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _updown_t {
    _unused: [u8; 0],
}
pub type UpDown = _updown_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _slider_t {
    _unused: [u8; 0],
}
pub type Slider = _slider_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _progress_t {
    _unused: [u8; 0],
}
pub type Progress = _progress_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _view_t {
    _unused: [u8; 0],
}
pub type View = _view_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _textview_t {
    _unused: [u8; 0],
}
pub type TextView = _textview_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _webview_t {
    _unused: [u8; 0],
}
pub type WebView = _webview_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _imageview_t {
    _unused: [u8; 0],
}
pub type ImageView = _imageview_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _tableview_t {
    _unused: [u8; 0],
}
pub type TableView = _tableview_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _splitview_t {
    _unused: [u8; 0],
}
pub type SplitView = _splitview_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _layout_t {
    _unused: [u8; 0],
}
pub type Layout = _layout_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _cell_t {
    _unused: [u8; 0],
}
pub type Cell = _cell_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _panel_t {
    _unused: [u8; 0],
}
pub type Panel = _panel_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _window_t {
    _unused: [u8; 0],
}
pub type Window = _window_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _menu_t {
    _unused: [u8; 0],
}
pub type Menu = _menu_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _menu_item_t {
    _unused: [u8; 0],
}
pub type MenuItem = _menu_item_t;
pub type FocusInfo = _focus_info_t;
pub type FPtr_respack =
    ::core::option::Option<unsafe extern "C" fn(locale: *const char_t) -> *mut ResPack>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _focus_info_t {
    pub action: gui_tab_t,
    pub next: *mut GuiControl,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FPtr_respackData {
    pub elem: [FPtr_respack; 1024usize],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ArrStFPtr_respack {
    pub reserved: u32,
    pub size: u32,
    pub elem_sizeof: u16,
    pub content: *mut FPtr_respackData,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NodeStFPtr_respack {
    pub rb: u32,
    pub left: *mut NodeStFPtr_respack,
    pub right: *mut NodeStFPtr_respack,
    pub data: FPtr_respack,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SetStFPtr_respack {
    pub elems: u32,
    pub esize: u16,
    pub ksize: u16,
    pub root: *mut NodeStFPtr_respack,
    pub func_compare: FPtr_compare,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _arrstendFPtr_respack_t {
    _unused: [u8; 0],
}
pub type arrstendFPtr_respack = _arrstendFPtr_respack_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _setstendFPtr_respack_t {
    _unused: [u8; 0],
}
pub type setstendFPtr_respack = _setstendFPtr_respack_t;
pub type FPtr_task_main =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void) -> u32>;
pub type FPtr_task_update = ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void)>;
pub type FPtr_task_end =
    ::core::option::Option<unsafe extern "C" fn(data: *mut ::libc::c_void, rvalue: u32)>;
unsafe extern "C" {
    pub fn osapp_finish();
}
unsafe extern "C" {
    pub fn osapp_argc() -> u32;
}
unsafe extern "C" {
    pub fn osapp_argv(index: u32, argv: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn osapp_task_imp(
        data: *mut ::libc::c_void,
        updtime: real32_t,
        func_task_main: FPtr_task_main,
        func_task_update: FPtr_task_update,
        func_task_end: FPtr_task_end,
    );
}
unsafe extern "C" {
    pub fn osapp_menubar(menu: *mut Menu, window: *mut Window);
}
unsafe extern "C" {
    pub fn osapp_open_url(url: *const char_t);
}
unsafe extern "C" {
    pub fn button_push() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_check() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_check3() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_radio() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_flat() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_flatgle() -> *mut Button;
}
unsafe extern "C" {
    pub fn button_OnClick(button: *mut Button, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn button_min_width(button: *mut Button, width: real32_t);
}
unsafe extern "C" {
    pub fn button_text(button: *mut Button, text: *const char_t);
}
unsafe extern "C" {
    pub fn button_text_alt(button: *mut Button, text: *const char_t);
}
unsafe extern "C" {
    pub fn button_tooltip(button: *mut Button, text: *const char_t);
}
unsafe extern "C" {
    pub fn button_font(button: *mut Button, font: *const Font);
}
unsafe extern "C" {
    pub fn button_get_font(button: *const Button) -> *const Font;
}
unsafe extern "C" {
    pub fn button_image(button: *mut Button, image: *const Image);
}
unsafe extern "C" {
    pub fn button_image_alt(button: *mut Button, image: *const Image);
}
unsafe extern "C" {
    pub fn button_state(button: *mut Button, state: gui_state_t);
}
unsafe extern "C" {
    pub fn button_tag(button: *mut Button, tag: u32);
}
unsafe extern "C" {
    pub fn button_vpadding(button: *mut Button, padding: real32_t);
}
unsafe extern "C" {
    pub fn button_get_state(button: *const Button) -> gui_state_t;
}
unsafe extern "C" {
    pub fn button_get_tag(button: *const Button) -> u32;
}
unsafe extern "C" {
    pub fn button_get_height(button: *const Button) -> real32_t;
}
unsafe extern "C" {
    pub fn cell_empty(cell: *mut Cell) -> bool_t;
}
unsafe extern "C" {
    pub fn cell_control(cell: *mut Cell) -> *mut GuiControl;
}
unsafe extern "C" {
    pub fn cell_label(cell: *mut Cell) -> *mut Label;
}
unsafe extern "C" {
    pub fn cell_button(cell: *mut Cell) -> *mut Button;
}
unsafe extern "C" {
    pub fn cell_popup(cell: *mut Cell) -> *mut PopUp;
}
unsafe extern "C" {
    pub fn cell_edit(cell: *mut Cell) -> *mut Edit;
}
unsafe extern "C" {
    pub fn cell_combo(cell: *mut Cell) -> *mut Combo;
}
unsafe extern "C" {
    pub fn cell_listbox(cell: *mut Cell) -> *mut ListBox;
}
unsafe extern "C" {
    pub fn cell_updown(cell: *mut Cell) -> *mut UpDown;
}
unsafe extern "C" {
    pub fn cell_slider(cell: *mut Cell) -> *mut Slider;
}
unsafe extern "C" {
    pub fn cell_progress(cell: *mut Cell) -> *mut Progress;
}
unsafe extern "C" {
    pub fn cell_view(cell: *mut Cell) -> *mut View;
}
unsafe extern "C" {
    pub fn cell_textview(cell: *mut Cell) -> *mut TextView;
}
unsafe extern "C" {
    pub fn cell_webview(cell: *mut Cell) -> *mut WebView;
}
unsafe extern "C" {
    pub fn cell_imageview(cell: *mut Cell) -> *mut ImageView;
}
unsafe extern "C" {
    pub fn cell_tableview(cell: *mut Cell) -> *mut TableView;
}
unsafe extern "C" {
    pub fn cell_splitview(cell: *mut Cell) -> *mut SplitView;
}
unsafe extern "C" {
    pub fn cell_panel(cell: *mut Cell) -> *mut Panel;
}
unsafe extern "C" {
    pub fn cell_layout(cell: *mut Cell) -> *mut Layout;
}
unsafe extern "C" {
    pub fn cell_enabled(cell: *mut Cell, enabled: bool_t);
}
unsafe extern "C" {
    pub fn cell_visible(cell: *mut Cell, visible: bool_t);
}
unsafe extern "C" {
    pub fn cell_padding(cell: *mut Cell, pall: real32_t);
}
unsafe extern "C" {
    pub fn cell_padding2(cell: *mut Cell, ptb: real32_t, plr: real32_t);
}
unsafe extern "C" {
    pub fn cell_padding4(cell: *mut Cell, pt: real32_t, pr: real32_t, pb: real32_t, pl: real32_t);
}
unsafe extern "C" {
    pub fn cell_dbind_imp(
        cell: *mut Cell,
        type_: *const char_t,
        size: u16,
        mname: *const char_t,
        mtype: *const char_t,
        moffset: u16,
        msize: u16,
    );
}
unsafe extern "C" {
    pub fn combo_create() -> *mut Combo;
}
unsafe extern "C" {
    pub fn combo_OnFilter(combo: *mut Combo, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn combo_OnChange(combo: *mut Combo, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn combo_text(combo: *mut Combo, text: *const char_t);
}
unsafe extern "C" {
    pub fn combo_align(combo: *mut Combo, align: align_t);
}
unsafe extern "C" {
    pub fn combo_tooltip(combo: *mut Combo, text: *const char_t);
}
unsafe extern "C" {
    pub fn combo_color(combo: *mut Combo, color: color_t);
}
unsafe extern "C" {
    pub fn combo_color_focus(combo: *mut Combo, color: color_t);
}
unsafe extern "C" {
    pub fn combo_bgcolor(combo: *mut Combo, color: color_t);
}
unsafe extern "C" {
    pub fn combo_bgcolor_focus(combo: *mut Combo, color: color_t);
}
unsafe extern "C" {
    pub fn combo_phtext(combo: *mut Combo, text: *const char_t);
}
unsafe extern "C" {
    pub fn combo_phcolor(combo: *mut Combo, color: color_t);
}
unsafe extern "C" {
    pub fn combo_phstyle(combo: *mut Combo, fstyle: u32);
}
unsafe extern "C" {
    pub fn combo_get_text(combo: *const Combo, index: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn combo_count(combo: *const Combo) -> u32;
}
unsafe extern "C" {
    pub fn combo_add_elem(combo: *mut Combo, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn combo_set_elem(combo: *mut Combo, index: u32, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn combo_ins_elem(combo: *mut Combo, index: u32, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn combo_del_elem(combo: *mut Combo, index: u32);
}
unsafe extern "C" {
    pub fn combo_duplicates(combo: *mut Combo, duplicates: bool_t);
}
unsafe extern "C" {
    pub fn comwin_open_file(
        parent: *mut Window,
        ftypes: *mut *const char_t,
        size: u32,
        start_dir: *const char_t,
    ) -> *const char_t;
}
unsafe extern "C" {
    pub fn comwin_save_file(
        parent: *mut Window,
        ftypes: *mut *const char_t,
        size: u32,
        start_dir: *const char_t,
    ) -> *const char_t;
}
unsafe extern "C" {
    pub fn comwin_color(
        parent: *mut Window,
        title: *const char_t,
        x: real32_t,
        y: real32_t,
        halign: align_t,
        valign: align_t,
        current: color_t,
        colors: *mut color_t,
        n: u32,
        OnChange: *mut Listener,
    );
}
unsafe extern "C" {
    pub fn edit_create() -> *mut Edit;
}
unsafe extern "C" {
    pub fn edit_multiline() -> *mut Edit;
}
unsafe extern "C" {
    pub fn edit_OnFilter(edit: *mut Edit, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn edit_OnChange(edit: *mut Edit, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn edit_OnFocus(edit: *mut Edit, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn edit_min_width(edit: *mut Edit, width: real32_t);
}
unsafe extern "C" {
    pub fn edit_min_height(edit: *mut Edit, height: real32_t);
}
unsafe extern "C" {
    pub fn edit_text(edit: *mut Edit, text: *const char_t);
}
unsafe extern "C" {
    pub fn edit_font(edit: *mut Edit, font: *const Font);
}
unsafe extern "C" {
    pub fn edit_align(edit: *mut Edit, align: align_t);
}
unsafe extern "C" {
    pub fn edit_passmode(edit: *mut Edit, passmode: bool_t);
}
unsafe extern "C" {
    pub fn edit_editable(edit: *mut Edit, is_editable: bool_t);
}
unsafe extern "C" {
    pub fn edit_autoselect(edit: *mut Edit, autoselect: bool_t);
}
unsafe extern "C" {
    pub fn edit_select(edit: *mut Edit, start: i32, end: i32);
}
unsafe extern "C" {
    pub fn edit_tooltip(edit: *mut Edit, text: *const char_t);
}
unsafe extern "C" {
    pub fn edit_color(edit: *mut Edit, color: color_t);
}
unsafe extern "C" {
    pub fn edit_color_focus(edit: *mut Edit, color: color_t);
}
unsafe extern "C" {
    pub fn edit_bgcolor(edit: *mut Edit, color: color_t);
}
unsafe extern "C" {
    pub fn edit_bgcolor_focus(edit: *mut Edit, color: color_t);
}
unsafe extern "C" {
    pub fn edit_phtext(edit: *mut Edit, text: *const char_t);
}
unsafe extern "C" {
    pub fn edit_phcolor(edit: *mut Edit, color: color_t);
}
unsafe extern "C" {
    pub fn edit_phstyle(edit: *mut Edit, fstyle: u32);
}
unsafe extern "C" {
    pub fn edit_vpadding(edit: *mut Edit, padding: real32_t);
}
unsafe extern "C" {
    pub fn edit_get_text(edit: *const Edit) -> *const char_t;
}
unsafe extern "C" {
    pub fn edit_get_height(edit: *const Edit) -> real32_t;
}
unsafe extern "C" {
    pub fn edit_copy(edit: *const Edit);
}
unsafe extern "C" {
    pub fn edit_cut(edit: *mut Edit);
}
unsafe extern "C" {
    pub fn edit_paste(edit: *mut Edit);
}
unsafe extern "C" {
    pub fn globals_device() -> device_t;
}
unsafe extern "C" {
    pub fn globals_resolution(resolution: *mut S2Df);
}
unsafe extern "C" {
    pub fn globals_mouse_position() -> V2Df;
}
unsafe extern "C" {
    pub fn gui_start();
}
unsafe extern "C" {
    pub fn gui_finish();
}
unsafe extern "C" {
    pub fn gui_respack(func_respack: FPtr_respack);
}
unsafe extern "C" {
    pub fn gui_language(lang: *const char_t);
}
unsafe extern "C" {
    pub fn gui_text(id: ResId) -> *const char_t;
}
unsafe extern "C" {
    pub fn gui_image(id: ResId) -> *const Image;
}
unsafe extern "C" {
    pub fn gui_file(id: ResId, size: *mut u32) -> *const byte_t;
}
unsafe extern "C" {
    pub fn gui_dark_mode() -> bool_t;
}
unsafe extern "C" {
    pub fn gui_alt_color(light_color: color_t, dark_color: color_t) -> color_t;
}
unsafe extern "C" {
    pub fn gui_label_color() -> color_t;
}
unsafe extern "C" {
    pub fn gui_view_color() -> color_t;
}
unsafe extern "C" {
    pub fn gui_line_color() -> color_t;
}
unsafe extern "C" {
    pub fn gui_link_color() -> color_t;
}
unsafe extern "C" {
    pub fn gui_border_color() -> color_t;
}
unsafe extern "C" {
    pub fn gui_resolution() -> S2Df;
}
unsafe extern "C" {
    pub fn gui_mouse_pos() -> V2Df;
}
unsafe extern "C" {
    pub fn gui_update();
}
unsafe extern "C" {
    pub fn gui_OnThemeChanged(listener: *mut Listener);
}
unsafe extern "C" {
    pub fn gui_update_transitions(prtime: real64_t, crtime: real64_t);
}
unsafe extern "C" {
    pub fn gui_OnNotification(listener: *mut Listener);
}
unsafe extern "C" {
    pub fn gui_OnIdle(listener: *mut Listener);
}
unsafe extern "C" {
    pub fn gui_info_window(
        fatal: bool_t,
        msg: *const char_t,
        caption: *const char_t,
        detail: *const char_t,
        file: *const char_t,
        line: u32,
        buttons: *const ArrPtString,
        defindex: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn evbind_object_imp(e: *mut Event, type_: *const char_t) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn evbind_modify_imp(
        e: *mut Event,
        type_: *const char_t,
        size: u16,
        mname: *const char_t,
        mtype: *const char_t,
        moffset: u16,
        msize: u16,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn guicontrol_label(control: *mut GuiControl) -> *mut Label;
}
unsafe extern "C" {
    pub fn guicontrol_button(control: *mut GuiControl) -> *mut Button;
}
unsafe extern "C" {
    pub fn guicontrol_popup(control: *mut GuiControl) -> *mut PopUp;
}
unsafe extern "C" {
    pub fn guicontrol_edit(control: *mut GuiControl) -> *mut Edit;
}
unsafe extern "C" {
    pub fn guicontrol_combo(control: *mut GuiControl) -> *mut Combo;
}
unsafe extern "C" {
    pub fn guicontrol_listbox(control: *mut GuiControl) -> *mut ListBox;
}
unsafe extern "C" {
    pub fn guicontrol_updown(control: *mut GuiControl) -> *mut UpDown;
}
unsafe extern "C" {
    pub fn guicontrol_slider(control: *mut GuiControl) -> *mut Slider;
}
unsafe extern "C" {
    pub fn guicontrol_progress(control: *mut GuiControl) -> *mut Progress;
}
unsafe extern "C" {
    pub fn guicontrol_view(control: *mut GuiControl) -> *mut View;
}
unsafe extern "C" {
    pub fn guicontrol_textview(control: *mut GuiControl) -> *mut TextView;
}
unsafe extern "C" {
    pub fn guicontrol_webview(control: *mut GuiControl) -> *mut WebView;
}
unsafe extern "C" {
    pub fn guicontrol_imageview(control: *mut GuiControl) -> *mut ImageView;
}
unsafe extern "C" {
    pub fn guicontrol_tableview(control: *mut GuiControl) -> *mut TableView;
}
unsafe extern "C" {
    pub fn guicontrol_splitview(control: *mut GuiControl) -> *mut SplitView;
}
unsafe extern "C" {
    pub fn guicontrol_panel(control: *mut GuiControl) -> *mut Panel;
}
unsafe extern "C" {
    pub fn guicontrol_tag(control: *mut GuiControl, tag: u32);
}
unsafe extern "C" {
    pub fn guicontrol_get_tag(control: *const GuiControl) -> u32;
}
unsafe extern "C" {
    pub fn imageview_create() -> *mut ImageView;
}
unsafe extern "C" {
    pub fn imageview_size(view: *mut ImageView, size: S2Df);
}
unsafe extern "C" {
    pub fn imageview_scale(view: *mut ImageView, scale: gui_scale_t);
}
unsafe extern "C" {
    pub fn imageview_image(view: *mut ImageView, image: *const Image);
}
unsafe extern "C" {
    pub fn imageview_OnClick(view: *mut ImageView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn imageview_OnOverDraw(view: *mut ImageView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn label_create() -> *mut Label;
}
unsafe extern "C" {
    pub fn label_OnClick(label: *mut Label, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn label_min_width(label: *mut Label, width: real32_t);
}
unsafe extern "C" {
    pub fn label_text(label: *mut Label, text: *const char_t);
}
unsafe extern "C" {
    pub fn label_size_text(label: *mut Label, text: *const char_t);
}
unsafe extern "C" {
    pub fn label_font(label: *mut Label, font: *const Font);
}
unsafe extern "C" {
    pub fn label_get_font(label: *const Label) -> *const Font;
}
unsafe extern "C" {
    pub fn label_style_over(label: *mut Label, fstyle: u32);
}
unsafe extern "C" {
    pub fn label_multiline(label: *mut Label, multiline: bool_t);
}
unsafe extern "C" {
    pub fn label_align(label: *mut Label, align: align_t);
}
unsafe extern "C" {
    pub fn label_color(label: *mut Label, color: color_t);
}
unsafe extern "C" {
    pub fn label_color_over(label: *mut Label, color: color_t);
}
unsafe extern "C" {
    pub fn label_bgcolor(label: *mut Label, color: color_t);
}
unsafe extern "C" {
    pub fn label_bgcolor_over(label: *mut Label, color: color_t);
}
unsafe extern "C" {
    pub fn layout_create(ncols: u32, nrows: u32) -> *mut Layout;
}
unsafe extern "C" {
    pub fn layout_cell(layout: *mut Layout, col: u32, row: u32) -> *mut Cell;
}
unsafe extern "C" {
    pub fn layout_control(layout: *mut Layout, col: u32, row: u32) -> *mut GuiControl;
}
unsafe extern "C" {
    pub fn layout_label(layout: *mut Layout, label: *mut Label, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_button(layout: *mut Layout, button: *mut Button, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_popup(layout: *mut Layout, popup: *mut PopUp, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_edit(layout: *mut Layout, edit: *mut Edit, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_combo(layout: *mut Layout, combo: *mut Combo, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_listbox(layout: *mut Layout, list: *mut ListBox, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_updown(layout: *mut Layout, updown: *mut UpDown, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_slider(layout: *mut Layout, slider: *mut Slider, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_progress(layout: *mut Layout, progress: *mut Progress, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_view(layout: *mut Layout, view: *mut View, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_textview(layout: *mut Layout, view: *mut TextView, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_webview(layout: *mut Layout, view: *mut WebView, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_imageview(layout: *mut Layout, view: *mut ImageView, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_tableview(layout: *mut Layout, view: *mut TableView, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_splitview(layout: *mut Layout, view: *mut SplitView, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_panel(layout: *mut Layout, panel: *mut Panel, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_panel_replace(layout: *mut Layout, panel: *mut Panel, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_layout(layout: *mut Layout, sublayout: *mut Layout, col: u32, row: u32);
}
unsafe extern "C" {
    pub fn layout_get_label(layout: *mut Layout, col: u32, row: u32) -> *mut Label;
}
unsafe extern "C" {
    pub fn layout_get_button(layout: *mut Layout, col: u32, row: u32) -> *mut Button;
}
unsafe extern "C" {
    pub fn layout_get_popup(layout: *mut Layout, col: u32, row: u32) -> *mut PopUp;
}
unsafe extern "C" {
    pub fn layout_get_edit(layout: *mut Layout, col: u32, row: u32) -> *mut Edit;
}
unsafe extern "C" {
    pub fn layout_get_combo(layout: *mut Layout, col: u32, row: u32) -> *mut Combo;
}
unsafe extern "C" {
    pub fn layout_get_listbox(layout: *mut Layout, col: u32, row: u32) -> *mut ListBox;
}
unsafe extern "C" {
    pub fn layout_get_updown(layout: *mut Layout, col: u32, row: u32) -> *mut UpDown;
}
unsafe extern "C" {
    pub fn layout_get_slider(layout: *mut Layout, col: u32, row: u32) -> *mut Slider;
}
unsafe extern "C" {
    pub fn layout_get_progress(layout: *mut Layout, col: u32, row: u32) -> *mut Progress;
}
unsafe extern "C" {
    pub fn layout_get_view(layout: *mut Layout, col: u32, row: u32) -> *mut View;
}
unsafe extern "C" {
    pub fn layout_get_textview(layout: *mut Layout, col: u32, row: u32) -> *mut TextView;
}
unsafe extern "C" {
    pub fn layout_get_webview(layout: *mut Layout, col: u32, row: u32) -> *mut WebView;
}
unsafe extern "C" {
    pub fn layout_get_imageview(layout: *mut Layout, col: u32, row: u32) -> *mut ImageView;
}
unsafe extern "C" {
    pub fn layout_get_tableview(layout: *mut Layout, col: u32, row: u32) -> *mut TableView;
}
unsafe extern "C" {
    pub fn layout_get_splitview(layout: *mut Layout, col: u32, row: u32) -> *mut SplitView;
}
unsafe extern "C" {
    pub fn layout_get_panel(layout: *mut Layout, col: u32, row: u32) -> *mut Panel;
}
unsafe extern "C" {
    pub fn layout_get_layout(layout: *mut Layout, col: u32, row: u32) -> *mut Layout;
}
unsafe extern "C" {
    pub fn layout_ncols(layout: *const Layout) -> u32;
}
unsafe extern "C" {
    pub fn layout_nrows(layout: *const Layout) -> u32;
}
unsafe extern "C" {
    pub fn layout_insert_col(layout: *mut Layout, col: u32);
}
unsafe extern "C" {
    pub fn layout_insert_row(layout: *mut Layout, row: u32);
}
unsafe extern "C" {
    pub fn layout_remove_col(layout: *mut Layout, col: u32);
}
unsafe extern "C" {
    pub fn layout_remove_row(layout: *mut Layout, row: u32);
}
unsafe extern "C" {
    pub fn layout_taborder(layout: *mut Layout, order: gui_orient_t);
}
unsafe extern "C" {
    pub fn layout_tabstop(layout: *mut Layout, col: u32, row: u32, tabstop: bool_t);
}
unsafe extern "C" {
    pub fn layout_hsize(layout: *mut Layout, col: u32, width: real32_t);
}
unsafe extern "C" {
    pub fn layout_vsize(layout: *mut Layout, row: u32, height: real32_t);
}
unsafe extern "C" {
    pub fn layout_hmargin(layout: *mut Layout, col: u32, margin: real32_t);
}
unsafe extern "C" {
    pub fn layout_vmargin(layout: *mut Layout, row: u32, margin: real32_t);
}
unsafe extern "C" {
    pub fn layout_hexpand(layout: *mut Layout, col: u32);
}
unsafe extern "C" {
    pub fn layout_hexpand2(layout: *mut Layout, col1: u32, col2: u32, exp: real32_t);
}
unsafe extern "C" {
    pub fn layout_hexpand3(
        layout: *mut Layout,
        col1: u32,
        col2: u32,
        col3: u32,
        exp1: real32_t,
        exp2: real32_t,
    );
}
unsafe extern "C" {
    pub fn layout_vexpand(layout: *mut Layout, row: u32);
}
unsafe extern "C" {
    pub fn layout_vexpand2(layout: *mut Layout, row1: u32, row2: u32, exp: real32_t);
}
unsafe extern "C" {
    pub fn layout_vexpand3(
        layout: *mut Layout,
        row1: u32,
        row2: u32,
        row3: u32,
        exp1: real32_t,
        exp2: real32_t,
    );
}
unsafe extern "C" {
    pub fn layout_halign(layout: *mut Layout, col: u32, row: u32, align: align_t);
}
unsafe extern "C" {
    pub fn layout_valign(layout: *mut Layout, col: u32, row: u32, align: align_t);
}
unsafe extern "C" {
    pub fn layout_show_col(layout: *mut Layout, col: u32, visible: bool_t);
}
unsafe extern "C" {
    pub fn layout_show_row(layout: *mut Layout, row: u32, visible: bool_t);
}
unsafe extern "C" {
    pub fn layout_margin(layout: *mut Layout, mall: real32_t);
}
unsafe extern "C" {
    pub fn layout_margin2(layout: *mut Layout, mtb: real32_t, mlr: real32_t);
}
unsafe extern "C" {
    pub fn layout_margin4(
        layout: *mut Layout,
        mt: real32_t,
        mr: real32_t,
        mb: real32_t,
        ml: real32_t,
    );
}
unsafe extern "C" {
    pub fn layout_bgcolor(layout: *mut Layout, color: color_t);
}
unsafe extern "C" {
    pub fn layout_skcolor(layout: *mut Layout, color: color_t);
}
unsafe extern "C" {
    pub fn layout_update(layout: *const Layout);
}
unsafe extern "C" {
    pub fn layout_dbind_imp(
        layout: *mut Layout,
        listener: *mut Listener,
        type_: *const char_t,
        size: u16,
    );
}
unsafe extern "C" {
    pub fn layout_dbind_obj_imp(
        layout: *mut Layout,
        obj: *mut ::libc::c_void,
        type_: *const char_t,
    );
}
unsafe extern "C" {
    pub fn layout_dbind_get_obj_imp(
        layout: *mut Layout,
        type_: *const char_t,
    ) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn layout_dbind_update_imp(
        layout: *mut Layout,
        type_: *const char_t,
        size: u16,
        mname: *const char_t,
        mtype: *const char_t,
        moffset: u16,
        msize: u16,
    );
}
unsafe extern "C" {
    pub fn listbox_create() -> *mut ListBox;
}
unsafe extern "C" {
    pub fn listbox_OnDown(listbox: *mut ListBox, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn listbox_OnSelect(listbox: *mut ListBox, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn listbox_size(listbox: *mut ListBox, size: S2Df);
}
unsafe extern "C" {
    pub fn listbox_checkbox(listbox: *mut ListBox, show: bool_t);
}
unsafe extern "C" {
    pub fn listbox_multisel(listbox: *mut ListBox, multisel: bool_t);
}
unsafe extern "C" {
    pub fn listbox_add_elem(listbox: *mut ListBox, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn listbox_set_elem(
        listbox: *mut ListBox,
        index: u32,
        text: *const char_t,
        image: *const Image,
    );
}
unsafe extern "C" {
    pub fn listbox_del_elem(listbox: *mut ListBox, index: u32);
}
unsafe extern "C" {
    pub fn listbox_font(listbox: *mut ListBox, font: *const Font);
}
unsafe extern "C" {
    pub fn listbox_clear(listbox: *mut ListBox);
}
unsafe extern "C" {
    pub fn listbox_color(listbox: *mut ListBox, index: u32, color: color_t);
}
unsafe extern "C" {
    pub fn listbox_select(listbox: *mut ListBox, index: u32, select: bool_t);
}
unsafe extern "C" {
    pub fn listbox_check(listbox: *mut ListBox, index: u32, check: bool_t);
}
unsafe extern "C" {
    pub fn listbox_count(listbox: *const ListBox) -> u32;
}
unsafe extern "C" {
    pub fn listbox_text(listbox: *const ListBox, index: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn listbox_selected(listbox: *const ListBox, index: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn listbox_checked(listbox: *const ListBox, index: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn listbox_get_selected(listbox: *const ListBox) -> u32;
}
unsafe extern "C" {
    pub fn listbox_get_row_height(listbox: *const ListBox) -> real32_t;
}
unsafe extern "C" {
    pub fn menu_create() -> *mut Menu;
}
unsafe extern "C" {
    pub fn menu_destroy(menu: *mut *mut Menu);
}
unsafe extern "C" {
    pub fn menu_add_item(menu: *mut Menu, item: *mut MenuItem);
}
unsafe extern "C" {
    pub fn menu_ins_item(menu: *mut Menu, pos: u32, item: *mut MenuItem);
}
unsafe extern "C" {
    pub fn menu_del_item(menu: *mut Menu, pos: u32);
}
unsafe extern "C" {
    pub fn menu_launch(menu: *mut Menu, window: *mut Window, position: V2Df);
}
unsafe extern "C" {
    pub fn menu_off_items(menu: *mut Menu);
}
unsafe extern "C" {
    pub fn menu_count(menu: *const Menu) -> u32;
}
unsafe extern "C" {
    pub fn menu_get_item(menu: *mut Menu, index: u32) -> *mut MenuItem;
}
unsafe extern "C" {
    pub fn menu_get_citem(menu: *const Menu, index: u32) -> *const MenuItem;
}
unsafe extern "C" {
    pub fn menu_is_menubar(menu: *const Menu) -> bool_t;
}
unsafe extern "C" {
    pub fn menu_imp(menu: *const Menu) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn menuitem_create() -> *mut MenuItem;
}
unsafe extern "C" {
    pub fn menuitem_separator() -> *mut MenuItem;
}
unsafe extern "C" {
    pub fn menuitem_OnClick(item: *mut MenuItem, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn menuitem_enabled(item: *mut MenuItem, enabled: bool_t);
}
unsafe extern "C" {
    pub fn menuitem_visible(item: *mut MenuItem, visible: bool_t);
}
unsafe extern "C" {
    pub fn menuitem_state(item: *mut MenuItem, state: gui_state_t);
}
unsafe extern "C" {
    pub fn menuitem_text(item: *mut MenuItem, text: *const char_t);
}
unsafe extern "C" {
    pub fn menuitem_image(item: *mut MenuItem, image: *const Image);
}
unsafe extern "C" {
    pub fn menuitem_key(item: *mut MenuItem, key: vkey_t, modifiers: u32);
}
unsafe extern "C" {
    pub fn menuitem_submenu(item: *mut MenuItem, submenu: *mut *mut Menu);
}
unsafe extern "C" {
    pub fn menuitem_get_text(item: *const MenuItem) -> *const char_t;
}
unsafe extern "C" {
    pub fn menuitem_get_image(item: *const MenuItem) -> *const Image;
}
unsafe extern "C" {
    pub fn menuitem_get_separator(item: *const MenuItem) -> bool_t;
}
unsafe extern "C" {
    pub fn menuitem_get_enabled(item: *const MenuItem) -> bool_t;
}
unsafe extern "C" {
    pub fn menuitem_get_visible(item: *const MenuItem) -> bool_t;
}
unsafe extern "C" {
    pub fn menuitem_get_state(item: *const MenuItem) -> gui_state_t;
}
unsafe extern "C" {
    pub fn menuitem_get_submenu(item: *const MenuItem) -> *mut Menu;
}
unsafe extern "C" {
    pub fn panel_create() -> *mut Panel;
}
unsafe extern "C" {
    pub fn panel_scroll(hscroll: bool_t, vscroll: bool_t) -> *mut Panel;
}
unsafe extern "C" {
    pub fn panel_custom(hscroll: bool_t, vscroll: bool_t, border: bool_t) -> *mut Panel;
}
unsafe extern "C" {
    pub fn panel_data_imp(
        panel: *mut Panel,
        data: *mut *mut ::libc::c_void,
        func_destroy_data: FPtr_destroy,
    );
}
unsafe extern "C" {
    pub fn panel_get_data_imp(panel: *const Panel) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn panel_size(panel: *mut Panel, size: S2Df);
}
unsafe extern "C" {
    pub fn panel_layout(panel: *mut Panel, layout: *mut Layout) -> u32;
}
unsafe extern "C" {
    pub fn panel_get_layout(panel: *mut Panel, index: u32) -> *mut Layout;
}
unsafe extern "C" {
    pub fn panel_visible_layout(panel: *mut Panel, index: u32);
}
unsafe extern "C" {
    pub fn panel_update(panel: *mut Panel);
}
unsafe extern "C" {
    pub fn panel_scroll_width(panel: *const Panel) -> real32_t;
}
unsafe extern "C" {
    pub fn panel_scroll_height(panel: *const Panel) -> real32_t;
}
unsafe extern "C" {
    pub fn popup_create() -> *mut PopUp;
}
unsafe extern "C" {
    pub fn popup_OnSelect(popup: *mut PopUp, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn popup_tooltip(popup: *mut PopUp, text: *const char_t);
}
unsafe extern "C" {
    pub fn popup_add_elem(popup: *mut PopUp, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn popup_set_elem(popup: *mut PopUp, index: u32, text: *const char_t, image: *const Image);
}
unsafe extern "C" {
    pub fn popup_clear(popup: *mut PopUp);
}
unsafe extern "C" {
    pub fn popup_count(popup: *const PopUp) -> u32;
}
unsafe extern "C" {
    pub fn popup_list_height(popup: *mut PopUp, elems: u32);
}
unsafe extern "C" {
    pub fn popup_selected(popup: *mut PopUp, index: u32);
}
unsafe extern "C" {
    pub fn popup_get_selected(popup: *const PopUp) -> u32;
}
unsafe extern "C" {
    pub fn popup_get_text(popup: *const PopUp, index: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn progress_create() -> *mut Progress;
}
unsafe extern "C" {
    pub fn progress_min_width(progress: *mut Progress, width: real32_t);
}
unsafe extern "C" {
    pub fn progress_undefined(progress: *mut Progress, running: bool_t);
}
unsafe extern "C" {
    pub fn progress_value(progress: *mut Progress, value: real32_t);
}
unsafe extern "C" {
    pub fn slider_create() -> *mut Slider;
}
unsafe extern "C" {
    pub fn slider_vertical() -> *mut Slider;
}
unsafe extern "C" {
    pub fn slider_OnMoved(slider: *mut Slider, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn slider_min_width(slider: *mut Slider, width: real32_t);
}
unsafe extern "C" {
    pub fn slider_tooltip(slider: *mut Slider, text: *const char_t);
}
unsafe extern "C" {
    pub fn slider_steps(slider: *mut Slider, steps: u32);
}
unsafe extern "C" {
    pub fn slider_value(slider: *mut Slider, value: real32_t);
}
unsafe extern "C" {
    pub fn slider_get_value(slider: *const Slider) -> real32_t;
}
unsafe extern "C" {
    pub fn splitview_horizontal() -> *mut SplitView;
}
unsafe extern "C" {
    pub fn splitview_vertical() -> *mut SplitView;
}
unsafe extern "C" {
    pub fn splitview_view(split: *mut SplitView, view: *mut View, tabstop: bool_t);
}
unsafe extern "C" {
    pub fn splitview_textview(split: *mut SplitView, view: *mut TextView, tabstop: bool_t);
}
unsafe extern "C" {
    pub fn splitview_webview(split: *mut SplitView, view: *mut WebView, tabstop: bool_t);
}
unsafe extern "C" {
    pub fn splitview_tableview(split: *mut SplitView, view: *mut TableView, tabstop: bool_t);
}
unsafe extern "C" {
    pub fn splitview_splitview(split: *mut SplitView, view: *mut SplitView);
}
unsafe extern "C" {
    pub fn splitview_panel(split: *mut SplitView, panel: *mut Panel);
}
unsafe extern "C" {
    pub fn splitview_pos(split: *mut SplitView, mode: split_mode_t, pos: real32_t);
}
unsafe extern "C" {
    pub fn splitview_get_pos(split: *const SplitView, mode: split_mode_t) -> real32_t;
}
unsafe extern "C" {
    pub fn splitview_visible0(split: *mut SplitView, visible: bool_t);
}
unsafe extern "C" {
    pub fn splitview_visible1(split: *mut SplitView, visible: bool_t);
}
unsafe extern "C" {
    pub fn splitview_minsize0(split: *mut SplitView, size: real32_t);
}
unsafe extern "C" {
    pub fn splitview_minsize1(split: *mut SplitView, size: real32_t);
}
unsafe extern "C" {
    pub fn tableview_create() -> *mut TableView;
}
unsafe extern "C" {
    pub fn tableview_OnData(view: *mut TableView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn tableview_OnSelect(view: *mut TableView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn tableview_OnRowClick(view: *mut TableView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn tableview_OnHeaderClick(view: *mut TableView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn tableview_font(view: *mut TableView, font: *const Font);
}
unsafe extern "C" {
    pub fn tableview_size(view: *mut TableView, size: S2Df);
}
unsafe extern "C" {
    pub fn tableview_new_column_text(view: *mut TableView) -> u32;
}
unsafe extern "C" {
    pub fn tableview_column_width(view: *mut TableView, column_id: u32, width: real32_t);
}
unsafe extern "C" {
    pub fn tableview_column_limits(
        view: *mut TableView,
        column_id: u32,
        min: real32_t,
        max: real32_t,
    );
}
unsafe extern "C" {
    pub fn tableview_column_align(view: *mut TableView, column_id: u32, align: align_t);
}
unsafe extern "C" {
    pub fn tableview_column_resizable(view: *mut TableView, column_id: u32, resizable: bool_t);
}
unsafe extern "C" {
    pub fn tableview_column_freeze(view: *mut TableView, last_column_id: u32);
}
unsafe extern "C" {
    pub fn tableview_header_title(view: *mut TableView, column_id: u32, text: *const char_t);
}
unsafe extern "C" {
    pub fn tableview_header_align(view: *mut TableView, column_id: u32, align: align_t);
}
unsafe extern "C" {
    pub fn tableview_header_indicator(view: *mut TableView, column_id: u32, indicator: u32);
}
unsafe extern "C" {
    pub fn tableview_header_visible(view: *mut TableView, visible: bool_t);
}
unsafe extern "C" {
    pub fn tableview_header_clickable(view: *mut TableView, clickable: bool_t);
}
unsafe extern "C" {
    pub fn tableview_header_resizable(view: *mut TableView, resizable: bool_t);
}
unsafe extern "C" {
    pub fn tableview_header_height(view: *mut TableView, height: real32_t);
}
unsafe extern "C" {
    pub fn tableview_row_height(view: *mut TableView, height: real32_t);
}
unsafe extern "C" {
    pub fn tableview_hkey_scroll(view: *mut TableView, force_column: bool_t, scroll: real32_t);
}
unsafe extern "C" {
    pub fn tableview_multisel(view: *mut TableView, multisel: bool_t, preserve: bool_t);
}
unsafe extern "C" {
    pub fn tableview_grid(view: *mut TableView, hlines: bool_t, vlines: bool_t);
}
unsafe extern "C" {
    pub fn tableview_update(view: *mut TableView);
}
unsafe extern "C" {
    pub fn tableview_select(view: *mut TableView, rows: *const u32, n: u32);
}
unsafe extern "C" {
    pub fn tableview_deselect(view: *mut TableView, rows: *const u32, n: u32);
}
unsafe extern "C" {
    pub fn tableview_deselect_all(view: *mut TableView);
}
unsafe extern "C" {
    pub fn tableview_selected(view: *const TableView) -> *const ArrStuint32_t;
}
unsafe extern "C" {
    pub fn tableview_focus_row(view: *mut TableView, row: u32, align: align_t);
}
unsafe extern "C" {
    pub fn tableview_get_focus_row(view: *const TableView) -> u32;
}
unsafe extern "C" {
    pub fn tableview_scroll_visible(view: *mut TableView, horizontal: bool_t, vertical: bool_t);
}
unsafe extern "C" {
    pub fn textview_create() -> *mut TextView;
}
unsafe extern "C" {
    pub fn textview_OnFilter(view: *mut TextView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn textview_OnFocus(view: *mut TextView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn textview_size(view: *mut TextView, size: S2Df);
}
unsafe extern "C" {
    pub fn textview_clear(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_printf(view: *mut TextView, format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn textview_writef(view: *mut TextView, text: *const char_t);
}
unsafe extern "C" {
    pub fn textview_cpos_printf(view: *mut TextView, format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn textview_cpos_writef(view: *mut TextView, text: *const char_t);
}
unsafe extern "C" {
    pub fn textview_rtf(view: *mut TextView, rtf_in: *mut Stream);
}
unsafe extern "C" {
    pub fn textview_units(view: *mut TextView, units: u32);
}
unsafe extern "C" {
    pub fn textview_family(view: *mut TextView, family: *const char_t);
}
unsafe extern "C" {
    pub fn textview_fsize(view: *mut TextView, size: real32_t);
}
unsafe extern "C" {
    pub fn textview_fstyle(view: *mut TextView, fstyle: u32);
}
unsafe extern "C" {
    pub fn textview_color(view: *mut TextView, color: color_t);
}
unsafe extern "C" {
    pub fn textview_bgcolor(view: *mut TextView, color: color_t);
}
unsafe extern "C" {
    pub fn textview_pgcolor(view: *mut TextView, color: color_t);
}
unsafe extern "C" {
    pub fn textview_halign(view: *mut TextView, align: align_t);
}
unsafe extern "C" {
    pub fn textview_lspacing(view: *mut TextView, scale: real32_t);
}
unsafe extern "C" {
    pub fn textview_bfspace(view: *mut TextView, space: real32_t);
}
unsafe extern "C" {
    pub fn textview_afspace(view: *mut TextView, space: real32_t);
}
unsafe extern "C" {
    pub fn textview_apply_all(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_apply_select(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_scroll_visible(view: *mut TextView, horizontal: bool_t, vertical: bool_t);
}
unsafe extern "C" {
    pub fn textview_editable(view: *mut TextView, is_editable: bool_t);
}
unsafe extern "C" {
    pub fn textview_select(view: *mut TextView, start: i32, end: i32);
}
unsafe extern "C" {
    pub fn textview_show_select(view: *mut TextView, show: bool_t);
}
unsafe extern "C" {
    pub fn textview_del_select(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_scroll_caret(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_get_text(view: *const TextView) -> *const char_t;
}
unsafe extern "C" {
    pub fn textview_copy(view: *const TextView);
}
unsafe extern "C" {
    pub fn textview_cut(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_paste(view: *mut TextView);
}
unsafe extern "C" {
    pub fn textview_wrap(view: *mut TextView, wrap: bool_t);
}
unsafe extern "C" {
    pub fn webview_create() -> *mut WebView;
}
unsafe extern "C" {
    pub fn webview_OnFocus(view: *mut WebView, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn webview_size(view: *mut WebView, size: S2Df);
}
unsafe extern "C" {
    pub fn webview_navigate(view: *mut WebView, url: *const char_t);
}
unsafe extern "C" {
    pub fn webview_back(view: *mut WebView);
}
unsafe extern "C" {
    pub fn webview_forward(view: *mut WebView);
}
unsafe extern "C" {
    pub fn updown_create() -> *mut UpDown;
}
unsafe extern "C" {
    pub fn updown_OnClick(updown: *mut UpDown, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn updown_tooltip(updown: *mut UpDown, text: *const char_t);
}
unsafe extern "C" {
    pub fn view_create() -> *mut View;
}
unsafe extern "C" {
    pub fn view_scroll() -> *mut View;
}
unsafe extern "C" {
    pub fn view_custom(scroll: bool_t, border: bool_t) -> *mut View;
}
unsafe extern "C" {
    pub fn view_data_imp(
        view: *mut View,
        data: *mut *mut ::libc::c_void,
        func_destroy_data: FPtr_destroy,
    );
}
unsafe extern "C" {
    pub fn view_get_data_imp(view: *const View) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn view_size(view: *mut View, size: S2Df);
}
unsafe extern "C" {
    pub fn view_OnDraw(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnOverlay(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnSize(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnEnter(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnExit(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnMove(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnDown(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnUp(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnClick(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnDrag(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnWheel(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnKeyDown(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnKeyUp(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnFocus(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnResignFocus(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnAcceptFocus(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_OnScroll(view: *mut View, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn view_allow_tab(view: *mut View, allow: bool_t);
}
unsafe extern "C" {
    pub fn view_keybuf(view: *mut View, buffer: *mut KeyBuf);
}
unsafe extern "C" {
    pub fn view_get_size(view: *const View, size: *mut S2Df);
}
unsafe extern "C" {
    pub fn view_content_size(view: *mut View, size: S2Df, line: S2Df);
}
unsafe extern "C" {
    pub fn view_scroll_x(view: *mut View, pos: real32_t);
}
unsafe extern "C" {
    pub fn view_scroll_y(view: *mut View, pos: real32_t);
}
unsafe extern "C" {
    pub fn view_scroll_size(view: *const View, width: *mut real32_t, height: *mut real32_t);
}
unsafe extern "C" {
    pub fn view_scroll_visible(view: *mut View, horizontal: bool_t, vertical: bool_t);
}
unsafe extern "C" {
    pub fn view_viewport(view: *const View, pos: *mut V2Df, size: *mut S2Df);
}
unsafe extern "C" {
    pub fn view_point_scale(view: *const View, scale: *mut real32_t);
}
unsafe extern "C" {
    pub fn view_update(view: *mut View);
}
unsafe extern "C" {
    pub fn view_native(view: *mut View) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn window_create(flags: u32) -> *mut Window;
}
unsafe extern "C" {
    pub fn window_destroy(window: *mut *mut Window);
}
unsafe extern "C" {
    pub fn window_panel(window: *mut Window, panel: *mut Panel);
}
unsafe extern "C" {
    pub fn window_OnClose(window: *mut Window, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn window_OnMoved(window: *mut Window, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn window_OnResize(window: *mut Window, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn window_title(window: *mut Window, text: *const char_t);
}
unsafe extern "C" {
    pub fn window_show(window: *mut Window);
}
unsafe extern "C" {
    pub fn window_hide(window: *mut Window);
}
unsafe extern "C" {
    pub fn window_overlay(window: *mut Window, parent: *mut Window);
}
unsafe extern "C" {
    pub fn window_modal(window: *mut Window, parent: *mut Window) -> u32;
}
unsafe extern "C" {
    pub fn window_stop_modal(window: *mut Window, return_value: u32);
}
unsafe extern "C" {
    pub fn window_is_visible(window: *const Window) -> bool_t;
}
unsafe extern "C" {
    pub fn window_hotkey(window: *mut Window, key: vkey_t, modifiers: u32, listener: *mut Listener);
}
unsafe extern "C" {
    pub fn window_clear_hotkeys(window: *mut Window);
}
unsafe extern "C" {
    pub fn window_cycle_tabstop(window: *mut Window, cycle: bool_t);
}
unsafe extern "C" {
    pub fn window_next_tabstop(window: *mut Window) -> gui_focus_t;
}
unsafe extern "C" {
    pub fn window_previous_tabstop(window: *mut Window) -> gui_focus_t;
}
unsafe extern "C" {
    pub fn window_focus(window: *mut Window, control: *mut GuiControl) -> gui_focus_t;
}
unsafe extern "C" {
    pub fn window_get_focus(window: *mut Window) -> *mut GuiControl;
}
unsafe extern "C" {
    pub fn window_focus_info(window: *const Window, info: *mut FocusInfo);
}
unsafe extern "C" {
    pub fn window_update(window: *mut Window);
}
unsafe extern "C" {
    pub fn window_origin(window: *mut Window, origin: V2Df);
}
unsafe extern "C" {
    pub fn window_size(window: *mut Window, size: S2Df);
}
unsafe extern "C" {
    pub fn window_get_origin(window: *const Window) -> V2Df;
}
unsafe extern "C" {
    pub fn window_get_size(window: *const Window) -> S2Df;
}
unsafe extern "C" {
    pub fn window_get_client_size(window: *const Window) -> S2Df;
}
unsafe extern "C" {
    pub fn window_control_frame(window: *const Window, control: *const GuiControl) -> R2Df;
}
unsafe extern "C" {
    pub fn window_client_to_screen(window: *const Window, point: V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn window_defbutton(window: *mut Window, button: *mut Button);
}
unsafe extern "C" {
    pub fn window_cursor(
        window: *mut Window,
        cursor: gui_cursor_t,
        image: *const Image,
        hot_x: real32_t,
        hot_y: real32_t,
    );
}
unsafe extern "C" {
    pub fn window_imp(window: *const Window) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn color_rgb(r: u8, g: u8, b: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_rgba(r: u8, g: u8, b: u8, a: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_rgbaf(r: real32_t, g: real32_t, b: real32_t, a: real32_t) -> color_t;
}
unsafe extern "C" {
    pub fn color_hsbf(hue: real32_t, sat: real32_t, bright: real32_t) -> color_t;
}
unsafe extern "C" {
    pub fn color_red(r: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_green(g: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_blue(b: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_gray(l: u8) -> color_t;
}
unsafe extern "C" {
    pub fn color_bgr(bgr: u32) -> color_t;
}
unsafe extern "C" {
    pub fn color_html(html: *const char_t) -> color_t;
}
unsafe extern "C" {
    pub fn color_indexed(index: u16, color: color_t) -> color_t;
}
unsafe extern "C" {
    pub fn color_to_hsbf(
        color: color_t,
        hue: *mut real32_t,
        sat: *mut real32_t,
        bright: *mut real32_t,
    );
}
unsafe extern "C" {
    pub fn color_to_html(color: color_t, html: *mut char_t, size: u32);
}
unsafe extern "C" {
    pub fn color_get_rgb(color: color_t, r: *mut u8, g: *mut u8, b: *mut u8);
}
unsafe extern "C" {
    pub fn color_get_rgbf(color: color_t, r: *mut real32_t, g: *mut real32_t, b: *mut real32_t);
}
unsafe extern "C" {
    pub fn color_get_rgba(color: color_t, r: *mut u8, g: *mut u8, b: *mut u8, a: *mut u8);
}
unsafe extern "C" {
    pub fn color_get_rgbaf(
        color: color_t,
        r: *mut real32_t,
        g: *mut real32_t,
        b: *mut real32_t,
        a: *mut real32_t,
    );
}
unsafe extern "C" {
    pub fn color_get_alpha(color: color_t) -> u8;
}
unsafe extern "C" {
    pub fn color_set_alpha(color: color_t, alpha: u8) -> color_t;
}
unsafe extern "C" {
    pub static kCOLOR_TRANSPARENT: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_DEFAULT: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_BLACK: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_WHITE: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_RED: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_GREEN: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_BLUE: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_YELLOW: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_CYAN: color_t;
}
unsafe extern "C" {
    pub static kCOLOR_MAGENTA: color_t;
}
unsafe extern "C" {
    pub fn dctx_bitmap(width: u32, height: u32, format: pixformat_t) -> *mut DCtx;
}
unsafe extern "C" {
    pub fn dctx_image(ctx: *mut *mut DCtx) -> *mut Image;
}
unsafe extern "C" {
    pub fn draw_clear(ctx: *mut DCtx, color: color_t);
}
unsafe extern "C" {
    pub fn draw_matrixf(ctx: *mut DCtx, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn draw_matrixd(ctx: *mut DCtx, t2d: *const T2Dd);
}
unsafe extern "C" {
    pub fn draw_matrix_cartesianf(ctx: *mut DCtx, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn draw_matrix_cartesiand(ctx: *mut DCtx, t2d: *const T2Dd);
}
unsafe extern "C" {
    pub fn draw_antialias(ctx: *mut DCtx, on: bool_t);
}
unsafe extern "C" {
    pub fn draw_line(ctx: *mut DCtx, x0: real32_t, y0: real32_t, x1: real32_t, y1: real32_t);
}
unsafe extern "C" {
    pub fn draw_polyline(ctx: *mut DCtx, closed: bool_t, points: *const V2Df, n: u32);
}
unsafe extern "C" {
    pub fn draw_arc(
        ctx: *mut DCtx,
        x: real32_t,
        y: real32_t,
        radius: real32_t,
        start: real32_t,
        sweep: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_bezier(
        ctx: *mut DCtx,
        x0: real32_t,
        y0: real32_t,
        x1: real32_t,
        y1: real32_t,
        x2: real32_t,
        y2: real32_t,
        x3: real32_t,
        y3: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_line_color(ctx: *mut DCtx, color: color_t);
}
unsafe extern "C" {
    pub fn draw_line_fill(ctx: *mut DCtx);
}
unsafe extern "C" {
    pub fn draw_line_width(ctx: *mut DCtx, width: real32_t);
}
unsafe extern "C" {
    pub fn draw_line_cap(ctx: *mut DCtx, cap: linecap_t);
}
unsafe extern "C" {
    pub fn draw_line_join(ctx: *mut DCtx, join: linejoin_t);
}
unsafe extern "C" {
    pub fn draw_line_dash(ctx: *mut DCtx, pattern: *const real32_t, n: u32);
}
unsafe extern "C" {
    pub fn draw_rect(
        ctx: *mut DCtx,
        op: drawop_t,
        x: real32_t,
        y: real32_t,
        width: real32_t,
        height: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_rndrect(
        ctx: *mut DCtx,
        op: drawop_t,
        x: real32_t,
        y: real32_t,
        width: real32_t,
        height: real32_t,
        radius: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_circle(ctx: *mut DCtx, op: drawop_t, x: real32_t, y: real32_t, radius: real32_t);
}
unsafe extern "C" {
    pub fn draw_ellipse(
        ctx: *mut DCtx,
        op: drawop_t,
        x: real32_t,
        y: real32_t,
        radx: real32_t,
        rady: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_polygon(ctx: *mut DCtx, op: drawop_t, points: *const V2Df, n: u32);
}
unsafe extern "C" {
    pub fn draw_fill_color(ctx: *mut DCtx, color: color_t);
}
unsafe extern "C" {
    pub fn draw_fill_linear(
        ctx: *mut DCtx,
        color: *const color_t,
        stop: *const real32_t,
        n: u32,
        x0: real32_t,
        y0: real32_t,
        x1: real32_t,
        y1: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_fill_matrix(ctx: *mut DCtx, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn draw_fill_wrap(ctx: *mut DCtx, wrap: fillwrap_t);
}
unsafe extern "C" {
    pub fn draw_font(ctx: *mut DCtx, font: *const Font);
}
unsafe extern "C" {
    pub fn draw_text_color(ctx: *mut DCtx, color: color_t);
}
unsafe extern "C" {
    pub fn draw_text(ctx: *mut DCtx, text: *const char_t, x: real32_t, y: real32_t);
}
unsafe extern "C" {
    pub fn draw_text_single_line(ctx: *mut DCtx, text: *const char_t, x: real32_t, y: real32_t);
}
unsafe extern "C" {
    pub fn draw_text_path(
        ctx: *mut DCtx,
        op: drawop_t,
        text: *const char_t,
        x: real32_t,
        y: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_text_width(ctx: *mut DCtx, width: real32_t);
}
unsafe extern "C" {
    pub fn draw_text_trim(ctx: *mut DCtx, ellipsis: ellipsis_t);
}
unsafe extern "C" {
    pub fn draw_text_align(ctx: *mut DCtx, halign: align_t, valign: align_t);
}
unsafe extern "C" {
    pub fn draw_text_halign(ctx: *mut DCtx, halign: align_t);
}
unsafe extern "C" {
    pub fn draw_text_extents(
        ctx: *mut DCtx,
        text: *const char_t,
        refwidth: real32_t,
        width: *mut real32_t,
        height: *mut real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_image(ctx: *mut DCtx, image: *const Image, x: real32_t, y: real32_t);
}
unsafe extern "C" {
    pub fn draw_image_frame(
        ctx: *mut DCtx,
        image: *const Image,
        frame: u32,
        x: real32_t,
        y: real32_t,
    );
}
unsafe extern "C" {
    pub fn draw_image_align(ctx: *mut DCtx, halign: align_t, valign: align_t);
}
unsafe extern "C" {
    pub fn draw2d_start();
}
unsafe extern "C" {
    pub fn draw2d_finish();
}
unsafe extern "C" {
    pub fn draw2d_preferred_monospace(family: *const char_t);
}
unsafe extern "C" {
    pub fn draw_v2df(ctx: *mut DCtx, op: drawop_t, v2d: *const V2Df, radius: real32_t);
}
unsafe extern "C" {
    pub fn draw_v2dd(ctx: *mut DCtx, op: drawop_t, v2d: *const V2Dd, radius: real64_t);
}
unsafe extern "C" {
    pub fn draw_seg2df(ctx: *mut DCtx, seg: *const Seg2Df);
}
unsafe extern "C" {
    pub fn draw_seg2dd(ctx: *mut DCtx, seg: *const Seg2Dd);
}
unsafe extern "C" {
    pub fn draw_r2df(ctx: *mut DCtx, op: drawop_t, rect: *const R2Df);
}
unsafe extern "C" {
    pub fn draw_r2dd(ctx: *mut DCtx, op: drawop_t, rect: *const R2Dd);
}
unsafe extern "C" {
    pub fn draw_cir2df(ctx: *mut DCtx, op: drawop_t, cir: *const Cir2Df);
}
unsafe extern "C" {
    pub fn draw_cir2dd(ctx: *mut DCtx, op: drawop_t, cir: *const Cir2Dd);
}
unsafe extern "C" {
    pub fn draw_box2df(ctx: *mut DCtx, op: drawop_t, box_: *const Box2Df);
}
unsafe extern "C" {
    pub fn draw_box2dd(ctx: *mut DCtx, op: drawop_t, box_: *const Box2Dd);
}
unsafe extern "C" {
    pub fn draw_obb2df(ctx: *mut DCtx, op: drawop_t, obb: *const OBB2Df);
}
unsafe extern "C" {
    pub fn draw_obb2dd(ctx: *mut DCtx, op: drawop_t, obb: *const OBB2Dd);
}
unsafe extern "C" {
    pub fn draw_tri2df(ctx: *mut DCtx, op: drawop_t, tri: *const Tri2Df);
}
unsafe extern "C" {
    pub fn draw_tri2dd(ctx: *mut DCtx, op: drawop_t, tri: *const Tri2Dd);
}
unsafe extern "C" {
    pub fn draw_pol2df(ctx: *mut DCtx, op: drawop_t, pol: *const Pol2Df);
}
unsafe extern "C" {
    pub fn draw_pol2dd(ctx: *mut DCtx, op: drawop_t, pol: *const Pol2Dd);
}
unsafe extern "C" {
    pub fn font_create(family: *const char_t, size: real32_t, style: u32) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_system(size: real32_t, style: u32) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_monospace(size: real32_t, style: u32) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_with_style(font: *const Font, style: u32) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_with_width(font: *const Font, width: real32_t) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_with_xscale(font: *const Font, scale: real32_t) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_copy(font: *const Font) -> *mut Font;
}
unsafe extern "C" {
    pub fn font_destroy(font: *mut *mut Font);
}
unsafe extern "C" {
    pub fn font_equals(font1: *const Font, font2: *const Font) -> bool_t;
}
unsafe extern "C" {
    pub fn font_regular_size() -> real32_t;
}
unsafe extern "C" {
    pub fn font_small_size() -> real32_t;
}
unsafe extern "C" {
    pub fn font_mini_size() -> real32_t;
}
unsafe extern "C" {
    pub fn font_family(font: *const Font) -> *const char_t;
}
unsafe extern "C" {
    pub fn font_size(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_height(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_width(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_xscale(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_ascent(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_descent(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_leading(font: *const Font) -> real32_t;
}
unsafe extern "C" {
    pub fn font_is_monospace(font: *const Font) -> bool_t;
}
unsafe extern "C" {
    pub fn font_style(font: *const Font) -> u32;
}
unsafe extern "C" {
    pub fn font_extents(
        font: *const Font,
        text: *const char_t,
        refwidth: real32_t,
        width: *mut real32_t,
        height: *mut real32_t,
    );
}
unsafe extern "C" {
    pub fn font_exists_family(family: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn font_installed_families() -> *mut ArrPtString;
}
unsafe extern "C" {
    pub fn font_installed_monospace() -> *mut ArrPtString;
}
unsafe extern "C" {
    pub fn font_native(font: *const Font) -> *const ::libc::c_void;
}
unsafe extern "C" {
    pub fn image_from_pixels(
        width: u32,
        height: u32,
        format: pixformat_t,
        data: *const byte_t,
        palette: *const color_t,
        palsize: u32,
    ) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_from_pixbuf(pixbuf: *const Pixbuf, palette: *const Palette) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_from_file(pathname: *const char_t, error: *mut ferror_t) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_from_data(data: *const byte_t, size: u32) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_from_resource(pack: *const ResPack, id: ResId) -> *const Image;
}
unsafe extern "C" {
    pub fn image_copy(image: *const Image) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_trim(image: *const Image, x: u32, y: u32, width: u32, height: u32) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_rotate(
        image: *const Image,
        angle: real32_t,
        nsize: bool_t,
        background: color_t,
        t2d: *mut T2Df,
    ) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_scale(image: *const Image, nwidth: u32, nheight: u32) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_read(stm: *mut Stream) -> *mut Image;
}
unsafe extern "C" {
    pub fn image_to_file(
        image: *const Image,
        pathname: *const char_t,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn image_write(stream: *mut Stream, image: *const Image);
}
unsafe extern "C" {
    pub fn image_destroy(image: *mut *mut Image);
}
unsafe extern "C" {
    pub fn image_format(image: *const Image) -> pixformat_t;
}
unsafe extern "C" {
    pub fn image_width(image: *const Image) -> u32;
}
unsafe extern "C" {
    pub fn image_height(image: *const Image) -> u32;
}
unsafe extern "C" {
    pub fn image_pixels(image: *const Image, format: pixformat_t) -> *mut Pixbuf;
}
unsafe extern "C" {
    pub fn image_codec(image: *const Image, codec: codec_t) -> bool_t;
}
unsafe extern "C" {
    pub fn image_get_codec(image: *const Image) -> codec_t;
}
unsafe extern "C" {
    pub fn image_num_frames(image: *const Image) -> u32;
}
unsafe extern "C" {
    pub fn image_frame_length(image: *const Image, findex: u32) -> real32_t;
}
unsafe extern "C" {
    pub fn image_data_imp(
        image: *mut Image,
        data: *mut *mut ::libc::c_void,
        func_destroy_data: FPtr_destroy,
    );
}
unsafe extern "C" {
    pub fn image_get_data_imp(image: *const Image) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn image_native(image: *const Image) -> *const ::libc::c_void;
}
unsafe extern "C" {
    pub fn palette_create(size: u32) -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_cga2(mode: bool_t, intense: bool_t) -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_ega4() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_rgb8() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_gray1() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_gray2() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_gray4() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_gray8() -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_binary(zero: color_t, one: color_t) -> *mut Palette;
}
unsafe extern "C" {
    pub fn palette_destroy(palette: *mut *mut Palette);
}
unsafe extern "C" {
    pub fn palette_size(palette: *const Palette) -> u32;
}
unsafe extern "C" {
    pub fn palette_colors(palette: *mut Palette) -> *mut color_t;
}
unsafe extern "C" {
    pub fn palette_ccolors(palette: *const Palette) -> *const color_t;
}
unsafe extern "C" {
    pub fn pixbuf_create(width: u32, height: u32, format: pixformat_t) -> *mut Pixbuf;
}
unsafe extern "C" {
    pub fn pixbuf_copy(pixbuf: *const Pixbuf) -> *mut Pixbuf;
}
unsafe extern "C" {
    pub fn pixbuf_trim(
        pixbuf: *const Pixbuf,
        x: u32,
        y: u32,
        width: u32,
        height: u32,
    ) -> *mut Pixbuf;
}
unsafe extern "C" {
    pub fn pixbuf_convert(
        pixbuf: *const Pixbuf,
        palette: *const Palette,
        oformat: pixformat_t,
    ) -> *mut Pixbuf;
}
unsafe extern "C" {
    pub fn pixbuf_destroy(pixbuf: *mut *mut Pixbuf);
}
unsafe extern "C" {
    pub fn pixbuf_format(pixbuf: *const Pixbuf) -> pixformat_t;
}
unsafe extern "C" {
    pub fn pixbuf_width(pixbuf: *const Pixbuf) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_height(pixbuf: *const Pixbuf) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_size(pixbuf: *const Pixbuf) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_dsize(pixbuf: *const Pixbuf) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_cdata(pixbuf: *const Pixbuf) -> *const byte_t;
}
unsafe extern "C" {
    pub fn pixbuf_data(pixbuf: *mut Pixbuf) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn pixbuf_format_bpp(format: pixformat_t) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_get(pixbuf: *const Pixbuf, x: u32, y: u32) -> u32;
}
unsafe extern "C" {
    pub fn pixbuf_set(pixbuf: *mut Pixbuf, x: u32, y: u32, value: u32);
}
unsafe extern "C" {
    pub fn box2df(minX: real32_t, minY: real32_t, maxX: real32_t, maxY: real32_t) -> Box2Df;
}
unsafe extern "C" {
    pub fn box2dd(minX: real64_t, minY: real64_t, maxX: real64_t, maxY: real64_t) -> Box2Dd;
}
unsafe extern "C" {
    pub fn box2d_from_pointsf(p: *const V2Df, n: u32) -> Box2Df;
}
unsafe extern "C" {
    pub fn box2d_from_pointsd(p: *const V2Dd, n: u32) -> Box2Dd;
}
unsafe extern "C" {
    pub fn box2d_centerf(box_: *const Box2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn box2d_centerd(box_: *const Box2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn box2d_addf(box_: *mut Box2Df, p: *const V2Df);
}
unsafe extern "C" {
    pub fn box2d_addd(box_: *mut Box2Dd, p: *const V2Dd);
}
unsafe extern "C" {
    pub fn box2d_addnf(box_: *mut Box2Df, p: *const V2Df, n: u32);
}
unsafe extern "C" {
    pub fn box2d_addnd(box_: *mut Box2Dd, p: *const V2Dd, n: u32);
}
unsafe extern "C" {
    pub fn box2d_add_circlef(box_: *mut Box2Df, cir: *const Cir2Df);
}
unsafe extern "C" {
    pub fn box2d_add_circled(box_: *mut Box2Dd, cir: *const Cir2Dd);
}
unsafe extern "C" {
    pub fn box2d_mergef(dest: *mut Box2Df, src: *const Box2Df);
}
unsafe extern "C" {
    pub fn box2d_merged(dest: *mut Box2Dd, src: *const Box2Dd);
}
unsafe extern "C" {
    pub fn box2d_segmentsf(box_: *const Box2Df, segs: *mut Seg2Df);
}
unsafe extern "C" {
    pub fn box2d_segmentsd(box_: *const Box2Dd, segs: *mut Seg2Dd);
}
unsafe extern "C" {
    pub fn box2d_areaf(box_: *const Box2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn box2d_aread(box_: *const Box2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn box2d_is_nullf(box_: *const Box2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn box2d_is_nulld(box_: *const Box2Dd) -> bool_t;
}
unsafe extern "C" {
    pub static kBOX2D_NULLf: Box2Df;
}
unsafe extern "C" {
    pub static kBOX2D_NULLd: Box2Dd;
}
unsafe extern "C" {
    pub fn cir2df(x: real32_t, y: real32_t, r: real32_t) -> Cir2Df;
}
unsafe extern "C" {
    pub fn cir2dd(x: real64_t, y: real64_t, r: real64_t) -> Cir2Dd;
}
unsafe extern "C" {
    pub fn cir2d_from_boxf(box_: *const Box2Df) -> Cir2Df;
}
unsafe extern "C" {
    pub fn cir2d_from_boxd(box_: *const Box2Dd) -> Cir2Dd;
}
unsafe extern "C" {
    pub fn cir2d_from_pointsf(p: *const V2Df, n: u32) -> Cir2Df;
}
unsafe extern "C" {
    pub fn cir2d_from_pointsd(p: *const V2Dd, n: u32) -> Cir2Dd;
}
unsafe extern "C" {
    pub fn cir2d_minimumf(p: *const V2Df, n: u32) -> Cir2Df;
}
unsafe extern "C" {
    pub fn cir2d_minimumd(p: *const V2Dd, n: u32) -> Cir2Dd;
}
unsafe extern "C" {
    pub fn cir2d_areaf(cir: *const Cir2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn cir2d_aread(cir: *const Cir2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn cir2d_is_nullf(cir: *const Cir2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn cir2d_is_nulld(cir: *const Cir2Dd) -> bool_t;
}
unsafe extern "C" {
    pub static kCIR2D_NULLf: Cir2Df;
}
unsafe extern "C" {
    pub static kCIR2D_NULLd: Cir2Dd;
}
unsafe extern "C" {
    pub fn col2d_point_pointf(
        pnt1: *const V2Df,
        pnt2: *const V2Df,
        tol: real32_t,
        col: *mut Col2Df,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_point_pointd(
        pnt1: *const V2Dd,
        pnt2: *const V2Dd,
        tol: real64_t,
        col: *mut Col2Dd,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_segment_pointf(
        seg: *const Seg2Df,
        pnt: *const V2Df,
        tol: real32_t,
        col: *mut Col2Df,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_segment_pointd(
        seg: *const Seg2Dd,
        pnt: *const V2Dd,
        tol: real64_t,
        col: *mut Col2Dd,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_segment_segmentf(
        seg1: *const Seg2Df,
        seg2: *const Seg2Df,
        col: *mut Col2Df,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_segment_segmentd(
        seg1: *const Seg2Dd,
        seg2: *const Seg2Dd,
        col: *mut Col2Dd,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_pointf(cir: *const Cir2Df, pnt: *const V2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_pointd(cir: *const Cir2Dd, pnt: *const V2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_segmentf(
        cir: *const Cir2Df,
        seg: *const Seg2Df,
        col: *mut Col2Df,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_segmentd(
        cir: *const Cir2Dd,
        seg: *const Seg2Dd,
        col: *mut Col2Dd,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_circlef(
        cir1: *const Cir2Df,
        cir2: *const Cir2Df,
        col: *mut Col2Df,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_circle_circled(
        cir1: *const Cir2Dd,
        cir2: *const Cir2Dd,
        col: *mut Col2Dd,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_pointf(box_: *const Box2Df, pnt: *const V2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_pointd(box_: *const Box2Dd, pnt: *const V2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_segmentf(box_: *const Box2Df, seg: *const Seg2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_segmentd(box_: *const Box2Dd, seg: *const Seg2Dd, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_circlef(box_: *const Box2Df, cir: *const Cir2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_circled(box_: *const Box2Dd, cir: *const Cir2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_boxf(box1: *const Box2Df, box2: *const Box2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_box_boxd(box1: *const Box2Dd, box2: *const Box2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_pointf(obb: *const OBB2Df, pnt: *const V2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_pointd(obb: *const OBB2Dd, pnt: *const V2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_segmentf(obb: *const OBB2Df, seg: *const Seg2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_segmentd(obb: *const OBB2Dd, seg: *const Seg2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_circlef(obb: *const OBB2Df, cir: *const Cir2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_circled(obb: *const OBB2Dd, cir: *const Cir2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_boxf(obb: *const OBB2Df, box_: *const Box2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_boxd(obb: *const OBB2Dd, box_: *const Box2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_obbf(obb1: *const OBB2Df, obb2: *const OBB2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_obb_obbd(obb1: *const OBB2Dd, obb2: *const OBB2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_pointf(tri: *const Tri2Df, pnt: *const V2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_pointd(tri: *const Tri2Dd, pnt: *const V2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_segmentf(tri: *const Tri2Df, seg: *const Seg2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_segmentd(tri: *const Tri2Dd, seg: *const Seg2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_circlef(tri: *const Tri2Df, cir: *const Cir2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_circled(tri: *const Tri2Dd, cir: *const Cir2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_boxf(tri: *const Tri2Df, box_: *const Box2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_boxd(tri: *const Tri2Dd, box_: *const Box2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_obbf(tri: *const Tri2Df, obb: *const OBB2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_obbd(tri: *const Tri2Dd, obb: *const OBB2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_trif(tri1: *const Tri2Df, tri2: *const Tri2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_tri_trid(tri1: *const Tri2Dd, tri2: *const Tri2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_pointf(poly: *const Pol2Df, pnt: *const V2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_pointd(poly: *const Pol2Dd, pnt: *const V2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_segmentf(poly: *const Pol2Df, seg: *const Seg2Df, col: *mut Col2Df)
        -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_segmentd(poly: *const Pol2Dd, seg: *const Seg2Dd, col: *mut Col2Dd)
        -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_circlef(poly: *const Pol2Df, cir: *const Cir2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_circled(poly: *const Pol2Dd, cir: *const Cir2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_boxf(poly: *const Pol2Df, box_: *const Box2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_boxd(poly: *const Pol2Dd, box_: *const Box2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_obbf(poly: *const Pol2Df, obb: *const OBB2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_obbd(poly: *const Pol2Dd, obb: *const OBB2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_trif(poly: *const Pol2Df, tri: *const Tri2Df, col: *mut Col2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_trid(poly: *const Pol2Dd, tri: *const Tri2Dd, col: *mut Col2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_polyf(poly1: *const Pol2Df, poly2: *const Pol2Df, col: *mut Col2Df)
        -> bool_t;
}
unsafe extern "C" {
    pub fn col2d_poly_polyd(poly1: *const Pol2Dd, poly2: *const Pol2Dd, col: *mut Col2Dd)
        -> bool_t;
}
unsafe extern "C" {
    pub fn obb2d_createf(
        center: *const V2Df,
        width: real32_t,
        height: real32_t,
        angle: real32_t,
    ) -> *mut OBB2Df;
}
unsafe extern "C" {
    pub fn obb2d_created(
        center: *const V2Dd,
        width: real64_t,
        height: real64_t,
        angle: real64_t,
    ) -> *mut OBB2Dd;
}
unsafe extern "C" {
    pub fn obb2d_from_linef(p0: *const V2Df, p1: *const V2Df, thickness: real32_t) -> *mut OBB2Df;
}
unsafe extern "C" {
    pub fn obb2d_from_lined(p0: *const V2Dd, p1: *const V2Dd, thickness: real64_t) -> *mut OBB2Dd;
}
unsafe extern "C" {
    pub fn obb2d_from_pointsf(p: *const V2Df, n: u32) -> *mut OBB2Df;
}
unsafe extern "C" {
    pub fn obb2d_from_pointsd(p: *const V2Dd, n: u32) -> *mut OBB2Dd;
}
unsafe extern "C" {
    pub fn obb2d_copyf(obb: *const OBB2Df) -> *mut OBB2Df;
}
unsafe extern "C" {
    pub fn obb2d_copyd(obb: *const OBB2Dd) -> *mut OBB2Dd;
}
unsafe extern "C" {
    pub fn obb2d_destroyf(obb: *mut *mut OBB2Df);
}
unsafe extern "C" {
    pub fn obb2d_destroyd(obb: *mut *mut OBB2Dd);
}
unsafe extern "C" {
    pub fn obb2d_updatef(
        obb: *mut OBB2Df,
        center: *const V2Df,
        width: real32_t,
        height: real32_t,
        angle: real32_t,
    );
}
unsafe extern "C" {
    pub fn obb2d_updated(
        obb: *mut OBB2Dd,
        center: *const V2Dd,
        width: real64_t,
        height: real64_t,
        angle: real64_t,
    );
}
unsafe extern "C" {
    pub fn obb2d_movef(obb: *mut OBB2Df, offset_x: real32_t, offset_y: real32_t);
}
unsafe extern "C" {
    pub fn obb2d_moved(obb: *mut OBB2Dd, offset_x: real64_t, offset_y: real64_t);
}
unsafe extern "C" {
    pub fn obb2d_transformf(obb: *mut OBB2Df, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn obb2d_transformd(obb: *mut OBB2Dd, t2d: *const T2Dd);
}
unsafe extern "C" {
    pub fn obb2d_cornersf(obb: *const OBB2Df) -> *const V2Df;
}
unsafe extern "C" {
    pub fn obb2d_cornersd(obb: *const OBB2Dd) -> *const V2Dd;
}
unsafe extern "C" {
    pub fn obb2d_centerf(obb: *const OBB2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn obb2d_centerd(obb: *const OBB2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn obb2d_widthf(obb: *const OBB2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn obb2d_widthd(obb: *const OBB2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn obb2d_heightf(obb: *const OBB2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn obb2d_heightd(obb: *const OBB2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn obb2d_anglef(obb: *const OBB2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn obb2d_angled(obb: *const OBB2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn obb2d_areaf(obb: *const OBB2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn obb2d_aread(obb: *const OBB2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn obb2d_boxf(obb: *const OBB2Df) -> Box2Df;
}
unsafe extern "C" {
    pub fn obb2d_boxd(obb: *const OBB2Dd) -> Box2Dd;
}
unsafe extern "C" {
    pub fn pol2d_createf(points: *const V2Df, n: u32) -> *mut Pol2Df;
}
unsafe extern "C" {
    pub fn pol2d_created(points: *const V2Dd, n: u32) -> *mut Pol2Dd;
}
unsafe extern "C" {
    pub fn pol2d_convex_hullf(points: *const V2Df, n: u32) -> *mut Pol2Df;
}
unsafe extern "C" {
    pub fn pol2d_convex_hulld(points: *const V2Dd, n: u32) -> *mut Pol2Dd;
}
unsafe extern "C" {
    pub fn pol2d_copyf(pol: *const Pol2Df) -> *mut Pol2Df;
}
unsafe extern "C" {
    pub fn pol2d_copyd(pol: *const Pol2Dd) -> *mut Pol2Dd;
}
unsafe extern "C" {
    pub fn pol2d_destroyf(pol: *mut *mut Pol2Df);
}
unsafe extern "C" {
    pub fn pol2d_destroyd(pol: *mut *mut Pol2Dd);
}
unsafe extern "C" {
    pub fn pol2d_transformf(pol: *mut Pol2Df, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn pol2d_transformd(pol: *mut Pol2Dd, t2d: *const T2Dd);
}
unsafe extern "C" {
    pub fn pol2d_pointsf(pol: *const Pol2Df) -> *const V2Df;
}
unsafe extern "C" {
    pub fn pol2d_pointsd(pol: *const Pol2Dd) -> *const V2Dd;
}
unsafe extern "C" {
    pub fn pol2d_nf(pol: *const Pol2Df) -> u32;
}
unsafe extern "C" {
    pub fn pol2d_nd(pol: *const Pol2Dd) -> u32;
}
unsafe extern "C" {
    pub fn pol2d_areaf(pol: *const Pol2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn pol2d_aread(pol: *const Pol2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn pol2d_boxf(pol: *const Pol2Df) -> Box2Df;
}
unsafe extern "C" {
    pub fn pol2d_boxd(pol: *const Pol2Dd) -> Box2Dd;
}
unsafe extern "C" {
    pub fn pol2d_ccwf(pol: *const Pol2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn pol2d_ccwd(pol: *const Pol2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn pol2d_convexf(pol: *const Pol2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn pol2d_convexd(pol: *const Pol2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn pol2d_centroidf(pol: *const Pol2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn pol2d_centroidd(pol: *const Pol2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn pol2d_visual_centerf(pol: *const Pol2Df, norm_tol: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn pol2d_visual_centerd(pol: *const Pol2Dd, norm_tol: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn pol2d_trianglesf(pol: *const Pol2Df) -> *mut ArrStTri2Df;
}
unsafe extern "C" {
    pub fn pol2d_trianglesd(pol: *const Pol2Dd) -> *mut ArrStTri2Dd;
}
unsafe extern "C" {
    pub fn pol2d_convex_partitionf(pol: *const Pol2Df) -> *mut ArrPtPol2Df;
}
unsafe extern "C" {
    pub fn pol2d_convex_partitiond(pol: *const Pol2Dd) -> *mut ArrPtPol2Dd;
}
unsafe extern "C" {
    pub fn r2df(x: real32_t, y: real32_t, width: real32_t, height: real32_t) -> R2Df;
}
unsafe extern "C" {
    pub fn r2dd(x: real64_t, y: real64_t, width: real64_t, height: real64_t) -> R2Dd;
}
unsafe extern "C" {
    pub fn r2d_centerf(r2d: *const R2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn r2d_centerd(r2d: *const R2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn r2d_collidef(r2d1: *const R2Df, r2d2: *const R2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_collided(r2d1: *const R2Dd, r2d2: *const R2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_containsf(r2d: *const R2Df, x: real32_t, y: real32_t) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_containsd(r2d: *const R2Dd, x: real64_t, y: real64_t) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_clipf(viewport: *const R2Df, r2d: *const R2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_clipd(viewport: *const R2Dd, r2d: *const R2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn r2d_joinf(r2d: *mut R2Df, src: *const R2Df);
}
unsafe extern "C" {
    pub fn r2d_joind(r2d: *mut R2Dd, src: *const R2Dd);
}
unsafe extern "C" {
    pub static kR2D_ZEROf: R2Df;
}
unsafe extern "C" {
    pub static kR2D_ZEROd: R2Dd;
}
unsafe extern "C" {
    pub fn s2df(width: real32_t, height: real32_t) -> S2Df;
}
unsafe extern "C" {
    pub fn s2di(width: u32, height: u32) -> S2Df;
}
unsafe extern "C" {
    pub fn s2dd(width: real64_t, height: real64_t) -> S2Dd;
}
unsafe extern "C" {
    pub static kS2D_ZEROf: S2Df;
}
unsafe extern "C" {
    pub static kS2D_ZEROd: S2Dd;
}
unsafe extern "C" {
    pub fn seg2df(x0: real32_t, y0: real32_t, x1: real32_t, y1: real32_t) -> Seg2Df;
}
unsafe extern "C" {
    pub fn seg2dd(x0: real64_t, y0: real64_t, x1: real64_t, y1: real64_t) -> Seg2Dd;
}
unsafe extern "C" {
    pub fn seg2d_vf(p0: *const V2Df, p1: *const V2Df) -> Seg2Df;
}
unsafe extern "C" {
    pub fn seg2d_vd(p0: *const V2Dd, p1: *const V2Dd) -> Seg2Dd;
}
unsafe extern "C" {
    pub fn seg2d_lengthf(seg: *const Seg2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn seg2d_lengthd(seg: *const Seg2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn seg2d_sqlengthf(seg: *const Seg2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn seg2d_sqlengthd(seg: *const Seg2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn seg2d_evalf(seg: *const Seg2Df, t: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn seg2d_evald(seg: *const Seg2Dd, t: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn seg2d_close_paramf(seg: *const Seg2Df, pnt: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn seg2d_close_paramd(seg: *const Seg2Dd, pnt: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn seg2d_point_sqdistf(seg: *const Seg2Df, pnt: *const V2Df, t: *mut real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn seg2d_point_sqdistd(seg: *const Seg2Dd, pnt: *const V2Dd, t: *mut real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn seg2d_sqdistf(
        seg1: *const Seg2Df,
        seg2: *const Seg2Df,
        t1: *mut real32_t,
        t2: *mut real32_t,
    ) -> real32_t;
}
unsafe extern "C" {
    pub fn seg2d_sqdistd(
        seg1: *const Seg2Dd,
        seg2: *const Seg2Dd,
        t1: *mut real64_t,
        t2: *mut real64_t,
    ) -> real64_t;
}
unsafe extern "C" {
    pub fn t2d_tof(dest: *mut T2Df, src: *const T2Dd);
}
unsafe extern "C" {
    pub fn t2d_tod(dest: *mut T2Dd, src: *const T2Df);
}
unsafe extern "C" {
    pub fn t2d_movef(dest: *mut T2Df, src: *const T2Df, x: real32_t, y: real32_t);
}
unsafe extern "C" {
    pub fn t2d_moved(dest: *mut T2Dd, src: *const T2Dd, x: real64_t, y: real64_t);
}
unsafe extern "C" {
    pub fn t2d_rotatef(dest: *mut T2Df, src: *const T2Df, angle: real32_t);
}
unsafe extern "C" {
    pub fn t2d_rotated(dest: *mut T2Dd, src: *const T2Dd, angle: real64_t);
}
unsafe extern "C" {
    pub fn t2d_scalef(dest: *mut T2Df, src: *const T2Df, sx: real32_t, sy: real32_t);
}
unsafe extern "C" {
    pub fn t2d_scaled(dest: *mut T2Dd, src: *const T2Dd, sx: real64_t, sy: real64_t);
}
unsafe extern "C" {
    pub fn t2d_invfastf(dest: *mut T2Df, src: *const T2Df);
}
unsafe extern "C" {
    pub fn t2d_invfastd(dest: *mut T2Dd, src: *const T2Dd);
}
unsafe extern "C" {
    pub fn t2d_inversef(dest: *mut T2Df, src: *const T2Df);
}
unsafe extern "C" {
    pub fn t2d_inversed(dest: *mut T2Dd, src: *const T2Dd);
}
unsafe extern "C" {
    pub fn t2d_multf(dest: *mut T2Df, src1: *const T2Df, src2: *const T2Df);
}
unsafe extern "C" {
    pub fn t2d_multd(dest: *mut T2Dd, src1: *const T2Dd, src2: *const T2Dd);
}
unsafe extern "C" {
    pub fn t2d_vmultf(dest: *mut V2Df, t2d: *const T2Df, src: *const V2Df);
}
unsafe extern "C" {
    pub fn t2d_vmultd(dest: *mut V2Dd, t2d: *const T2Dd, src: *const V2Dd);
}
unsafe extern "C" {
    pub fn t2d_vmultnf(dest: *mut V2Df, t2d: *const T2Df, src: *const V2Df, n: u32);
}
unsafe extern "C" {
    pub fn t2d_vmultnd(dest: *mut V2Dd, t2d: *const T2Dd, src: *const V2Dd, n: u32);
}
unsafe extern "C" {
    pub fn t2d_decomposef(t2d: *const T2Df, pos: *mut V2Df, angle: *mut real32_t, sc: *mut V2Df);
}
unsafe extern "C" {
    pub fn t2d_decomposed(t2d: *const T2Dd, pos: *mut V2Dd, angle: *mut real64_t, sc: *mut V2Dd);
}
unsafe extern "C" {
    pub static mut kT2D_IDENTf: *const T2Df;
}
unsafe extern "C" {
    pub static mut kT2D_IDENTd: *const T2Dd;
}
unsafe extern "C" {
    pub fn tri2df(
        x0: real32_t,
        y0: real32_t,
        x1: real32_t,
        y1: real32_t,
        x2: real32_t,
        y2: real32_t,
    ) -> Tri2Df;
}
unsafe extern "C" {
    pub fn tri2dd(
        x0: real64_t,
        y0: real64_t,
        x1: real64_t,
        y1: real64_t,
        x2: real64_t,
        y2: real64_t,
    ) -> Tri2Dd;
}
unsafe extern "C" {
    pub fn tri2d_vf(p0: *const V2Df, p1: *const V2Df, p2: *const V2Df) -> Tri2Df;
}
unsafe extern "C" {
    pub fn tri2d_vd(p0: *const V2Dd, p1: *const V2Dd, p2: *const V2Dd) -> Tri2Dd;
}
unsafe extern "C" {
    pub fn tri2d_transformf(tri: *mut Tri2Df, t2d: *const T2Df);
}
unsafe extern "C" {
    pub fn tri2d_transformd(tri: *mut Tri2Dd, t2d: *const T2Dd);
}
unsafe extern "C" {
    pub fn tri2d_areaf(tri: *const Tri2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn tri2d_aread(tri: *const Tri2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn tri2d_ccwf(tri: *const Tri2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn tri2d_ccwd(tri: *const Tri2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn tri2d_centroidf(tri: *const Tri2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn tri2d_centroidd(tri: *const Tri2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2df(x: real32_t, y: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn v2dd(x: real64_t, y: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_tof(v: *const V2Dd) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_tod(v: *const V2Df) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_tofn(vf: *mut V2Df, vd: *const V2Dd, n: u32);
}
unsafe extern "C" {
    pub fn v2d_todn(vd: *mut V2Dd, vf: *const V2Df, n: u32);
}
unsafe extern "C" {
    pub fn v2d_addf(v1: *const V2Df, v2: *const V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_addd(v1: *const V2Dd, v2: *const V2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_subf(v1: *const V2Df, v2: *const V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_subd(v1: *const V2Dd, v2: *const V2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_mulf(v: *const V2Df, s: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_muld(v: *const V2Dd, s: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_fromf(v: *const V2Df, dir: *const V2Df, length: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_fromd(v: *const V2Dd, dir: *const V2Dd, length: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_midf(v1: *const V2Df, v2: *const V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_midd(v1: *const V2Dd, v2: *const V2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_unitf(v1: *const V2Df, v2: *const V2Df, dist: *mut real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_unitd(v1: *const V2Dd, v2: *const V2Dd, dist: *mut real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_unit_xyf(
        x1: real32_t,
        y1: real32_t,
        x2: real32_t,
        y2: real32_t,
        dist: *mut real32_t,
    ) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_unit_xyd(
        x1: real64_t,
        y1: real64_t,
        x2: real64_t,
        y2: real64_t,
        dist: *mut real64_t,
    ) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_perp_posf(v: *const V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_perp_posd(v: *const V2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_perp_negf(v: *const V2Df) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_perp_negd(v: *const V2Dd) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_from_anglef(a: real32_t) -> V2Df;
}
unsafe extern "C" {
    pub fn v2d_from_angled(a: real64_t) -> V2Dd;
}
unsafe extern "C" {
    pub fn v2d_normf(v: *mut V2Df) -> bool_t;
}
unsafe extern "C" {
    pub fn v2d_normd(v: *mut V2Dd) -> bool_t;
}
unsafe extern "C" {
    pub fn v2d_lengthf(v: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_lengthd(v: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_sqlengthf(v: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_sqlengthd(v: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_dotf(v1: *const V2Df, v2: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_dotd(v1: *const V2Dd, v2: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_distf(v1: *const V2Df, v2: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_distd(v1: *const V2Dd, v2: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_sqdistf(v1: *const V2Df, v2: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_sqdistd(v1: *const V2Dd, v2: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_anglef(v1: *const V2Df, v2: *const V2Df) -> real32_t;
}
unsafe extern "C" {
    pub fn v2d_angled(v1: *const V2Dd, v2: *const V2Dd) -> real64_t;
}
unsafe extern "C" {
    pub fn v2d_rotatef(v: *mut V2Df, a: real32_t);
}
unsafe extern "C" {
    pub fn v2d_rotated(v: *mut V2Dd, a: real64_t);
}
unsafe extern "C" {
    pub static kV2D_ZEROf: V2Df;
}
unsafe extern "C" {
    pub static kV2D_ZEROd: V2Dd;
}
unsafe extern "C" {
    pub static kV2D_Xf: V2Df;
}
unsafe extern "C" {
    pub static kV2D_Xd: V2Dd;
}
unsafe extern "C" {
    pub static kV2D_Yf: V2Df;
}
unsafe extern "C" {
    pub static kV2D_Yd: V2Dd;
}
unsafe extern "C" {
    pub fn core_start();
}
unsafe extern "C" {
    pub fn core_finish();
}
unsafe extern "C" {
    pub fn bhash_from_block(data: *const byte_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bhash_append_uint32(hash: u32, value: u32) -> u32;
}
unsafe extern "C" {
    pub fn bhash_append_real32(hash: u32, value: real32_t) -> u32;
}
unsafe extern "C" {
    pub fn buffer_create(size: u32) -> *mut Buffer;
}
unsafe extern "C" {
    pub fn buffer_with_data(data: *const byte_t, size: u32) -> *mut Buffer;
}
unsafe extern "C" {
    pub fn buffer_read(stream: *mut Stream) -> *mut Buffer;
}
unsafe extern "C" {
    pub fn buffer_destroy(buffer: *mut *mut Buffer);
}
unsafe extern "C" {
    pub fn buffer_size(buffer: *const Buffer) -> u32;
}
unsafe extern "C" {
    pub fn buffer_data(buffer: *mut Buffer) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn buffer_const(buffer: *const Buffer) -> *const byte_t;
}
unsafe extern "C" {
    pub fn buffer_write(stream: *mut Stream, buffer: *const Buffer);
}
unsafe extern "C" {
    pub fn clock_create(interval: real64_t) -> *mut Clock;
}
unsafe extern "C" {
    pub fn clock_destroy(clk: *mut *mut Clock);
}
unsafe extern "C" {
    pub fn clock_frame(
        clk: *mut Clock,
        prev_frame: *mut real64_t,
        curr_frame: *mut real64_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn clock_reset(clk: *mut Clock);
}
unsafe extern "C" {
    pub fn clock_elapsed(clk: *const Clock) -> real64_t;
}
unsafe extern "C" {
    pub fn date_system() -> Date;
}
unsafe extern "C" {
    pub fn date_pack(year: i16, month: u8, mday: u8, hour: u8, minute: u8, second: u8) -> Date;
}
unsafe extern "C" {
    pub fn date_add_seconds(date: *const Date, seconds: i32) -> Date;
}
unsafe extern "C" {
    pub fn date_add_minutes(date: *const Date, minutes: i32) -> Date;
}
unsafe extern "C" {
    pub fn date_add_hours(date: *const Date, hours: i32) -> Date;
}
unsafe extern "C" {
    pub fn date_add_days(date: *const Date, days: i32) -> Date;
}
unsafe extern "C" {
    pub fn date_year() -> i16;
}
unsafe extern "C" {
    pub fn date_cmp(date1: *const Date, date2: *const Date) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn date_ellapsed_seconds(from: *const Date, to: *const Date) -> i64;
}
unsafe extern "C" {
    pub fn date_between(date: *const Date, from: *const Date, to: *const Date) -> bool_t;
}
unsafe extern "C" {
    pub fn date_is_null(date: *const Date) -> bool_t;
}
unsafe extern "C" {
    pub fn date_is_valid(date: *const Date) -> bool_t;
}
unsafe extern "C" {
    pub fn date_weekday(date: *const Date) -> week_day_t;
}
unsafe extern "C" {
    pub fn date_format(date: *const Date, format: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub static mut kDATE_NULL: Date;
}
unsafe extern "C" {
    pub fn dbind_imp(
        type_: *const char_t,
        size: u16,
        mname: *const char_t,
        mtype: *const char_t,
        moffset: u16,
        msize: u16,
    ) -> dbindst_t;
}
unsafe extern "C" {
    pub fn dbind_enum_imp(
        type_: *const char_t,
        name: *const char_t,
        value: enum_t,
        alias: *const char_t,
    ) -> dbindst_t;
}
unsafe extern "C" {
    pub fn dbind_binary_imp(
        type_: *const char_t,
        func_copy: FPtr_copy,
        func_read: FPtr_read,
        func_write: FPtr_write,
        func_destroy: FPtr_destroy,
    ) -> dbindst_t;
}
unsafe extern "C" {
    pub fn dbind_alias_imp(
        type_: *const char_t,
        alias: *const char_t,
        type_size: u16,
        alias_size: u16,
    ) -> dbindst_t;
}
unsafe extern "C" {
    pub fn dbind_unreg_imp(type_: *const char_t) -> dbindst_t;
}
unsafe extern "C" {
    pub fn dbind_create_imp(type_: *const char_t) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn dbind_copy_imp(obj: *const byte_t, type_: *const char_t) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn dbind_init_imp(obj: *mut byte_t, type_: *const char_t);
}
unsafe extern "C" {
    pub fn dbind_remove_imp(obj: *mut byte_t, type_: *const char_t);
}
unsafe extern "C" {
    pub fn dbind_destroy_imp(obj: *mut *mut byte_t, type_: *const char_t);
}
unsafe extern "C" {
    pub fn dbind_destopt_imp(obj: *mut *mut byte_t, type_: *const char_t);
}
unsafe extern "C" {
    pub fn dbind_cmp_imp(
        obj1: *const byte_t,
        obj2: *const byte_t,
        type_: *const char_t,
    ) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn dbind_equ_imp(obj1: *const byte_t, obj2: *const byte_t, type_: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn dbind_read_imp(stm: *mut Stream, type_: *const char_t) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn dbind_write_imp(stm: *mut Stream, obj: *const ::libc::c_void, type_: *const char_t);
}
unsafe extern "C" {
    pub fn dbind_default_imp(type_: *const char_t, mname: *const char_t, value: *const byte_t);
}
unsafe extern "C" {
    pub fn dbind_range_imp(
        type_: *const char_t,
        mname: *const char_t,
        min: *const byte_t,
        max: *const byte_t,
    );
}
unsafe extern "C" {
    pub fn dbind_precision_imp(type_: *const char_t, mname: *const char_t, prec: *const byte_t);
}
unsafe extern "C" {
    pub fn dbind_increment_imp(type_: *const char_t, mname: *const char_t, incr: *const byte_t);
}
unsafe extern "C" {
    pub fn dbind_suffix_imp(type_: *const char_t, mname: *const char_t, suffix: *const char_t);
}
unsafe extern "C" {
    pub fn listener_imp(
        object: *mut ::libc::c_void,
        func_event_handler: FPtr_event_handler,
    ) -> *mut Listener;
}
unsafe extern "C" {
    pub fn listener_destroy(listener: *mut *mut Listener);
}
unsafe extern "C" {
    pub fn listener_update(listener: *mut *mut Listener, new_listener: *mut Listener);
}
unsafe extern "C" {
    pub fn listener_event_imp(
        listener: *mut Listener,
        type_: u32,
        sender: *mut ::libc::c_void,
        params: *mut ::libc::c_void,
        result: *mut ::libc::c_void,
        sender_type: *const char_t,
        params_type: *const char_t,
        result_type: *const char_t,
    );
}
unsafe extern "C" {
    pub fn listener_pass_event_imp(
        listener: *mut Listener,
        event: *mut Event,
        sender: *mut ::libc::c_void,
        sender_type: *const char_t,
    );
}
unsafe extern "C" {
    pub fn event_type(event: *const Event) -> u32;
}
unsafe extern "C" {
    pub fn event_sender_imp(event: *mut Event, type_: *const char_t) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn event_params_imp(event: *mut Event, type_: *const char_t) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn event_result_imp(event: *mut Event, type_: *const char_t) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn heap_start_mt();
}
unsafe extern "C" {
    pub fn heap_end_mt();
}
unsafe extern "C" {
    pub fn heap_verbose(verbose: bool_t);
}
unsafe extern "C" {
    pub fn heap_stats(stats: bool_t);
}
unsafe extern "C" {
    pub fn heap_leaks() -> bool_t;
}
unsafe extern "C" {
    pub fn heap_malloc_imp(size: u32, name: *const char_t, equal_sized: bool_t) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_calloc_imp(size: u32, name: *const char_t, equal_sized: bool_t) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_realloc(
        mem: *mut byte_t,
        size: u32,
        new_size: u32,
        name: *const char_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_aligned_malloc_imp(
        size: u32,
        align: u32,
        name: *const char_t,
        equal_sized: bool_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_aligned_calloc_imp(
        size: u32,
        align: u32,
        name: *const char_t,
        equal_sized: bool_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_aligned_realloc(
        mem: *mut byte_t,
        size: u32,
        new_size: u32,
        align: u32,
        name: *const char_t,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn heap_free(mem: *mut *mut byte_t, size: u32, name: *const char_t);
}
unsafe extern "C" {
    pub fn heap_auditor_add(name: *const char_t);
}
unsafe extern "C" {
    pub fn heap_auditor_delete(name: *const char_t);
}
unsafe extern "C" {
    pub fn hfile_dir(pathname: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_dir_create(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_dir_destroy(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_dir_list(
        pathname: *const char_t,
        subdirs: bool_t,
        error: *mut ferror_t,
    ) -> *mut ArrStDirEntry;
}
unsafe extern "C" {
    pub fn hfile_dir_entry_remove(entry: *mut DirEntry);
}
unsafe extern "C" {
    pub fn hfile_date(pathname: *const char_t, recursive: bool_t) -> Date;
}
unsafe extern "C" {
    pub fn hfile_dir_sync(
        src: *const char_t,
        dest: *const char_t,
        recursive: bool_t,
        remove_in_dest: bool_t,
        except: *mut *const char_t,
        except_size: u32,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_exists(pathname: *const char_t, file_type: *mut file_type_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_is_uptodate(src: *const char_t, dest: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_copy(from: *const char_t, to: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_buffer(pathname: *const char_t, error: *mut ferror_t) -> *mut Buffer;
}
unsafe extern "C" {
    pub fn hfile_string(pathname: *const char_t, error: *mut ferror_t) -> *mut String;
}
unsafe extern "C" {
    pub fn hfile_stream(pathname: *const char_t, error: *mut ferror_t) -> *mut Stream;
}
unsafe extern "C" {
    pub fn hfile_from_string(
        pathname: *const char_t,
        str_: *const String,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_from_data(
        pathname: *const char_t,
        data: *const byte_t,
        size: u32,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_dir_loop(
        pathname: *const char_t,
        listener: *mut Listener,
        subdirs: bool_t,
        hiddens: bool_t,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn hfile_appdata(filename: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn hfile_home_dir(path: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn hfile_tmp_path(path: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn keybuf_create() -> *mut KeyBuf;
}
unsafe extern "C" {
    pub fn keybuf_destroy(buffer: *mut *mut KeyBuf);
}
unsafe extern "C" {
    pub fn keybuf_OnUp(buffer: *mut KeyBuf, key: vkey_t);
}
unsafe extern "C" {
    pub fn keybuf_OnDown(buffer: *mut KeyBuf, key: vkey_t);
}
unsafe extern "C" {
    pub fn keybuf_clear(buffer: *mut KeyBuf);
}
unsafe extern "C" {
    pub fn keybuf_pressed(buffer: *const KeyBuf, key: vkey_t) -> bool_t;
}
unsafe extern "C" {
    pub fn keybuf_str(key: vkey_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn keybuf_dump(buffer: *const KeyBuf);
}
unsafe extern "C" {
    pub fn respack_destroy(pack: *mut *mut ResPack);
}
unsafe extern "C" {
    pub fn respack_text(pack: *const ResPack, id: ResId) -> *const char_t;
}
unsafe extern "C" {
    pub fn respack_file(pack: *const ResPack, id: ResId, size: *mut u32) -> *const byte_t;
}
unsafe extern "C" {
    pub fn regex_create(pattern: *const char_t) -> *mut RegEx;
}
unsafe extern "C" {
    pub fn regex_destroy(regex: *mut *mut RegEx);
}
unsafe extern "C" {
    pub fn regex_match(regex: *const RegEx, str_: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn stm_from_block(data: *const byte_t, size: u32) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_memory(size: u32) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_from_file(pathname: *const char_t, error: *mut ferror_t) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_to_file(pathname: *const char_t, error: *mut ferror_t) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_append_file(pathname: *const char_t, error: *mut ferror_t) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_socket(socket: *mut Socket) -> *mut Stream;
}
unsafe extern "C" {
    pub fn stm_close(stm: *mut *mut Stream);
}
unsafe extern "C" {
    pub fn stm_get_write_endian(stm: *const Stream) -> endian_t;
}
unsafe extern "C" {
    pub fn stm_get_read_endian(stm: *const Stream) -> endian_t;
}
unsafe extern "C" {
    pub fn stm_set_write_endian(stm: *mut Stream, endian: endian_t);
}
unsafe extern "C" {
    pub fn stm_set_read_endian(stm: *mut Stream, endian: endian_t);
}
unsafe extern "C" {
    pub fn stm_get_write_utf(stm: *const Stream) -> unicode_t;
}
unsafe extern "C" {
    pub fn stm_get_read_utf(stm: *const Stream) -> unicode_t;
}
unsafe extern "C" {
    pub fn stm_set_write_utf(stm: *mut Stream, format: unicode_t);
}
unsafe extern "C" {
    pub fn stm_set_read_utf(stm: *mut Stream, format: unicode_t);
}
unsafe extern "C" {
    pub fn stm_is_memory(stm: *const Stream) -> bool_t;
}
unsafe extern "C" {
    pub fn stm_bytes_written(stm: *const Stream) -> u64;
}
unsafe extern "C" {
    pub fn stm_bytes_readed(stm: *const Stream) -> u64;
}
unsafe extern "C" {
    pub fn stm_col(stm: *const Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_row(stm: *const Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_token_col(stm: *const Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_token_row(stm: *const Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_token_lexeme(stm: *const Stream, size: *mut u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn stm_token_escapes(stm: *mut Stream, active_escapes: bool_t);
}
unsafe extern "C" {
    pub fn stm_token_spaces(stm: *mut Stream, active_spaces: bool_t);
}
unsafe extern "C" {
    pub fn stm_token_comments(stm: *mut Stream, active_comments: bool_t);
}
unsafe extern "C" {
    pub fn stm_state(stm: *const Stream) -> sstate_t;
}
unsafe extern "C" {
    pub fn stm_file_err(stm: *const Stream) -> ferror_t;
}
unsafe extern "C" {
    pub fn stm_sock_err(stm: *const Stream) -> serror_t;
}
unsafe extern "C" {
    pub fn stm_corrupt(stm: *mut Stream);
}
unsafe extern "C" {
    pub fn stm_str(stm: *const Stream) -> *mut String;
}
unsafe extern "C" {
    pub fn stm_buffer(stm: *const Stream) -> *const byte_t;
}
unsafe extern "C" {
    pub fn stm_buffer_size(stm: *const Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_write(stm: *mut Stream, data: *const byte_t, size: u32);
}
unsafe extern "C" {
    pub fn stm_write_char(stm: *mut Stream, codepoint: u32);
}
unsafe extern "C" {
    pub fn stm_printf(stm: *mut Stream, format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn stm_writef(stm: *mut Stream, str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn stm_write_bool(stm: *mut Stream, value: bool_t);
}
unsafe extern "C" {
    pub fn stm_write_i8(stm: *mut Stream, value: i8);
}
unsafe extern "C" {
    pub fn stm_write_i16(stm: *mut Stream, value: i16);
}
unsafe extern "C" {
    pub fn stm_write_i32(stm: *mut Stream, value: i32);
}
unsafe extern "C" {
    pub fn stm_write_i64(stm: *mut Stream, value: i64);
}
unsafe extern "C" {
    pub fn stm_write_u8(stm: *mut Stream, value: u8);
}
unsafe extern "C" {
    pub fn stm_write_u16(stm: *mut Stream, value: u16);
}
unsafe extern "C" {
    pub fn stm_write_u32(stm: *mut Stream, value: u32);
}
unsafe extern "C" {
    pub fn stm_write_u64(stm: *mut Stream, value: u64);
}
unsafe extern "C" {
    pub fn stm_write_r32(stm: *mut Stream, value: real32_t);
}
unsafe extern "C" {
    pub fn stm_write_r64(stm: *mut Stream, value: real64_t);
}
unsafe extern "C" {
    pub fn stm_read(stm: *mut Stream, data: *mut byte_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn stm_read_char(stm: *mut Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_read_chars(stm: *mut Stream, n: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn stm_read_line(stm: *mut Stream) -> *const char_t;
}
unsafe extern "C" {
    pub fn stm_read_trim(stm: *mut Stream) -> *const char_t;
}
unsafe extern "C" {
    pub fn stm_read_token(stm: *mut Stream) -> ltoken_t;
}
unsafe extern "C" {
    pub fn stm_read_i8_tok(stm: *mut Stream) -> i8;
}
unsafe extern "C" {
    pub fn stm_read_i16_tok(stm: *mut Stream) -> i16;
}
unsafe extern "C" {
    pub fn stm_read_i32_tok(stm: *mut Stream) -> i32;
}
unsafe extern "C" {
    pub fn stm_read_i64_tok(stm: *mut Stream) -> i64;
}
unsafe extern "C" {
    pub fn stm_read_u8_tok(stm: *mut Stream) -> u8;
}
unsafe extern "C" {
    pub fn stm_read_u16_tok(stm: *mut Stream) -> u16;
}
unsafe extern "C" {
    pub fn stm_read_u32_tok(stm: *mut Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_read_u64_tok(stm: *mut Stream) -> u64;
}
unsafe extern "C" {
    pub fn stm_read_r32_tok(stm: *mut Stream) -> real32_t;
}
unsafe extern "C" {
    pub fn stm_read_r64_tok(stm: *mut Stream) -> real64_t;
}
unsafe extern "C" {
    pub fn stm_read_bool(stm: *mut Stream) -> bool_t;
}
unsafe extern "C" {
    pub fn stm_read_i8(stm: *mut Stream) -> i8;
}
unsafe extern "C" {
    pub fn stm_read_i16(stm: *mut Stream) -> i16;
}
unsafe extern "C" {
    pub fn stm_read_i32(stm: *mut Stream) -> i32;
}
unsafe extern "C" {
    pub fn stm_read_i64(stm: *mut Stream) -> i64;
}
unsafe extern "C" {
    pub fn stm_read_u8(stm: *mut Stream) -> u8;
}
unsafe extern "C" {
    pub fn stm_read_u16(stm: *mut Stream) -> u16;
}
unsafe extern "C" {
    pub fn stm_read_u32(stm: *mut Stream) -> u32;
}
unsafe extern "C" {
    pub fn stm_read_u64(stm: *mut Stream) -> u64;
}
unsafe extern "C" {
    pub fn stm_read_r32(stm: *mut Stream) -> real32_t;
}
unsafe extern "C" {
    pub fn stm_read_r64(stm: *mut Stream) -> real64_t;
}
unsafe extern "C" {
    pub fn stm_skip(stm: *mut Stream, size: u32);
}
unsafe extern "C" {
    pub fn stm_skip_bom(stm: *mut Stream);
}
unsafe extern "C" {
    pub fn stm_skip_token(stm: *mut Stream, token: ltoken_t);
}
unsafe extern "C" {
    pub fn stm_flush(stm: *mut Stream);
}
unsafe extern "C" {
    pub fn stm_pipe(from: *mut Stream, to: *mut Stream, n: u32);
}
unsafe extern "C" {
    pub static mut kSTDIN: *mut Stream;
}
unsafe extern "C" {
    pub static mut kSTDOUT: *mut Stream;
}
unsafe extern "C" {
    pub static mut kSTDERR: *mut Stream;
}
unsafe extern "C" {
    pub static mut kDEVNULL: *mut Stream;
}
unsafe extern "C" {
    pub fn tc(str_: *const String) -> *const char_t;
}
unsafe extern "C" {
    pub fn tcc(str_: *mut String) -> *mut char_t;
}
unsafe extern "C" {
    pub fn str_c(str_: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn str_cn(str_: *const char_t, n: u32) -> *mut String;
}
unsafe extern "C" {
    pub fn str_trim(str_: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn str_trim_n(str_: *const char_t, n: u32) -> *mut String;
}
unsafe extern "C" {
    pub fn str_copy(str_: *const String) -> *mut String;
}
unsafe extern "C" {
    pub fn str_printf(format: *const char_t, ...) -> *mut String;
}
unsafe extern "C" {
    pub fn str_path(platform: platform_t, format: *const char_t, ...) -> *mut String;
}
unsafe extern "C" {
    pub fn str_cpath(format: *const char_t, ...) -> *mut String;
}
unsafe extern "C" {
    pub fn str_relpath(
        platform: platform_t,
        path1: *const char_t,
        path2: *const char_t,
    ) -> *mut String;
}
unsafe extern "C" {
    pub fn str_crelpath(path1: *const char_t, path2: *const char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn str_repl(str_: *const char_t, ...) -> *mut String;
}
unsafe extern "C" {
    pub fn str_reserve(n: u32) -> *mut String;
}
unsafe extern "C" {
    pub fn str_fill(n: u32, c: char_t) -> *mut String;
}
unsafe extern "C" {
    pub fn str_read(stream: *mut Stream) -> *mut String;
}
unsafe extern "C" {
    pub fn str_write(stream: *mut Stream, str_: *const String);
}
unsafe extern "C" {
    pub fn str_writef(stream: *mut Stream, str_: *const String);
}
unsafe extern "C" {
    pub fn str_copy_c(dest: *mut char_t, size: u32, src: *const char_t);
}
unsafe extern "C" {
    pub fn str_copy_cn(dest: *mut char_t, size: u32, src: *const char_t, n: u32);
}
unsafe extern "C" {
    pub fn str_cat(dest: *mut *mut String, src: *const char_t);
}
unsafe extern "C" {
    pub fn str_cat_c(dest: *mut char_t, size: u32, src: *const char_t);
}
unsafe extern "C" {
    pub fn str_upd(str_: *mut *mut String, new_str: *const char_t);
}
unsafe extern "C" {
    pub fn str_destroy(str_: *mut *mut String);
}
unsafe extern "C" {
    pub fn str_destopt(str_: *mut *mut String);
}
unsafe extern "C" {
    pub fn str_len(str_: *const String) -> u32;
}
unsafe extern "C" {
    pub fn str_len_c(str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn str_nchars(str_: *const String) -> u32;
}
unsafe extern "C" {
    pub fn str_prefix(str1: *const char_t, str2: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn str_is_prefix(str_: *const char_t, prefix: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_is_sufix(str_: *const char_t, sufix: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_scmp(str1: *const String, str2: *const String) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn str_cmp(str1: *const String, str2: *const char_t) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn str_cmp_c(str1: *const char_t, str2: *const char_t) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn str_cmp_cn(str1: *const char_t, str2: *const char_t, n: u32) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn str_empty(str_: *const String) -> bool_t;
}
unsafe extern "C" {
    pub fn str_empty_c(str_: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_equ(str1: *const String, str2: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_equ_c(str1: *const char_t, str2: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_equ_cn(str1: *const char_t, str2: *const char_t, n: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn str_equ_nocase(str1: *const char_t, str2: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_equ_end(str_: *const char_t, end: *const char_t) -> bool_t;
}
unsafe extern "C" {
    pub fn str_upper(str_: *mut String);
}
unsafe extern "C" {
    pub fn str_lower(str_: *mut String);
}
unsafe extern "C" {
    pub fn str_upper_c(dest: *mut char_t, size: u32, str_: *const char_t);
}
unsafe extern "C" {
    pub fn str_lower_c(dest: *mut char_t, size: u32, str_: *const char_t);
}
unsafe extern "C" {
    pub fn str_subs(str_: *mut String, replace: char_t, with: char_t);
}
unsafe extern "C" {
    pub fn str_repl_c(str_: *mut char_t, replace: *const char_t, with: *const char_t);
}
unsafe extern "C" {
    pub fn str_str(str_: *const char_t, substr: *const char_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn str_split(
        str_: *const char_t,
        substr: *const char_t,
        left: *mut *mut String,
        right: *mut *mut String,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn str_split_trim(
        str_: *const char_t,
        substr: *const char_t,
        left: *mut *mut String,
        right: *mut *mut String,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn str_splits(
        str_: *const char_t,
        substr: *const char_t,
        trim: bool_t,
        add_empty: bool_t,
    ) -> *mut ArrPtString;
}
unsafe extern "C" {
    pub fn str_split_pathname(
        pathname: *const char_t,
        path: *mut *mut String,
        file: *mut *mut String,
    );
}
unsafe extern "C" {
    pub fn str_split_pathext(
        pathname: *const char_t,
        path: *mut *mut String,
        file: *mut *mut String,
        ext: *mut *mut String,
    );
}
unsafe extern "C" {
    pub fn str_filename(pathname: *const char_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn str_filext(pathname: *const char_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn str_find(array: *const ArrPtString, str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn str_to_i8(str_: *const char_t, base: u32, error: *mut bool_t) -> i8;
}
unsafe extern "C" {
    pub fn str_to_i16(str_: *const char_t, base: u32, error: *mut bool_t) -> i16;
}
unsafe extern "C" {
    pub fn str_to_i32(str_: *const char_t, base: u32, error: *mut bool_t) -> i32;
}
unsafe extern "C" {
    pub fn str_to_i64(str_: *const char_t, base: u32, error: *mut bool_t) -> i64;
}
unsafe extern "C" {
    pub fn str_to_u8(str_: *const char_t, base: u32, error: *mut bool_t) -> u8;
}
unsafe extern "C" {
    pub fn str_to_u16(str_: *const char_t, base: u32, error: *mut bool_t) -> u16;
}
unsafe extern "C" {
    pub fn str_to_u32(str_: *const char_t, base: u32, error: *mut bool_t) -> u32;
}
unsafe extern "C" {
    pub fn str_to_u64(str_: *const char_t, base: u32, error: *mut bool_t) -> u64;
}
unsafe extern "C" {
    pub fn str_to_r32(str_: *const char_t, error: *mut bool_t) -> real32_t;
}
unsafe extern "C" {
    pub fn str_to_r64(str_: *const char_t, error: *mut bool_t) -> real64_t;
}
unsafe extern "C" {
    pub fn tfilter_date(
        src: *const char_t,
        dest: *mut char_t,
        size: u32,
        pattern: *const char_t,
        cpos: u32,
        deleted: bool_t,
        ncpos: *mut u32,
    );
}
unsafe extern "C" {
    pub fn tfilter_to_date(text: *const char_t, pattern: *const char_t) -> Date;
}
unsafe extern "C" {
    pub fn osbs_start();
}
unsafe extern "C" {
    pub fn osbs_finish();
}
unsafe extern "C" {
    pub fn osbs_platform() -> platform_t;
}
unsafe extern "C" {
    pub fn osbs_windows() -> win_t;
}
unsafe extern "C" {
    pub fn osbs_endian() -> endian_t;
}
unsafe extern "C" {
    pub fn osbs_memory_mt(mutex: *mut Mutex);
}
unsafe extern "C" {
    pub fn bfile_dir_work(pathname: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bfile_dir_set_work(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_dir_home(pathname: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bfile_dir_data(pathname: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bfile_dir_exec(pathname: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bfile_dir_tmp(pathname: *mut char_t, size: u32) -> u32;
}
unsafe extern "C" {
    pub fn bfile_dir_create(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_dir_open(pathname: *const char_t, error: *mut ferror_t) -> *mut Dir;
}
unsafe extern "C" {
    pub fn bfile_dir_close(dir: *mut *mut Dir);
}
unsafe extern "C" {
    pub fn bfile_dir_get(
        dir: *mut Dir,
        name: *mut char_t,
        size: u32,
        type_: *mut file_type_t,
        fsize: *mut u64,
        updated: *mut Date,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_dir_delete(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_create(pathname: *const char_t, error: *mut ferror_t) -> *mut File;
}
unsafe extern "C" {
    pub fn bfile_open(
        pathname: *const char_t,
        mode: file_mode_t,
        error: *mut ferror_t,
    ) -> *mut File;
}
unsafe extern "C" {
    pub fn bfile_close(file: *mut *mut File);
}
unsafe extern "C" {
    pub fn bfile_lstat(
        pathname: *const char_t,
        type_: *mut file_type_t,
        size: *mut u64,
        updated: *mut Date,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_fstat(
        file: *const File,
        type_: *mut file_type_t,
        size: *mut u64,
        updated: *mut Date,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_read(
        file: *mut File,
        data: *mut byte_t,
        size: u32,
        rsize: *mut u32,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_write(
        file: *mut File,
        data: *const byte_t,
        size: u32,
        wsize: *mut u32,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_seek(
        file: *mut File,
        offset: i64,
        whence: file_seek_t,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_pos(file: *const File) -> u64;
}
unsafe extern "C" {
    pub fn bfile_delete(pathname: *const char_t, error: *mut ferror_t) -> bool_t;
}
unsafe extern "C" {
    pub fn bfile_rename(
        current_pathname: *const char_t,
        new_pathname: *const char_t,
        error: *mut ferror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bmutex_create() -> *mut Mutex;
}
unsafe extern "C" {
    pub fn bmutex_close(mutex: *mut *mut Mutex);
}
unsafe extern "C" {
    pub fn bmutex_lock(mutex: *mut Mutex);
}
unsafe extern "C" {
    pub fn bmutex_unlock(mutex: *mut Mutex);
}
unsafe extern "C" {
    pub fn bproc_exec(command: *const char_t, error: *mut perror_t) -> *mut Proc;
}
unsafe extern "C" {
    pub fn bproc_close(proc_: *mut *mut Proc);
}
unsafe extern "C" {
    pub fn bproc_cancel(proc_: *mut Proc) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_wait(proc_: *mut Proc) -> u32;
}
unsafe extern "C" {
    pub fn bproc_finish(proc_: *mut Proc, code: *mut u32) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_read(
        proc_: *mut Proc,
        data: *mut byte_t,
        size: u32,
        rsize: *mut u32,
        error: *mut perror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_eread(
        proc_: *mut Proc,
        data: *mut byte_t,
        size: u32,
        rsize: *mut u32,
        error: *mut perror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_write(
        proc_: *mut Proc,
        data: *const byte_t,
        size: u32,
        wsize: *mut u32,
        error: *mut perror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_read_close(proc_: *mut Proc) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_eread_close(proc_: *mut Proc) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_write_close(proc_: *mut Proc) -> bool_t;
}
unsafe extern "C" {
    pub fn bproc_exit(code: u32);
}
unsafe extern "C" {
    pub fn bsocket_connect(
        ip: u32,
        port: u16,
        timeout_ms: u32,
        error: *mut serror_t,
    ) -> *mut Socket;
}
unsafe extern "C" {
    pub fn bsocket_server(port: u16, max_connect: u32, error: *mut serror_t) -> *mut Socket;
}
unsafe extern "C" {
    pub fn bsocket_accept(
        socket: *mut Socket,
        timeout_ms: u32,
        error: *mut serror_t,
    ) -> *mut Socket;
}
unsafe extern "C" {
    pub fn bsocket_close(socket: *mut *mut Socket);
}
unsafe extern "C" {
    pub fn bsocket_local_ip(socket: *mut Socket, ip: *mut u32, port: *mut u16);
}
unsafe extern "C" {
    pub fn bsocket_remote_ip(socket: *mut Socket, ip: *mut u32, port: *mut u16);
}
unsafe extern "C" {
    pub fn bsocket_read_timeout(socket: *mut Socket, timeout_ms: u32);
}
unsafe extern "C" {
    pub fn bsocket_write_timeout(socket: *mut Socket, timeout_ms: u32);
}
unsafe extern "C" {
    pub fn bsocket_read(
        socket: *mut Socket,
        data: *mut byte_t,
        size: u32,
        rsize: *mut u32,
        error: *mut serror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bsocket_write(
        socket: *mut Socket,
        data: *const byte_t,
        size: u32,
        wsize: *mut u32,
        error: *mut serror_t,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bsocket_url_ip(url: *const char_t, error: *mut serror_t) -> u32;
}
unsafe extern "C" {
    pub fn bsocket_str_ip(ip: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn bsocket_host_name(buffer: *mut char_t, size: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn bsocket_host_name_ip(ip: u32, buffer: *mut char_t, size: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn bsocket_ip_str(ip: u32) -> *const char_t;
}
unsafe extern "C" {
    pub fn bsocket_hton2(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bsocket_hton4(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bsocket_hton8(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bsocket_ntoh2(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bsocket_ntoh4(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bsocket_ntoh8(dest: *mut byte_t, src: *const byte_t);
}
unsafe extern "C" {
    pub fn bthread_create_imp(thmain: FPtr_thread_main, data: *mut ::libc::c_void) -> *mut Thread;
}
unsafe extern "C" {
    pub fn bthread_current_id() -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn bthread_close(thread: *mut *mut Thread);
}
unsafe extern "C" {
    pub fn bthread_cancel(thread: *mut Thread) -> bool_t;
}
unsafe extern "C" {
    pub fn bthread_wait(thread: *mut Thread) -> u32;
}
unsafe extern "C" {
    pub fn bthread_finish(thread: *mut Thread, code: *mut u32) -> bool_t;
}
unsafe extern "C" {
    pub fn bthread_sleep(milliseconds: u32);
}
unsafe extern "C" {
    pub fn btime_now() -> u64;
}
unsafe extern "C" {
    pub fn btime_date(date: *mut Date);
}
unsafe extern "C" {
    pub fn btime_to_micro(date: *const Date) -> u64;
}
unsafe extern "C" {
    pub fn btime_to_date(micro: u64, date: *mut Date);
}
unsafe extern "C" {
    pub fn dlib_open(path: *const char_t, libname: *const char_t) -> *mut DLib;
}
unsafe extern "C" {
    pub fn dlib_close(dlib: *mut *mut DLib);
}
unsafe extern "C" {
    pub fn dlib_proc_imp(dlib: *mut DLib, procname: *const char_t) -> FPtr_libproc;
}
unsafe extern "C" {
    pub fn dlib_var_imp(dlib: *mut DLib, varname: *const char_t) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn log_printf(format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn log_output(std: bool_t, err: bool_t);
}
unsafe extern "C" {
    pub fn log_file(pathname: *const char_t);
}
unsafe extern "C" {
    pub fn log_get_file() -> *const char_t;
}
unsafe extern "C" {
    pub fn sewer_start();
}
unsafe extern "C" {
    pub fn sewer_finish();
}
unsafe extern "C" {
    pub fn sewer_nappgui_major() -> u32;
}
unsafe extern "C" {
    pub fn sewer_nappgui_minor() -> u32;
}
unsafe extern "C" {
    pub fn sewer_nappgui_patch() -> u32;
}
unsafe extern "C" {
    pub fn sewer_nappgui_build() -> u32;
}
unsafe extern "C" {
    pub fn sewer_nappgui_version(full: bool_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn blib_strlen(str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn blib_strstr(str_: *const char_t, substr: *const char_t) -> *mut char_t;
}
unsafe extern "C" {
    pub fn blib_strcpy(dest: *mut char_t, size: u32, src: *const char_t);
}
unsafe extern "C" {
    pub fn blib_strncpy(dest: *mut char_t, size: u32, src: *const char_t, n: u32);
}
unsafe extern "C" {
    pub fn blib_strcat(dest: *mut char_t, size: u32, src: *const char_t);
}
unsafe extern "C" {
    pub fn blib_strcmp(str1: *const char_t, str2: *const char_t) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn blib_strncmp(str1: *const char_t, str2: *const char_t, n: u32) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn blib_strftime(
        dest: *mut char_t,
        size: u32,
        format: *const char_t,
        year: i16,
        month: u8,
        mday: u8,
        wday: u8,
        hour: u8,
        minute: u8,
        second: u8,
    ) -> u32;
}
unsafe extern "C" {
    pub fn blib_strtol(
        str_: *const char_t,
        endptr: *mut *mut char_t,
        base: u32,
        err: *mut bool_t,
    ) -> i64;
}
unsafe extern "C" {
    pub fn blib_strtoul(
        str_: *const char_t,
        endptr: *mut *mut char_t,
        base: u32,
        err: *mut bool_t,
    ) -> u64;
}
unsafe extern "C" {
    pub fn blib_strtof(str_: *const char_t, endptr: *mut *mut char_t, err: *mut bool_t)
        -> real32_t;
}
unsafe extern "C" {
    pub fn blib_strtod(str_: *const char_t, endptr: *mut *mut char_t, err: *mut bool_t)
        -> real64_t;
}
unsafe extern "C" {
    pub fn blib_qsort(array: *mut byte_t, nelems: u32, size: u32, func_compare: FPtr_compare);
}
unsafe extern "C" {
    pub fn blib_qsort_ex(
        array: *const byte_t,
        nelems: u32,
        size: u32,
        func_compare: FPtr_compare_ex,
        data: *const byte_t,
    );
}
unsafe extern "C" {
    pub fn blib_bsearch(
        array: *const byte_t,
        key: *const byte_t,
        nelems: u32,
        size: u32,
        func_compare: FPtr_compare,
        pos: *mut u32,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn blib_bsearch_ex(
        array: *const byte_t,
        key: *const byte_t,
        nelems: u32,
        size: u32,
        func_compare: FPtr_compare_ex,
        data: *const byte_t,
        pos: *mut u32,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn blib_getenv(name: *const char_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn blib_setenv(name: *const char_t, value: *const char_t) -> i32;
}
unsafe extern "C" {
    pub fn blib_atexit(func: ::core::option::Option<unsafe extern "C" fn()>);
}
unsafe extern "C" {
    pub fn blib_abort();
}
unsafe extern "C" {
    pub fn blib_exit(code: ::libc::c_int);
}
unsafe extern "C" {
    pub fn blib_debug_break();
}
unsafe extern "C" {
    pub fn bmath_cosf(angle: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_cosd(angle: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_sinf(angle: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_sind(angle: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_tanf(angle: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_tand(angle: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_acosf(cos: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_acosd(cos: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_asinf(sin: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_asind(sin: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_atan2f(y: real32_t, x: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_atan2d(y: real64_t, x: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_norm_anglef(a: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_norm_angled(a: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_sqrtf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_sqrtd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_isqrtf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_isqrtd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_logf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_logd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_log10f(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_log10d(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_expf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_expd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_powf(base: real32_t, exponent: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_powd(base: real64_t, exponent: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_absf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_absd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_maxf(value1: real32_t, value2: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_maxd(value1: real64_t, value2: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_minf(value1: real32_t, value2: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_mind(value1: real64_t, value2: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_clampf(value: real32_t, min: real32_t, max: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_clampd(value: real64_t, min: real64_t, max: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_modf(num: real32_t, den: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_modd(num: real64_t, den: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_modff(value: real32_t, intpart: *mut real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_modfd(value: real64_t, intpart: *mut real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_precf(value: real32_t) -> u32;
}
unsafe extern "C" {
    pub fn bmath_precd(value: real64_t) -> u32;
}
unsafe extern "C" {
    pub fn bmath_roundf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_roundd(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_round_stepf(value: real32_t, step: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_round_stepd(value: real64_t, step: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_floorf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_floord(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_ceilf(value: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_ceild(value: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_rand_seed(seed: u32);
}
unsafe extern "C" {
    pub fn bmath_randf(from: real32_t, to: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_randd(from: real64_t, to: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_randi(from: u32, to: u32) -> u32;
}
unsafe extern "C" {
    pub fn bmath_rand_env(seed: u32) -> *mut REnv;
}
unsafe extern "C" {
    pub fn bmath_rand_destroy(env: *mut *mut REnv);
}
unsafe extern "C" {
    pub fn bmath_rand_mtf(env: *mut REnv, from: real32_t, to: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn bmath_rand_mtd(env: *mut REnv, from: real64_t, to: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn bmath_rand_mti(env: *mut REnv, from: u32, to: u32) -> u32;
}
unsafe extern "C" {
    pub static kBMATH_Ef: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_Ed: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_LN2f: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_LN2d: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_LN10f: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_LN10d: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_PIf: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_PId: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_SQRT2f: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_SQRT2d: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_SQRT3f: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_SQRT3d: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_DEG2RADf: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_DEG2RADd: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_RAD2DEGf: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_RAD2DEGd: real64_t;
}
unsafe extern "C" {
    pub static kBMATH_INFINITYf: real32_t;
}
unsafe extern "C" {
    pub static kBMATH_INFINITYd: real64_t;
}
unsafe extern "C" {
    pub fn bmem_aligned_malloc(size: u32, align: u32) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn bmem_aligned_realloc(
        mem: *mut byte_t,
        size: u32,
        new_size: u32,
        align: u32,
    ) -> *mut byte_t;
}
unsafe extern "C" {
    pub fn bmem_free(mem: *mut byte_t);
}
unsafe extern "C" {
    pub fn bmem_set1(dest: *mut byte_t, size: u32, mask: byte_t);
}
unsafe extern "C" {
    pub fn bmem_set4(dest: *mut byte_t, size: u32, mask: *const byte_t);
}
unsafe extern "C" {
    pub fn bmem_set8(dest: *mut byte_t, size: u32, mask: *const byte_t);
}
unsafe extern "C" {
    pub fn bmem_set16(dest: *mut byte_t, size: u32, mask: *const byte_t);
}
unsafe extern "C" {
    pub fn bmem_cmp(mem1: *const byte_t, mem2: *const byte_t, size: u32) -> ::libc::c_int;
}
unsafe extern "C" {
    pub fn bmem_is_zero(mem: *const byte_t, size: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn bmem_set_zero(dest: *mut byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_copy(dest: *mut byte_t, src: *const byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_move(dest: *mut byte_t, src: *const byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_overlaps(
        mem1: *const byte_t,
        mem2: *const byte_t,
        size1: u32,
        size2: u32,
    ) -> bool_t;
}
unsafe extern "C" {
    pub fn bmem_rev(mem: *mut byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_rev2(mem: *mut byte_t);
}
unsafe extern "C" {
    pub fn bmem_rev4(mem: *mut byte_t);
}
unsafe extern "C" {
    pub fn bmem_rev8(mem: *mut byte_t);
}
unsafe extern "C" {
    pub fn bmem_revcopy(dest: *mut byte_t, src: *const byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_rev_elems_imp(data: *mut byte_t, num_elems: u32, elem_size: u32);
}
unsafe extern "C" {
    pub fn bmem_swap(mem1: *mut byte_t, mem2: *mut byte_t, size: u32);
}
unsafe extern "C" {
    pub fn bmem_shuffle(mem: *mut byte_t, size: u32, esize: u32);
}
unsafe extern "C" {
    pub fn bstd_sprintf(str_: *mut char_t, size: u32, format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn bstd_vsprintf(str_: *mut char_t, size: u32, format: *const char_t, args: va_list)
        -> u32;
}
unsafe extern "C" {
    pub fn bstd_printf(format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn bstd_eprintf(format: *const char_t, ...) -> u32;
}
unsafe extern "C" {
    pub fn bstd_writef(str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn bstd_ewritef(str_: *const char_t) -> u32;
}
unsafe extern "C" {
    pub fn bstd_read(data: *mut byte_t, size: u32, rsize: *mut u32) -> bool_t;
}
unsafe extern "C" {
    pub fn bstd_write(data: *const byte_t, size: u32, wsize: *mut u32) -> bool_t;
}
unsafe extern "C" {
    pub fn bstd_ewrite(data: *const byte_t, size: u32, wsize: *mut u32) -> bool_t;
}
unsafe extern "C" {
    pub fn cassert_set_func(data: *mut ::libc::c_void, func_assert: FPtr_assert);
}
unsafe extern "C" {
    pub fn cassert_imp(cond: bool_t, detail: *const char_t, file: *const char_t, line: u32);
}
unsafe extern "C" {
    pub fn cassert_fatal_imp(cond: bool_t, detail: *const char_t, file: *const char_t, line: u32);
}
unsafe extern "C" {
    pub fn cassert_no_null_imp(
        ptr: *mut ::libc::c_void,
        detail: *const char_t,
        file: *const char_t,
        line: u32,
    );
}
unsafe extern "C" {
    pub fn cassert_no_nullf_imp(
        ptr: ::core::option::Option<unsafe extern "C" fn()>,
        detail: *const char_t,
        file: *const char_t,
        line: u32,
    );
}
unsafe extern "C" {
    pub fn cassert_default_imp(file: *const char_t, line: u32);
}
unsafe extern "C" {
    pub fn ptr_dget_imp(dptr: *mut *mut ::libc::c_void) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn ptr_dget_no_null_imp(dptr: *mut *mut ::libc::c_void) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn ptr_destopt_imp(dptr: *mut *mut ::libc::c_void, func_destroy: FPtr_destroy);
}
unsafe extern "C" {
    pub fn ptr_copyopt_imp(ptr: *mut ::libc::c_void, func_copy: FPtr_copy) -> *mut ::libc::c_void;
}
unsafe extern "C" {
    pub fn min_u32(v1: u32, v2: u32) -> u32;
}
unsafe extern "C" {
    pub fn min_r32(v1: real32_t, v2: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn min_r64(v1: real64_t, v2: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn max_u32(v1: u32, v2: u32) -> u32;
}
unsafe extern "C" {
    pub fn max_r32(v1: real32_t, v2: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn max_r64(v1: real64_t, v2: real64_t) -> real64_t;
}
unsafe extern "C" {
    pub fn abs_r32(v: real32_t) -> real32_t;
}
unsafe extern "C" {
    pub fn to_u8(v: u32) -> u8;
}
unsafe extern "C" {
    pub fn unicode_convers(
        from_str: *const char_t,
        to_str: *mut char_t,
        from: unicode_t,
        to: unicode_t,
        osize: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn unicode_convers_n(
        from_str: *const char_t,
        to_str: *mut char_t,
        from: unicode_t,
        to: unicode_t,
        isize_: u32,
        osize: u32,
    ) -> u32;
}
unsafe extern "C" {
    pub fn unicode_convers_nbytes(str_: *const char_t, from: unicode_t, to: unicode_t) -> u32;
}
unsafe extern "C" {
    pub fn unicode_convers_nbytes_n(
        str_: *const char_t,
        isize_: u32,
        from: unicode_t,
        to: unicode_t,
    ) -> u32;
}
unsafe extern "C" {
    pub fn unicode_nbytes(str_: *const char_t, format: unicode_t) -> u32;
}
unsafe extern "C" {
    pub fn unicode_nchars(str_: *const char_t, format: unicode_t) -> u32;
}
unsafe extern "C" {
    pub fn unicode_to_u32(str_: *const char_t, format: unicode_t) -> u32;
}
unsafe extern "C" {
    pub fn unicode_to_u32b(str_: *const char_t, format: unicode_t, bytes: *mut u32) -> u32;
}
unsafe extern "C" {
    pub fn unicode_to_char(codepoint: u32, str_: *mut char_t, format: unicode_t) -> u32;
}
unsafe extern "C" {
    pub fn unicode_valid_str(str_: *const char_t, format: unicode_t) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_valid_str_n(str_: *const char_t, size: u32, format: unicode_t) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_valid(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_next(str_: *const char_t, format: unicode_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn unicode_back(str_: *const char_t, format: unicode_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn unicode_move(str_: *const char_t, nchars: u32, format: unicode_t) -> *const char_t;
}
unsafe extern "C" {
    pub fn unicode_isascii(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isalnum(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isalpha(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_iscntrl(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isdigit(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isgraph(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isprint(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_ispunct(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isspace(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isxdigit(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_islower(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_isupper(codepoint: u32) -> bool_t;
}
unsafe extern "C" {
    pub fn unicode_tolower(codepoint: u32) -> u32;
}
unsafe extern "C" {
    pub fn unicode_toupper(codepoint: u32) -> u32;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_locale_data {
    pub _address: u8,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __crt_multibyte_data {
    pub _address: u8,
}
